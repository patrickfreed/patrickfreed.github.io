<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="805.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="71026"><g><title>[unknown] (13 samples, 0.02%)</title><rect x="0.0113%" y="741" width="0.0183%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="13"/><text x="0.2613%" y="751.50"></text></g><g><title>PyRun_SimpleFileExFlags (16 samples, 0.02%)</title><rect x="0.0296%" y="677" width="0.0225%" height="15" fill="rgb(217,0,24)" fg:x="21" fg:w="16"/><text x="0.2796%" y="687.50"></text></g><g><title>[python3.8] (16 samples, 0.02%)</title><rect x="0.0296%" y="661" width="0.0225%" height="15" fill="rgb(221,193,54)" fg:x="21" fg:w="16"/><text x="0.2796%" y="671.50"></text></g><g><title>[python3.8] (16 samples, 0.02%)</title><rect x="0.0296%" y="645" width="0.0225%" height="15" fill="rgb(248,212,6)" fg:x="21" fg:w="16"/><text x="0.2796%" y="655.50"></text></g><g><title>[python3.8] (15 samples, 0.02%)</title><rect x="0.0310%" y="629" width="0.0211%" height="15" fill="rgb(208,68,35)" fg:x="22" fg:w="15"/><text x="0.2810%" y="639.50"></text></g><g><title>PyEval_EvalCode (15 samples, 0.02%)</title><rect x="0.0310%" y="613" width="0.0211%" height="15" fill="rgb(232,128,0)" fg:x="22" fg:w="15"/><text x="0.2810%" y="623.50"></text></g><g><title>_PyEval_EvalCodeWithName (15 samples, 0.02%)</title><rect x="0.0310%" y="597" width="0.0211%" height="15" fill="rgb(207,160,47)" fg:x="22" fg:w="15"/><text x="0.2810%" y="607.50"></text></g><g><title>_PyEval_EvalFrameDefault (15 samples, 0.02%)</title><rect x="0.0310%" y="581" width="0.0211%" height="15" fill="rgb(228,23,34)" fg:x="22" fg:w="15"/><text x="0.2810%" y="591.50"></text></g><g><title>_PyFunction_Vectorcall (13 samples, 0.02%)</title><rect x="0.0338%" y="565" width="0.0183%" height="15" fill="rgb(218,30,26)" fg:x="24" fg:w="13"/><text x="0.2838%" y="575.50"></text></g><g><title>_PyEval_EvalFrameDefault (13 samples, 0.02%)</title><rect x="0.0338%" y="549" width="0.0183%" height="15" fill="rgb(220,122,19)" fg:x="24" fg:w="13"/><text x="0.2838%" y="559.50"></text></g><g><title>_PyFunction_Vectorcall (13 samples, 0.02%)</title><rect x="0.0338%" y="533" width="0.0183%" height="15" fill="rgb(250,228,42)" fg:x="24" fg:w="13"/><text x="0.2838%" y="543.50"></text></g><g><title>_PyEval_EvalFrameDefault (13 samples, 0.02%)</title><rect x="0.0338%" y="517" width="0.0183%" height="15" fill="rgb(240,193,28)" fg:x="24" fg:w="13"/><text x="0.2838%" y="527.50"></text></g><g><title>Py_RunMain (17 samples, 0.02%)</title><rect x="0.0296%" y="693" width="0.0239%" height="15" fill="rgb(216,20,37)" fg:x="21" fg:w="17"/><text x="0.2796%" y="703.50"></text></g><g><title>lsb_release (34 samples, 0.05%)</title><rect x="0.0084%" y="757" width="0.0479%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="34"/><text x="0.2584%" y="767.50"></text></g><g><title>_start (19 samples, 0.03%)</title><rect x="0.0296%" y="741" width="0.0268%" height="15" fill="rgb(217,207,13)" fg:x="21" fg:w="19"/><text x="0.2796%" y="751.50"></text></g><g><title>__libc_start_main (19 samples, 0.03%)</title><rect x="0.0296%" y="725" width="0.0268%" height="15" fill="rgb(231,73,38)" fg:x="21" fg:w="19"/><text x="0.2796%" y="735.50"></text></g><g><title>Py_BytesMain (19 samples, 0.03%)</title><rect x="0.0296%" y="709" width="0.0268%" height="15" fill="rgb(225,20,46)" fg:x="21" fg:w="19"/><text x="0.2796%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (75 samples, 0.11%)</title><rect x="0.0803%" y="725" width="0.1056%" height="15" fill="rgb(210,31,41)" fg:x="57" fg:w="75"/><text x="0.3303%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (45 samples, 0.06%)</title><rect x="0.1225%" y="709" width="0.0634%" height="15" fill="rgb(221,200,47)" fg:x="87" fg:w="45"/><text x="0.3725%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (45 samples, 0.06%)</title><rect x="0.1225%" y="693" width="0.0634%" height="15" fill="rgb(226,26,5)" fg:x="87" fg:w="45"/><text x="0.3725%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (45 samples, 0.06%)</title><rect x="0.1225%" y="677" width="0.0634%" height="15" fill="rgb(249,33,26)" fg:x="87" fg:w="45"/><text x="0.3725%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (45 samples, 0.06%)</title><rect x="0.1225%" y="661" width="0.0634%" height="15" fill="rgb(235,183,28)" fg:x="87" fg:w="45"/><text x="0.3725%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (45 samples, 0.06%)</title><rect x="0.1225%" y="645" width="0.0634%" height="15" fill="rgb(221,5,38)" fg:x="87" fg:w="45"/><text x="0.3725%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (45 samples, 0.06%)</title><rect x="0.1225%" y="629" width="0.0634%" height="15" fill="rgb(247,18,42)" fg:x="87" fg:w="45"/><text x="0.3725%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (45 samples, 0.06%)</title><rect x="0.1225%" y="613" width="0.0634%" height="15" fill="rgb(241,131,45)" fg:x="87" fg:w="45"/><text x="0.3725%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (45 samples, 0.06%)</title><rect x="0.1225%" y="597" width="0.0634%" height="15" fill="rgb(249,31,29)" fg:x="87" fg:w="45"/><text x="0.3725%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (45 samples, 0.06%)</title><rect x="0.1225%" y="581" width="0.0634%" height="15" fill="rgb(225,111,53)" fg:x="87" fg:w="45"/><text x="0.3725%" y="591.50"></text></g><g><title>alloc::alloc::alloc (45 samples, 0.06%)</title><rect x="0.1225%" y="565" width="0.0634%" height="15" fill="rgb(238,160,17)" fg:x="87" fg:w="45"/><text x="0.3725%" y="575.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (29 samples, 0.04%)</title><rect x="0.1887%" y="725" width="0.0408%" height="15" fill="rgb(214,148,48)" fg:x="134" fg:w="29"/><text x="0.4387%" y="735.50"></text></g><g><title>&lt;bson::de::serde::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (13 samples, 0.02%)</title><rect x="0.2295%" y="725" width="0.0183%" height="15" fill="rgb(232,36,49)" fg:x="163" fg:w="13"/><text x="0.4795%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (38 samples, 0.05%)</title><rect x="0.2492%" y="725" width="0.0535%" height="15" fill="rgb(209,103,24)" fg:x="177" fg:w="38"/><text x="0.4992%" y="735.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (93 samples, 0.13%)</title><rect x="0.3097%" y="725" width="0.1309%" height="15" fill="rgb(229,88,8)" fg:x="220" fg:w="93"/><text x="0.5597%" y="735.50"></text></g><g><title>__GI___libc_malloc (54 samples, 0.08%)</title><rect x="0.4576%" y="725" width="0.0760%" height="15" fill="rgb(213,181,19)" fg:x="325" fg:w="54"/><text x="0.7076%" y="735.50"></text></g><g><title>_int_free (708 samples, 1.00%)</title><rect x="0.5547%" y="725" width="0.9968%" height="15" fill="rgb(254,191,54)" fg:x="394" fg:w="708"/><text x="0.8047%" y="735.50"></text></g><g><title>_int_malloc (83 samples, 0.12%)</title><rect x="1.5515%" y="725" width="0.1169%" height="15" fill="rgb(241,83,37)" fg:x="1102" fg:w="83"/><text x="1.8015%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (44 samples, 0.06%)</title><rect x="1.6684%" y="725" width="0.0619%" height="15" fill="rgb(233,36,39)" fg:x="1185" fg:w="44"/><text x="1.9184%" y="735.50"></text></g><g><title>bson::de::read_cstring (9 samples, 0.01%)</title><rect x="1.7416%" y="725" width="0.0127%" height="15" fill="rgb(226,3,54)" fg:x="1237" fg:w="9"/><text x="1.9916%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (22 samples, 0.03%)</title><rect x="1.7613%" y="725" width="0.0310%" height="15" fill="rgb(245,192,40)" fg:x="1251" fg:w="22"/><text x="2.0113%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (105 samples, 0.15%)</title><rect x="1.7923%" y="725" width="0.1478%" height="15" fill="rgb(238,167,29)" fg:x="1273" fg:w="105"/><text x="2.0423%" y="735.50"></text></g><g><title>core::str::converts::from_utf8 (58 samples, 0.08%)</title><rect x="1.9401%" y="725" width="0.0817%" height="15" fill="rgb(232,182,51)" fg:x="1378" fg:w="58"/><text x="2.1901%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (107 samples, 0.15%)</title><rect x="2.0218%" y="725" width="0.1506%" height="15" fill="rgb(231,60,39)" fg:x="1436" fg:w="107"/><text x="2.2718%" y="735.50"></text></g><g><title>hashbrown::map::make_hash (110 samples, 0.15%)</title><rect x="2.1823%" y="725" width="0.1549%" height="15" fill="rgb(208,69,12)" fg:x="1550" fg:w="110"/><text x="2.4323%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (87 samples, 0.12%)</title><rect x="2.3498%" y="725" width="0.1225%" height="15" fill="rgb(235,93,37)" fg:x="1669" fg:w="87"/><text x="2.5998%" y="735.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (11 samples, 0.02%)</title><rect x="2.4737%" y="725" width="0.0155%" height="15" fill="rgb(213,116,39)" fg:x="1757" fg:w="11"/><text x="2.7237%" y="735.50"></text></g><g><title>[[heap]] (1,904 samples, 2.68%)</title><rect x="0.0732%" y="741" width="2.6807%" height="15" fill="rgb(222,207,29)" fg:x="52" fg:w="1904"/><text x="0.3232%" y="751.50">[[..</text></g><g><title>unlink_chunk (184 samples, 0.26%)</title><rect x="2.4949%" y="725" width="0.2591%" height="15" fill="rgb(206,96,30)" fg:x="1772" fg:w="184"/><text x="2.7449%" y="735.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (90 samples, 0.13%)</title><rect x="2.7539%" y="725" width="0.1267%" height="15" fill="rgb(218,138,4)" fg:x="1956" fg:w="90"/><text x="3.0039%" y="735.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (140 samples, 0.20%)</title><rect x="2.8806%" y="725" width="0.1971%" height="15" fill="rgb(250,191,14)" fg:x="2046" fg:w="140"/><text x="3.1306%" y="735.50"></text></g><g><title>&lt;bson::de::serde::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (145 samples, 0.20%)</title><rect x="3.0777%" y="725" width="0.2042%" height="15" fill="rgb(239,60,40)" fg:x="2186" fg:w="145"/><text x="3.3277%" y="735.50"></text></g><g><title>&lt;bson::document::DocumentIntoIterator as core::iter::traits::iterator::Iterator&gt;::next (107 samples, 0.15%)</title><rect x="3.2819%" y="725" width="0.1506%" height="15" fill="rgb(206,27,48)" fg:x="2331" fg:w="107"/><text x="3.5319%" y="735.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (95 samples, 0.13%)</title><rect x="3.4325%" y="725" width="0.1338%" height="15" fill="rgb(225,35,8)" fg:x="2438" fg:w="95"/><text x="3.6825%" y="735.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="3.5790%" y="725" width="0.0113%" height="15" fill="rgb(250,213,24)" fg:x="2542" fg:w="8"/><text x="3.8290%" y="735.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (157 samples, 0.22%)</title><rect x="3.5945%" y="725" width="0.2210%" height="15" fill="rgb(247,123,22)" fg:x="2553" fg:w="157"/><text x="3.8445%" y="735.50"></text></g><g><title>__GI___libc_malloc (121 samples, 0.17%)</title><rect x="3.8211%" y="725" width="0.1704%" height="15" fill="rgb(231,138,38)" fg:x="2714" fg:w="121"/><text x="4.0711%" y="735.50"></text></g><g><title>__GI___libc_realloc (60 samples, 0.08%)</title><rect x="3.9915%" y="725" width="0.0845%" height="15" fill="rgb(231,145,46)" fg:x="2835" fg:w="60"/><text x="4.2415%" y="735.50"></text></g><g><title>__rdl_realloc (36 samples, 0.05%)</title><rect x="4.0788%" y="725" width="0.0507%" height="15" fill="rgb(251,118,11)" fg:x="2897" fg:w="36"/><text x="4.3288%" y="735.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (36 samples, 0.05%)</title><rect x="4.0788%" y="709" width="0.0507%" height="15" fill="rgb(217,147,25)" fg:x="2897" fg:w="36"/><text x="4.3288%" y="719.50"></text></g><g><title>_int_free (134 samples, 0.19%)</title><rect x="4.1295%" y="725" width="0.1887%" height="15" fill="rgb(247,81,37)" fg:x="2933" fg:w="134"/><text x="4.3795%" y="735.50"></text></g><g><title>_int_malloc (110 samples, 0.15%)</title><rect x="4.3181%" y="725" width="0.1549%" height="15" fill="rgb(209,12,38)" fg:x="3067" fg:w="110"/><text x="4.5681%" y="735.50"></text></g><g><title>_int_realloc (23 samples, 0.03%)</title><rect x="4.4730%" y="725" width="0.0324%" height="15" fill="rgb(227,1,9)" fg:x="3177" fg:w="23"/><text x="4.7230%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (96 samples, 0.14%)</title><rect x="4.5054%" y="725" width="0.1352%" height="15" fill="rgb(248,47,43)" fg:x="3200" fg:w="96"/><text x="4.7554%" y="735.50"></text></g><g><title>bson::bson::Bson::from_extended_document (8 samples, 0.01%)</title><rect x="4.6406%" y="725" width="0.0113%" height="15" fill="rgb(221,10,30)" fg:x="3296" fg:w="8"/><text x="4.8906%" y="735.50"></text></g><g><title>bson::de::deserialize_bson_kvp (61 samples, 0.09%)</title><rect x="4.6518%" y="725" width="0.0859%" height="15" fill="rgb(210,229,1)" fg:x="3304" fg:w="61"/><text x="4.9018%" y="735.50"></text></g><g><title>bson::de::ensure_read_exactly (58 samples, 0.08%)</title><rect x="4.7377%" y="725" width="0.0817%" height="15" fill="rgb(222,148,37)" fg:x="3365" fg:w="58"/><text x="4.9877%" y="735.50"></text></g><g><title>bson::de::read_cstring (124 samples, 0.17%)</title><rect x="4.8194%" y="725" width="0.1746%" height="15" fill="rgb(234,67,33)" fg:x="3423" fg:w="124"/><text x="5.0694%" y="735.50"></text></g><g><title>bson::de::read_string (21 samples, 0.03%)</title><rect x="4.9939%" y="725" width="0.0296%" height="15" fill="rgb(247,98,35)" fg:x="3547" fg:w="21"/><text x="5.2439%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (91 samples, 0.13%)</title><rect x="5.0348%" y="725" width="0.1281%" height="15" fill="rgb(247,138,52)" fg:x="3576" fg:w="91"/><text x="5.2848%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (129 samples, 0.18%)</title><rect x="5.1629%" y="725" width="0.1816%" height="15" fill="rgb(213,79,30)" fg:x="3667" fg:w="129"/><text x="5.4129%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (283 samples, 0.40%)</title><rect x="5.3544%" y="725" width="0.3984%" height="15" fill="rgb(246,177,23)" fg:x="3803" fg:w="283"/><text x="5.6044%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (112 samples, 0.16%)</title><rect x="5.7528%" y="725" width="0.1577%" height="15" fill="rgb(230,62,27)" fg:x="4086" fg:w="112"/><text x="6.0028%" y="735.50"></text></g><g><title>hashbrown::map::make_hash (94 samples, 0.13%)</title><rect x="5.9105%" y="725" width="0.1323%" height="15" fill="rgb(216,154,8)" fg:x="4198" fg:w="94"/><text x="6.1605%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (157 samples, 0.22%)</title><rect x="6.0527%" y="725" width="0.2210%" height="15" fill="rgb(244,35,45)" fg:x="4299" fg:w="157"/><text x="6.3027%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (51 samples, 0.07%)</title><rect x="6.2738%" y="725" width="0.0718%" height="15" fill="rgb(251,115,12)" fg:x="4456" fg:w="51"/><text x="6.5238%" y="735.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (40 samples, 0.06%)</title><rect x="6.3456%" y="725" width="0.0563%" height="15" fill="rgb(240,54,50)" fg:x="4507" fg:w="40"/><text x="6.5956%" y="735.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (58 samples, 0.08%)</title><rect x="6.4047%" y="725" width="0.0817%" height="15" fill="rgb(233,84,52)" fg:x="4549" fg:w="58"/><text x="6.6547%" y="735.50"></text></g><g><title>[[stack]] (2,699 samples, 3.80%)</title><rect x="2.7539%" y="741" width="3.8000%" height="15" fill="rgb(207,117,47)" fg:x="1956" fg:w="2699"/><text x="3.0039%" y="751.50">[[st..</text></g><g><title>std::io::Read::read_to_string (48 samples, 0.07%)</title><rect x="6.4864%" y="725" width="0.0676%" height="15" fill="rgb(249,43,39)" fg:x="4607" fg:w="48"/><text x="6.7364%" y="735.50"></text></g><g><title>[libc-2.31.so] (34 samples, 0.05%)</title><rect x="6.5568%" y="741" width="0.0479%" height="15" fill="rgb(209,38,44)" fg:x="4657" fg:w="34"/><text x="6.8068%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (21 samples, 0.03%)</title><rect x="6.5751%" y="725" width="0.0296%" height="15" fill="rgb(236,212,23)" fg:x="4670" fg:w="21"/><text x="6.8251%" y="735.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="6.6046%" y="725" width="0.0211%" height="15" fill="rgb(242,79,21)" fg:x="4691" fg:w="15"/><text x="6.8546%" y="735.50"></text></g><g><title>[my-bench] (21 samples, 0.03%)</title><rect x="6.6046%" y="741" width="0.0296%" height="15" fill="rgb(211,96,35)" fg:x="4691" fg:w="21"/><text x="6.8546%" y="751.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (11 samples, 0.02%)</title><rect x="6.7060%" y="725" width="0.0155%" height="15" fill="rgb(253,215,40)" fg:x="4763" fg:w="11"/><text x="6.9560%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (42 samples, 0.06%)</title><rect x="6.7215%" y="725" width="0.0591%" height="15" fill="rgb(211,81,21)" fg:x="4774" fg:w="42"/><text x="6.9715%" y="735.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (47 samples, 0.07%)</title><rect x="6.7806%" y="725" width="0.0662%" height="15" fill="rgb(208,190,38)" fg:x="4816" fg:w="47"/><text x="7.0306%" y="735.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (19 samples, 0.03%)</title><rect x="6.8200%" y="709" width="0.0268%" height="15" fill="rgb(235,213,38)" fg:x="4844" fg:w="19"/><text x="7.0700%" y="719.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (19 samples, 0.03%)</title><rect x="6.8200%" y="693" width="0.0268%" height="15" fill="rgb(237,122,38)" fg:x="4844" fg:w="19"/><text x="7.0700%" y="703.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (19 samples, 0.03%)</title><rect x="6.8200%" y="677" width="0.0268%" height="15" fill="rgb(244,218,35)" fg:x="4844" fg:w="19"/><text x="7.0700%" y="687.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (19 samples, 0.03%)</title><rect x="6.8200%" y="661" width="0.0268%" height="15" fill="rgb(240,68,47)" fg:x="4844" fg:w="19"/><text x="7.0700%" y="671.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (19 samples, 0.03%)</title><rect x="6.8200%" y="645" width="0.0268%" height="15" fill="rgb(210,16,53)" fg:x="4844" fg:w="19"/><text x="7.0700%" y="655.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (19 samples, 0.03%)</title><rect x="6.8200%" y="629" width="0.0268%" height="15" fill="rgb(235,124,12)" fg:x="4844" fg:w="19"/><text x="7.0700%" y="639.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (19 samples, 0.03%)</title><rect x="6.8200%" y="613" width="0.0268%" height="15" fill="rgb(224,169,11)" fg:x="4844" fg:w="19"/><text x="7.0700%" y="623.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (13 samples, 0.02%)</title><rect x="6.8468%" y="725" width="0.0183%" height="15" fill="rgb(250,166,2)" fg:x="4863" fg:w="13"/><text x="7.0968%" y="735.50"></text></g><g><title>&lt;bson::de::serde::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (54 samples, 0.08%)</title><rect x="6.8651%" y="725" width="0.0760%" height="15" fill="rgb(242,216,29)" fg:x="4876" fg:w="54"/><text x="7.1151%" y="735.50"></text></g><g><title>&lt;bson::document::DocumentIntoIterator as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.04%)</title><rect x="6.9411%" y="725" width="0.0366%" height="15" fill="rgb(230,116,27)" fg:x="4930" fg:w="26"/><text x="7.1911%" y="735.50"></text></g><g><title>__memset_avx2_erms (162 samples, 0.23%)</title><rect x="6.9876%" y="629" width="0.2281%" height="15" fill="rgb(228,99,48)" fg:x="4963" fg:w="162"/><text x="7.2376%" y="639.50"></text></g><g><title>__memmove_avx_unaligned_erms (60 samples, 0.08%)</title><rect x="7.2157%" y="565" width="0.0845%" height="15" fill="rgb(253,11,6)" fg:x="5125" fg:w="60"/><text x="7.4657%" y="575.50"></text></g><g><title>_int_realloc (62 samples, 0.09%)</title><rect x="7.2157%" y="581" width="0.0873%" height="15" fill="rgb(247,143,39)" fg:x="5125" fg:w="62"/><text x="7.4657%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (63 samples, 0.09%)</title><rect x="7.2157%" y="629" width="0.0887%" height="15" fill="rgb(236,97,10)" fg:x="5125" fg:w="63"/><text x="7.4657%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (63 samples, 0.09%)</title><rect x="7.2157%" y="613" width="0.0887%" height="15" fill="rgb(233,208,19)" fg:x="5125" fg:w="63"/><text x="7.4657%" y="623.50"></text></g><g><title>__GI___libc_realloc (63 samples, 0.09%)</title><rect x="7.2157%" y="597" width="0.0887%" height="15" fill="rgb(216,164,2)" fg:x="5125" fg:w="63"/><text x="7.4657%" y="607.50"></text></g><g><title>[unknown] (163 samples, 0.23%)</title><rect x="7.3100%" y="469" width="0.2295%" height="15" fill="rgb(220,129,5)" fg:x="5192" fg:w="163"/><text x="7.5600%" y="479.50"></text></g><g><title>[unknown] (162 samples, 0.23%)</title><rect x="7.3114%" y="453" width="0.2281%" height="15" fill="rgb(242,17,10)" fg:x="5193" fg:w="162"/><text x="7.5614%" y="463.50"></text></g><g><title>[unknown] (159 samples, 0.22%)</title><rect x="7.3156%" y="437" width="0.2239%" height="15" fill="rgb(242,107,0)" fg:x="5196" fg:w="159"/><text x="7.5656%" y="447.50"></text></g><g><title>[unknown] (159 samples, 0.22%)</title><rect x="7.3156%" y="421" width="0.2239%" height="15" fill="rgb(251,28,31)" fg:x="5196" fg:w="159"/><text x="7.5656%" y="431.50"></text></g><g><title>[unknown] (158 samples, 0.22%)</title><rect x="7.3170%" y="405" width="0.2225%" height="15" fill="rgb(233,223,10)" fg:x="5197" fg:w="158"/><text x="7.5670%" y="415.50"></text></g><g><title>[unknown] (158 samples, 0.22%)</title><rect x="7.3170%" y="389" width="0.2225%" height="15" fill="rgb(215,21,27)" fg:x="5197" fg:w="158"/><text x="7.5670%" y="399.50"></text></g><g><title>[unknown] (158 samples, 0.22%)</title><rect x="7.3170%" y="373" width="0.2225%" height="15" fill="rgb(232,23,21)" fg:x="5197" fg:w="158"/><text x="7.5670%" y="383.50"></text></g><g><title>[unknown] (157 samples, 0.22%)</title><rect x="7.3184%" y="357" width="0.2210%" height="15" fill="rgb(244,5,23)" fg:x="5198" fg:w="157"/><text x="7.5684%" y="367.50"></text></g><g><title>[unknown] (157 samples, 0.22%)</title><rect x="7.3184%" y="341" width="0.2210%" height="15" fill="rgb(226,81,46)" fg:x="5198" fg:w="157"/><text x="7.5684%" y="351.50"></text></g><g><title>[unknown] (153 samples, 0.22%)</title><rect x="7.3241%" y="325" width="0.2154%" height="15" fill="rgb(247,70,30)" fg:x="5202" fg:w="153"/><text x="7.5741%" y="335.50"></text></g><g><title>[unknown] (148 samples, 0.21%)</title><rect x="7.3311%" y="309" width="0.2084%" height="15" fill="rgb(212,68,19)" fg:x="5207" fg:w="148"/><text x="7.5811%" y="319.50"></text></g><g><title>[unknown] (142 samples, 0.20%)</title><rect x="7.3396%" y="293" width="0.1999%" height="15" fill="rgb(240,187,13)" fg:x="5213" fg:w="142"/><text x="7.5896%" y="303.50"></text></g><g><title>[unknown] (25 samples, 0.04%)</title><rect x="7.5043%" y="277" width="0.0352%" height="15" fill="rgb(223,113,26)" fg:x="5330" fg:w="25"/><text x="7.7543%" y="287.50"></text></g><g><title>[unknown] (22 samples, 0.03%)</title><rect x="7.5085%" y="261" width="0.0310%" height="15" fill="rgb(206,192,2)" fg:x="5333" fg:w="22"/><text x="7.7585%" y="271.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="7.5099%" y="245" width="0.0296%" height="15" fill="rgb(241,108,4)" fg:x="5334" fg:w="21"/><text x="7.7599%" y="255.50"></text></g><g><title>[unknown] (21 samples, 0.03%)</title><rect x="7.5099%" y="229" width="0.0296%" height="15" fill="rgb(247,173,49)" fg:x="5334" fg:w="21"/><text x="7.7599%" y="239.50"></text></g><g><title>[unknown] (20 samples, 0.03%)</title><rect x="7.5113%" y="213" width="0.0282%" height="15" fill="rgb(224,114,35)" fg:x="5335" fg:w="20"/><text x="7.7613%" y="223.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="7.5141%" y="197" width="0.0253%" height="15" fill="rgb(245,159,27)" fg:x="5337" fg:w="18"/><text x="7.7641%" y="207.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="7.5141%" y="181" width="0.0253%" height="15" fill="rgb(245,172,44)" fg:x="5337" fg:w="18"/><text x="7.7641%" y="191.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="7.5184%" y="165" width="0.0211%" height="15" fill="rgb(236,23,11)" fg:x="5340" fg:w="15"/><text x="7.7684%" y="175.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="7.5198%" y="149" width="0.0197%" height="15" fill="rgb(205,117,38)" fg:x="5341" fg:w="14"/><text x="7.7698%" y="159.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="7.5198%" y="133" width="0.0197%" height="15" fill="rgb(237,72,25)" fg:x="5341" fg:w="14"/><text x="7.7698%" y="143.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="7.5198%" y="117" width="0.0197%" height="15" fill="rgb(244,70,9)" fg:x="5341" fg:w="14"/><text x="7.7698%" y="127.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="7.5240%" y="101" width="0.0155%" height="15" fill="rgb(217,125,39)" fg:x="5344" fg:w="11"/><text x="7.7740%" y="111.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="7.5240%" y="85" width="0.0155%" height="15" fill="rgb(235,36,10)" fg:x="5344" fg:w="11"/><text x="7.7740%" y="95.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="7.5240%" y="69" width="0.0155%" height="15" fill="rgb(251,123,47)" fg:x="5344" fg:w="11"/><text x="7.7740%" y="79.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="7.5254%" y="53" width="0.0141%" height="15" fill="rgb(221,13,13)" fg:x="5345" fg:w="10"/><text x="7.7754%" y="63.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="7.5282%" y="37" width="0.0113%" height="15" fill="rgb(238,131,9)" fg:x="5347" fg:w="8"/><text x="7.7782%" y="47.50"></text></g><g><title>&lt;futures_util::io::read_to_end::ReadToEnd&lt;A&gt; as core::future::future::Future&gt;::poll (393 samples, 0.55%)</title><rect x="6.9876%" y="645" width="0.5533%" height="15" fill="rgb(211,50,8)" fg:x="4963" fg:w="393"/><text x="7.2376%" y="655.50"></text></g><g><title>tokio_util::util::poll_read_buf (168 samples, 0.24%)</title><rect x="7.3044%" y="629" width="0.2365%" height="15" fill="rgb(245,182,24)" fg:x="5188" fg:w="168"/><text x="7.5544%" y="639.50"></text></g><g><title>&lt;tokio::net::tcp::stream::TcpStream as tokio::io::async_read::AsyncRead&gt;::poll_read (168 samples, 0.24%)</title><rect x="7.3044%" y="613" width="0.2365%" height="15" fill="rgb(242,14,37)" fg:x="5188" fg:w="168"/><text x="7.5544%" y="623.50"></text></g><g><title>tokio::io::driver::registration::Registration::poll_read_io (168 samples, 0.24%)</title><rect x="7.3044%" y="597" width="0.2365%" height="15" fill="rgb(246,228,12)" fg:x="5188" fg:w="168"/><text x="7.5544%" y="607.50"></text></g><g><title>&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (165 samples, 0.23%)</title><rect x="7.3086%" y="581" width="0.2323%" height="15" fill="rgb(213,55,15)" fg:x="5191" fg:w="165"/><text x="7.5586%" y="591.50"></text></g><g><title>&lt;&amp;std::net::tcp::TcpStream as std::io::Read&gt;::read (165 samples, 0.23%)</title><rect x="7.3086%" y="565" width="0.2323%" height="15" fill="rgb(209,9,3)" fg:x="5191" fg:w="165"/><text x="7.5586%" y="575.50"></text></g><g><title>std::sys_common::net::TcpStream::read (165 samples, 0.23%)</title><rect x="7.3086%" y="549" width="0.2323%" height="15" fill="rgb(230,59,30)" fg:x="5191" fg:w="165"/><text x="7.5586%" y="559.50"></text></g><g><title>std::sys::unix::net::Socket::read (165 samples, 0.23%)</title><rect x="7.3086%" y="533" width="0.2323%" height="15" fill="rgb(209,121,21)" fg:x="5191" fg:w="165"/><text x="7.5586%" y="543.50"></text></g><g><title>std::sys::unix::net::Socket::recv_with_flags (165 samples, 0.23%)</title><rect x="7.3086%" y="517" width="0.2323%" height="15" fill="rgb(220,109,13)" fg:x="5191" fg:w="165"/><text x="7.5586%" y="527.50"></text></g><g><title>__libc_recv (165 samples, 0.23%)</title><rect x="7.3086%" y="501" width="0.2323%" height="15" fill="rgb(232,18,1)" fg:x="5191" fg:w="165"/><text x="7.5586%" y="511.50"></text></g><g><title>__libc_recv (165 samples, 0.23%)</title><rect x="7.3086%" y="485" width="0.2323%" height="15" fill="rgb(215,41,42)" fg:x="5191" fg:w="165"/><text x="7.5586%" y="495.50"></text></g><g><title>__libc_calloc (50 samples, 0.07%)</title><rect x="7.5437%" y="613" width="0.0704%" height="15" fill="rgb(224,123,36)" fg:x="5358" fg:w="50"/><text x="7.7937%" y="623.50"></text></g><g><title>__memset_avx2_erms (50 samples, 0.07%)</title><rect x="7.5437%" y="597" width="0.0704%" height="15" fill="rgb(240,125,3)" fg:x="5358" fg:w="50"/><text x="7.7937%" y="607.50"></text></g><g><title>__memmove_avx_unaligned_erms (137 samples, 0.19%)</title><rect x="7.6141%" y="613" width="0.1929%" height="15" fill="rgb(205,98,50)" fg:x="5408" fg:w="137"/><text x="7.8641%" y="623.50"></text></g><g><title>__libc_calloc (47 samples, 0.07%)</title><rect x="7.8084%" y="565" width="0.0662%" height="15" fill="rgb(205,185,37)" fg:x="5546" fg:w="47"/><text x="8.0584%" y="575.50"></text></g><g><title>__memset_avx2_erms (47 samples, 0.07%)</title><rect x="7.8084%" y="549" width="0.0662%" height="15" fill="rgb(238,207,15)" fg:x="5546" fg:w="47"/><text x="8.0584%" y="559.50"></text></g><g><title>__memmove_avx_unaligned_erms (140 samples, 0.20%)</title><rect x="7.8746%" y="565" width="0.1971%" height="15" fill="rgb(213,199,42)" fg:x="5593" fg:w="140"/><text x="8.1246%" y="575.50"></text></g><g><title>__libc_calloc (51 samples, 0.07%)</title><rect x="8.1055%" y="549" width="0.0718%" height="15" fill="rgb(235,201,11)" fg:x="5757" fg:w="51"/><text x="8.3555%" y="559.50"></text></g><g><title>__memset_avx2_erms (51 samples, 0.07%)</title><rect x="8.1055%" y="533" width="0.0718%" height="15" fill="rgb(207,46,11)" fg:x="5757" fg:w="51"/><text x="8.3555%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (131 samples, 0.18%)</title><rect x="8.1773%" y="549" width="0.1844%" height="15" fill="rgb(241,35,35)" fg:x="5808" fg:w="131"/><text x="8.4273%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.02%)</title><rect x="8.3674%" y="549" width="0.0155%" height="15" fill="rgb(243,32,47)" fg:x="5943" fg:w="11"/><text x="8.6174%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="8.3674%" y="533" width="0.0155%" height="15" fill="rgb(247,202,23)" fg:x="5943" fg:w="11"/><text x="8.6174%" y="543.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.02%)</title><rect x="8.3674%" y="517" width="0.0155%" height="15" fill="rgb(219,102,11)" fg:x="5943" fg:w="11"/><text x="8.6174%" y="527.50"></text></g><g><title>_int_realloc (11 samples, 0.02%)</title><rect x="8.3674%" y="501" width="0.0155%" height="15" fill="rgb(243,110,44)" fg:x="5943" fg:w="11"/><text x="8.6174%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.02%)</title><rect x="8.3674%" y="485" width="0.0155%" height="15" fill="rgb(222,74,54)" fg:x="5943" fg:w="11"/><text x="8.6174%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (1,005 samples, 1.41%)</title><rect x="6.9834%" y="661" width="1.4150%" height="15" fill="rgb(216,99,12)" fg:x="4960" fg:w="1005"/><text x="7.2334%" y="671.50"></text></g><g><title>bson::document::Document::from_reader (608 samples, 0.86%)</title><rect x="7.5423%" y="645" width="0.8560%" height="15" fill="rgb(226,22,26)" fg:x="5357" fg:w="608"/><text x="7.7923%" y="655.50"></text></g><g><title>bson::de::ensure_read_exactly (608 samples, 0.86%)</title><rect x="7.5423%" y="629" width="0.8560%" height="15" fill="rgb(217,163,10)" fg:x="5357" fg:w="608"/><text x="7.7923%" y="639.50"></text></g><g><title>bson::de::deserialize_bson_kvp (420 samples, 0.59%)</title><rect x="7.8070%" y="613" width="0.5913%" height="15" fill="rgb(213,25,53)" fg:x="5545" fg:w="420"/><text x="8.0570%" y="623.50"></text></g><g><title>bson::document::Document::from_reader (419 samples, 0.59%)</title><rect x="7.8084%" y="597" width="0.5899%" height="15" fill="rgb(252,105,26)" fg:x="5546" fg:w="419"/><text x="8.0584%" y="607.50"></text></g><g><title>bson::de::ensure_read_exactly (419 samples, 0.59%)</title><rect x="7.8084%" y="581" width="0.5899%" height="15" fill="rgb(220,39,43)" fg:x="5546" fg:w="419"/><text x="8.0584%" y="591.50"></text></g><g><title>bson::de::deserialize_bson_kvp (232 samples, 0.33%)</title><rect x="8.0717%" y="565" width="0.3266%" height="15" fill="rgb(229,68,48)" fg:x="5733" fg:w="232"/><text x="8.3217%" y="575.50"></text></g><g><title>bson::de::deserialize_bson_kvp (11 samples, 0.02%)</title><rect x="8.3828%" y="549" width="0.0155%" height="15" fill="rgb(252,8,32)" fg:x="5954" fg:w="11"/><text x="8.6328%" y="559.50"></text></g><g><title>bson::de::read_cstring (26 samples, 0.04%)</title><rect x="8.3983%" y="549" width="0.0366%" height="15" fill="rgb(223,20,43)" fg:x="5965" fg:w="26"/><text x="8.6483%" y="559.50"></text></g><g><title>__memset_avx2_unaligned_erms (19 samples, 0.03%)</title><rect x="9.0868%" y="501" width="0.0268%" height="15" fill="rgb(229,81,49)" fg:x="6454" fg:w="19"/><text x="9.3368%" y="511.50"></text></g><g><title>__libc_calloc (46 samples, 0.06%)</title><rect x="9.0741%" y="517" width="0.0648%" height="15" fill="rgb(236,28,36)" fg:x="6445" fg:w="46"/><text x="9.3241%" y="527.50"></text></g><g><title>_int_malloc (18 samples, 0.03%)</title><rect x="9.1136%" y="501" width="0.0253%" height="15" fill="rgb(249,185,26)" fg:x="6473" fg:w="18"/><text x="9.3636%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (126 samples, 0.18%)</title><rect x="9.1389%" y="517" width="0.1774%" height="15" fill="rgb(249,174,33)" fg:x="6491" fg:w="126"/><text x="9.3889%" y="527.50"></text></g><g><title>checked_request2size (11 samples, 0.02%)</title><rect x="10.3906%" y="469" width="0.0155%" height="15" fill="rgb(233,201,37)" fg:x="7380" fg:w="11"/><text x="10.6406%" y="479.50"></text></g><g><title>_int_malloc (363 samples, 0.51%)</title><rect x="9.9105%" y="485" width="0.5111%" height="15" fill="rgb(221,78,26)" fg:x="7039" fg:w="363"/><text x="10.1605%" y="495.50"></text></g><g><title>unlink_chunk (10 samples, 0.01%)</title><rect x="10.4075%" y="469" width="0.0141%" height="15" fill="rgb(250,127,30)" fg:x="7392" fg:w="10"/><text x="10.6575%" y="479.50"></text></g><g><title>__GI___libc_malloc (488 samples, 0.69%)</title><rect x="9.7683%" y="501" width="0.6871%" height="15" fill="rgb(230,49,44)" fg:x="6938" fg:w="488"/><text x="10.0183%" y="511.50"></text></g><g><title>checked_request2size (24 samples, 0.03%)</title><rect x="10.4215%" y="485" width="0.0338%" height="15" fill="rgb(229,67,23)" fg:x="7402" fg:w="24"/><text x="10.6715%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (59 samples, 0.08%)</title><rect x="10.4567%" y="501" width="0.0831%" height="15" fill="rgb(249,83,47)" fg:x="7427" fg:w="59"/><text x="10.7067%" y="511.50"></text></g><g><title>__rdl_alloc (11 samples, 0.02%)</title><rect x="10.5398%" y="501" width="0.0155%" height="15" fill="rgb(215,43,3)" fg:x="7486" fg:w="11"/><text x="10.7898%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (11 samples, 0.02%)</title><rect x="10.5398%" y="485" width="0.0155%" height="15" fill="rgb(238,154,13)" fg:x="7486" fg:w="11"/><text x="10.7898%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (144 samples, 0.20%)</title><rect x="10.8453%" y="485" width="0.2027%" height="15" fill="rgb(219,56,2)" fg:x="7703" fg:w="144"/><text x="11.0953%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (428 samples, 0.60%)</title><rect x="10.5651%" y="501" width="0.6026%" height="15" fill="rgb(233,0,4)" fg:x="7504" fg:w="428"/><text x="10.8151%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (83 samples, 0.12%)</title><rect x="11.0509%" y="485" width="0.1169%" height="15" fill="rgb(235,30,7)" fg:x="7849" fg:w="83"/><text x="11.3009%" y="495.50"></text></g><g><title>bson::de::ensure_read_exactly (2,274 samples, 3.20%)</title><rect x="8.4476%" y="533" width="3.2016%" height="15" fill="rgb(250,79,13)" fg:x="6000" fg:w="2274"/><text x="8.6976%" y="543.50">bso..</text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (1,650 samples, 2.32%)</title><rect x="9.3262%" y="517" width="2.3231%" height="15" fill="rgb(211,146,34)" fg:x="6624" fg:w="1650"/><text x="9.5762%" y="527.50">l..</text></g><g><title>hashbrown::map::make_hash (342 samples, 0.48%)</title><rect x="11.1677%" y="501" width="0.4815%" height="15" fill="rgb(228,22,38)" fg:x="7932" fg:w="342"/><text x="11.4177%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (148 samples, 0.21%)</title><rect x="11.4409%" y="485" width="0.2084%" height="15" fill="rgb(235,168,5)" fg:x="8126" fg:w="148"/><text x="11.6909%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (3,317 samples, 4.67%)</title><rect x="6.9834%" y="677" width="4.6701%" height="15" fill="rgb(221,155,16)" fg:x="4960" fg:w="3317"/><text x="7.2334%" y="687.50">&lt;core..</text></g><g><title>bson::document::Document::from_reader (2,312 samples, 3.26%)</title><rect x="8.3983%" y="661" width="3.2551%" height="15" fill="rgb(215,215,53)" fg:x="5965" fg:w="2312"/><text x="8.6483%" y="671.50">bso..</text></g><g><title>bson::de::ensure_read_exactly (2,312 samples, 3.26%)</title><rect x="8.3983%" y="645" width="3.2551%" height="15" fill="rgb(223,4,10)" fg:x="5965" fg:w="2312"/><text x="8.6483%" y="655.50">bso..</text></g><g><title>bson::de::deserialize_bson_kvp (2,312 samples, 3.26%)</title><rect x="8.3983%" y="629" width="3.2551%" height="15" fill="rgb(234,103,6)" fg:x="5965" fg:w="2312"/><text x="8.6483%" y="639.50">bso..</text></g><g><title>bson::document::Document::from_reader (2,312 samples, 3.26%)</title><rect x="8.3983%" y="613" width="3.2551%" height="15" fill="rgb(227,97,0)" fg:x="5965" fg:w="2312"/><text x="8.6483%" y="623.50">bso..</text></g><g><title>bson::de::ensure_read_exactly (2,312 samples, 3.26%)</title><rect x="8.3983%" y="597" width="3.2551%" height="15" fill="rgb(234,150,53)" fg:x="5965" fg:w="2312"/><text x="8.6483%" y="607.50">bso..</text></g><g><title>bson::de::deserialize_bson_kvp (2,312 samples, 3.26%)</title><rect x="8.3983%" y="581" width="3.2551%" height="15" fill="rgb(228,201,54)" fg:x="5965" fg:w="2312"/><text x="8.6483%" y="591.50">bso..</text></g><g><title>bson::de::deserialize_bson_kvp (2,312 samples, 3.26%)</title><rect x="8.3983%" y="565" width="3.2551%" height="15" fill="rgb(222,22,37)" fg:x="5965" fg:w="2312"/><text x="8.6483%" y="575.50">bso..</text></g><g><title>bson::document::Document::from_reader (2,286 samples, 3.22%)</title><rect x="8.4349%" y="549" width="3.2185%" height="15" fill="rgb(237,53,32)" fg:x="5991" fg:w="2286"/><text x="8.6849%" y="559.50">bso..</text></g><g><title>_int_malloc (245 samples, 0.34%)</title><rect x="12.8770%" y="453" width="0.3449%" height="15" fill="rgb(233,25,53)" fg:x="9146" fg:w="245"/><text x="13.1270%" y="463.50"></text></g><g><title>__GI___libc_malloc (322 samples, 0.45%)</title><rect x="12.7798%" y="469" width="0.4534%" height="15" fill="rgb(210,40,34)" fg:x="9077" fg:w="322"/><text x="13.0298%" y="479.50"></text></g><g><title>_int_free (18 samples, 0.03%)</title><rect x="13.3965%" y="437" width="0.0253%" height="15" fill="rgb(241,220,44)" fg:x="9515" fg:w="18"/><text x="13.6465%" y="447.50"></text></g><g><title>_int_malloc (10 samples, 0.01%)</title><rect x="13.4218%" y="437" width="0.0141%" height="15" fill="rgb(235,28,35)" fg:x="9533" fg:w="10"/><text x="13.6718%" y="447.50"></text></g><g><title>_int_realloc (73 samples, 0.10%)</title><rect x="13.3374%" y="453" width="0.1028%" height="15" fill="rgb(210,56,17)" fg:x="9473" fg:w="73"/><text x="13.5874%" y="463.50"></text></g><g><title>__GI___libc_realloc (158 samples, 0.22%)</title><rect x="13.2332%" y="469" width="0.2225%" height="15" fill="rgb(224,130,29)" fg:x="9399" fg:w="158"/><text x="13.4832%" y="479.50"></text></g><g><title>checked_request2size (11 samples, 0.02%)</title><rect x="13.4401%" y="453" width="0.0155%" height="15" fill="rgb(235,212,8)" fg:x="9546" fg:w="11"/><text x="13.6901%" y="463.50"></text></g><g><title>__rdl_alloc (9 samples, 0.01%)</title><rect x="13.4556%" y="469" width="0.0127%" height="15" fill="rgb(223,33,50)" fg:x="9557" fg:w="9"/><text x="13.7056%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.01%)</title><rect x="13.4556%" y="453" width="0.0127%" height="15" fill="rgb(219,149,13)" fg:x="9557" fg:w="9"/><text x="13.7056%" y="463.50"></text></g><g><title>__rdl_realloc (17 samples, 0.02%)</title><rect x="13.4683%" y="469" width="0.0239%" height="15" fill="rgb(250,156,29)" fg:x="9566" fg:w="17"/><text x="13.7183%" y="479.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (13 samples, 0.02%)</title><rect x="13.4739%" y="453" width="0.0183%" height="15" fill="rgb(216,193,19)" fg:x="9570" fg:w="13"/><text x="13.7239%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (637 samples, 0.90%)</title><rect x="12.6123%" y="501" width="0.8969%" height="15" fill="rgb(216,135,14)" fg:x="8958" fg:w="637"/><text x="12.8623%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (568 samples, 0.80%)</title><rect x="12.7094%" y="485" width="0.7997%" height="15" fill="rgb(241,47,5)" fg:x="9027" fg:w="568"/><text x="12.9594%" y="495.50"></text></g><g><title>__rust_realloc (8 samples, 0.01%)</title><rect x="13.4979%" y="469" width="0.0113%" height="15" fill="rgb(233,42,35)" fg:x="9587" fg:w="8"/><text x="13.7479%" y="479.50"></text></g><g><title>bson::de::read_cstring (1,323 samples, 1.86%)</title><rect x="11.8745%" y="517" width="1.8627%" height="15" fill="rgb(231,13,6)" fg:x="8434" fg:w="1323"/><text x="12.1245%" y="527.50">b..</text></g><g><title>core::str::converts::from_utf8 (162 samples, 0.23%)</title><rect x="13.5091%" y="501" width="0.2281%" height="15" fill="rgb(207,181,40)" fg:x="9595" fg:w="162"/><text x="13.7591%" y="511.50"></text></g><g><title>core::str::validations::run_utf8_validation (153 samples, 0.22%)</title><rect x="13.5218%" y="485" width="0.2154%" height="15" fill="rgb(254,173,49)" fg:x="9604" fg:w="153"/><text x="13.7718%" y="495.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (11 samples, 0.02%)</title><rect x="13.7217%" y="469" width="0.0155%" height="15" fill="rgb(221,1,38)" fg:x="9746" fg:w="11"/><text x="13.9717%" y="479.50"></text></g><g><title>_int_malloc (60 samples, 0.08%)</title><rect x="13.7935%" y="485" width="0.0845%" height="15" fill="rgb(206,124,46)" fg:x="9797" fg:w="60"/><text x="14.0435%" y="495.50"></text></g><g><title>__GI___libc_malloc (86 samples, 0.12%)</title><rect x="13.7626%" y="501" width="0.1211%" height="15" fill="rgb(249,21,11)" fg:x="9775" fg:w="86"/><text x="14.0126%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (15 samples, 0.02%)</title><rect x="13.9639%" y="485" width="0.0211%" height="15" fill="rgb(222,201,40)" fg:x="9918" fg:w="15"/><text x="14.2139%" y="495.50"></text></g><g><title>_int_free (34 samples, 0.05%)</title><rect x="14.0709%" y="421" width="0.0479%" height="15" fill="rgb(235,61,29)" fg:x="9994" fg:w="34"/><text x="14.3209%" y="431.50"></text></g><g><title>_int_realloc (59 samples, 0.08%)</title><rect x="14.0399%" y="437" width="0.0831%" height="15" fill="rgb(219,207,3)" fg:x="9972" fg:w="59"/><text x="14.2899%" y="447.50"></text></g><g><title>__GI___libc_realloc (83 samples, 0.12%)</title><rect x="14.0104%" y="453" width="0.1169%" height="15" fill="rgb(222,56,46)" fg:x="9951" fg:w="83"/><text x="14.2604%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (105 samples, 0.15%)</title><rect x="13.9850%" y="485" width="0.1478%" height="15" fill="rgb(239,76,54)" fg:x="9933" fg:w="105"/><text x="14.2350%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (99 samples, 0.14%)</title><rect x="13.9935%" y="469" width="0.1394%" height="15" fill="rgb(231,124,27)" fg:x="9939" fg:w="99"/><text x="14.2435%" y="479.50"></text></g><g><title>bson::de::read_string (317 samples, 0.45%)</title><rect x="13.7372%" y="517" width="0.4463%" height="15" fill="rgb(249,195,6)" fg:x="9757" fg:w="317"/><text x="13.9872%" y="527.50"></text></g><g><title>std::io::Read::read_to_string (208 samples, 0.29%)</title><rect x="13.8907%" y="501" width="0.2929%" height="15" fill="rgb(237,174,47)" fg:x="9866" fg:w="208"/><text x="14.1407%" y="511.50"></text></g><g><title>core::str::converts::from_utf8 (36 samples, 0.05%)</title><rect x="14.1329%" y="485" width="0.0507%" height="15" fill="rgb(206,201,31)" fg:x="10038" fg:w="36"/><text x="14.3829%" y="495.50"></text></g><g><title>core::str::validations::run_utf8_validation (33 samples, 0.05%)</title><rect x="14.1371%" y="469" width="0.0465%" height="15" fill="rgb(231,57,52)" fg:x="10041" fg:w="33"/><text x="14.3871%" y="479.50"></text></g><g><title>bson::de::deserialize_bson_kvp (1,817 samples, 2.56%)</title><rect x="11.6535%" y="533" width="2.5582%" height="15" fill="rgb(248,177,22)" fg:x="8277" fg:w="1817"/><text x="11.9035%" y="543.50">bs..</text></g><g><title>bson::document::Document::from_reader (20 samples, 0.03%)</title><rect x="14.1835%" y="517" width="0.0282%" height="15" fill="rgb(215,211,37)" fg:x="10074" fg:w="20"/><text x="14.4335%" y="527.50"></text></g><g><title>bson::document::Document::new (8 samples, 0.01%)</title><rect x="14.2004%" y="501" width="0.0113%" height="15" fill="rgb(241,128,51)" fg:x="10086" fg:w="8"/><text x="14.4504%" y="511.50"></text></g><g><title>_int_free (9 samples, 0.01%)</title><rect x="14.4567%" y="469" width="0.0127%" height="15" fill="rgb(227,165,31)" fg:x="10268" fg:w="9"/><text x="14.7067%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (532 samples, 0.75%)</title><rect x="14.4693%" y="469" width="0.7490%" height="15" fill="rgb(228,167,24)" fg:x="10277" fg:w="532"/><text x="14.7193%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (251 samples, 0.35%)</title><rect x="14.8650%" y="453" width="0.3534%" height="15" fill="rgb(228,143,12)" fg:x="10558" fg:w="251"/><text x="15.1150%" y="463.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.02%)</title><rect x="15.2522%" y="453" width="0.0211%" height="15" fill="rgb(249,149,8)" fg:x="10833" fg:w="15"/><text x="15.5022%" y="463.50"></text></g><g><title>bson::document::Document::from_reader (2,583 samples, 3.64%)</title><rect x="11.6535%" y="677" width="3.6367%" height="15" fill="rgb(243,35,44)" fg:x="8277" fg:w="2583"/><text x="11.9035%" y="687.50">bson..</text></g><g><title>bson::de::ensure_read_exactly (2,583 samples, 3.64%)</title><rect x="11.6535%" y="661" width="3.6367%" height="15" fill="rgb(246,89,9)" fg:x="8277" fg:w="2583"/><text x="11.9035%" y="671.50">bson..</text></g><g><title>bson::de::deserialize_bson_kvp (2,583 samples, 3.64%)</title><rect x="11.6535%" y="645" width="3.6367%" height="15" fill="rgb(233,213,13)" fg:x="8277" fg:w="2583"/><text x="11.9035%" y="655.50">bson..</text></g><g><title>bson::document::Document::from_reader (2,583 samples, 3.64%)</title><rect x="11.6535%" y="629" width="3.6367%" height="15" fill="rgb(233,141,41)" fg:x="8277" fg:w="2583"/><text x="11.9035%" y="639.50">bson..</text></g><g><title>bson::de::ensure_read_exactly (2,583 samples, 3.64%)</title><rect x="11.6535%" y="613" width="3.6367%" height="15" fill="rgb(239,167,4)" fg:x="8277" fg:w="2583"/><text x="11.9035%" y="623.50">bson..</text></g><g><title>bson::de::deserialize_bson_kvp (2,583 samples, 3.64%)</title><rect x="11.6535%" y="597" width="3.6367%" height="15" fill="rgb(209,217,16)" fg:x="8277" fg:w="2583"/><text x="11.9035%" y="607.50">bson..</text></g><g><title>bson::de::deserialize_bson_kvp (2,583 samples, 3.64%)</title><rect x="11.6535%" y="581" width="3.6367%" height="15" fill="rgb(219,88,35)" fg:x="8277" fg:w="2583"/><text x="11.9035%" y="591.50">bson..</text></g><g><title>bson::document::Document::from_reader (2,583 samples, 3.64%)</title><rect x="11.6535%" y="565" width="3.6367%" height="15" fill="rgb(220,193,23)" fg:x="8277" fg:w="2583"/><text x="11.9035%" y="575.50">bson..</text></g><g><title>bson::de::ensure_read_exactly (2,583 samples, 3.64%)</title><rect x="11.6535%" y="549" width="3.6367%" height="15" fill="rgb(230,90,52)" fg:x="8277" fg:w="2583"/><text x="11.9035%" y="559.50">bson..</text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (766 samples, 1.08%)</title><rect x="14.2117%" y="533" width="1.0785%" height="15" fill="rgb(252,106,19)" fg:x="10094" fg:w="766"/><text x="14.4617%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (766 samples, 1.08%)</title><rect x="14.2117%" y="517" width="1.0785%" height="15" fill="rgb(206,74,20)" fg:x="10094" fg:w="766"/><text x="14.4617%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (766 samples, 1.08%)</title><rect x="14.2117%" y="501" width="1.0785%" height="15" fill="rgb(230,138,44)" fg:x="10094" fg:w="766"/><text x="14.4617%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (766 samples, 1.08%)</title><rect x="14.2117%" y="485" width="1.0785%" height="15" fill="rgb(235,182,43)" fg:x="10094" fg:w="766"/><text x="14.4617%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (51 samples, 0.07%)</title><rect x="15.2184%" y="469" width="0.0718%" height="15" fill="rgb(242,16,51)" fg:x="10809" fg:w="51"/><text x="15.4684%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (30 samples, 0.04%)</title><rect x="15.8252%" y="565" width="0.0422%" height="15" fill="rgb(248,9,4)" fg:x="11240" fg:w="30"/><text x="16.0752%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (19 samples, 0.03%)</title><rect x="15.8407%" y="549" width="0.0268%" height="15" fill="rgb(210,31,22)" fg:x="11251" fg:w="19"/><text x="16.0907%" y="559.50"></text></g><g><title>checked_request2size (23 samples, 0.03%)</title><rect x="16.5151%" y="389" width="0.0324%" height="15" fill="rgb(239,54,39)" fg:x="11730" fg:w="23"/><text x="16.7651%" y="399.50"></text></g><g><title>_int_malloc (347 samples, 0.49%)</title><rect x="16.0674%" y="405" width="0.4886%" height="15" fill="rgb(230,99,41)" fg:x="11412" fg:w="347"/><text x="16.3174%" y="415.50"></text></g><g><title>__GI___libc_malloc (491 samples, 0.69%)</title><rect x="15.8871%" y="421" width="0.6913%" height="15" fill="rgb(253,106,12)" fg:x="11284" fg:w="491"/><text x="16.1371%" y="431.50"></text></g><g><title>checked_request2size (16 samples, 0.02%)</title><rect x="16.5559%" y="405" width="0.0225%" height="15" fill="rgb(213,46,41)" fg:x="11759" fg:w="16"/><text x="16.8059%" y="415.50"></text></g><g><title>__rdl_alloc (13 samples, 0.02%)</title><rect x="16.5784%" y="421" width="0.0183%" height="15" fill="rgb(215,133,35)" fg:x="11775" fg:w="13"/><text x="16.8284%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (13 samples, 0.02%)</title><rect x="16.5784%" y="405" width="0.0183%" height="15" fill="rgb(213,28,5)" fg:x="11775" fg:w="13"/><text x="16.8284%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (517 samples, 0.73%)</title><rect x="15.8759%" y="517" width="0.7279%" height="15" fill="rgb(215,77,49)" fg:x="11276" fg:w="517"/><text x="16.1259%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (517 samples, 0.73%)</title><rect x="15.8759%" y="501" width="0.7279%" height="15" fill="rgb(248,100,22)" fg:x="11276" fg:w="517"/><text x="16.1259%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (517 samples, 0.73%)</title><rect x="15.8759%" y="485" width="0.7279%" height="15" fill="rgb(208,67,9)" fg:x="11276" fg:w="517"/><text x="16.1259%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (517 samples, 0.73%)</title><rect x="15.8759%" y="469" width="0.7279%" height="15" fill="rgb(219,133,21)" fg:x="11276" fg:w="517"/><text x="16.1259%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (517 samples, 0.73%)</title><rect x="15.8759%" y="453" width="0.7279%" height="15" fill="rgb(246,46,29)" fg:x="11276" fg:w="517"/><text x="16.1259%" y="463.50"></text></g><g><title>alloc::alloc::alloc (514 samples, 0.72%)</title><rect x="15.8801%" y="437" width="0.7237%" height="15" fill="rgb(246,185,52)" fg:x="11279" fg:w="514"/><text x="16.1301%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (612 samples, 0.86%)</title><rect x="15.8139%" y="597" width="0.8617%" height="15" fill="rgb(252,136,11)" fg:x="11232" fg:w="612"/><text x="16.0639%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (604 samples, 0.85%)</title><rect x="15.8252%" y="581" width="0.8504%" height="15" fill="rgb(219,138,53)" fg:x="11240" fg:w="604"/><text x="16.0752%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (574 samples, 0.81%)</title><rect x="15.8674%" y="565" width="0.8082%" height="15" fill="rgb(211,51,23)" fg:x="11270" fg:w="574"/><text x="16.1174%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (574 samples, 0.81%)</title><rect x="15.8674%" y="549" width="0.8082%" height="15" fill="rgb(247,221,28)" fg:x="11270" fg:w="574"/><text x="16.1174%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (574 samples, 0.81%)</title><rect x="15.8674%" y="533" width="0.8082%" height="15" fill="rgb(251,222,45)" fg:x="11270" fg:w="574"/><text x="16.1174%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (51 samples, 0.07%)</title><rect x="16.6038%" y="517" width="0.0718%" height="15" fill="rgb(217,162,53)" fg:x="11793" fg:w="51"/><text x="16.8538%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (51 samples, 0.07%)</title><rect x="16.6038%" y="501" width="0.0718%" height="15" fill="rgb(229,93,14)" fg:x="11793" fg:w="51"/><text x="16.8538%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (42 samples, 0.06%)</title><rect x="16.6165%" y="485" width="0.0591%" height="15" fill="rgb(209,67,49)" fg:x="11802" fg:w="42"/><text x="16.8665%" y="495.50"></text></g><g><title>__GI___libc_malloc (28 samples, 0.04%)</title><rect x="17.9441%" y="533" width="0.0394%" height="15" fill="rgb(213,87,29)" fg:x="12745" fg:w="28"/><text x="18.1941%" y="543.50"></text></g><g><title>_int_malloc (21 samples, 0.03%)</title><rect x="17.9540%" y="517" width="0.0296%" height="15" fill="rgb(205,151,52)" fg:x="12752" fg:w="21"/><text x="18.2040%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (54 samples, 0.08%)</title><rect x="17.9118%" y="549" width="0.0760%" height="15" fill="rgb(253,215,39)" fg:x="12722" fg:w="54"/><text x="18.1618%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (12 samples, 0.02%)</title><rect x="17.9948%" y="517" width="0.0169%" height="15" fill="rgb(221,220,41)" fg:x="12781" fg:w="12"/><text x="18.2448%" y="527.50"></text></g><g><title>_int_malloc (88 samples, 0.12%)</title><rect x="18.0877%" y="357" width="0.1239%" height="15" fill="rgb(218,133,21)" fg:x="12847" fg:w="88"/><text x="18.3377%" y="367.50"></text></g><g><title>__GI___libc_malloc (143 samples, 0.20%)</title><rect x="18.0202%" y="373" width="0.2013%" height="15" fill="rgb(221,193,43)" fg:x="12799" fg:w="143"/><text x="18.2702%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (152 samples, 0.21%)</title><rect x="18.0173%" y="469" width="0.2140%" height="15" fill="rgb(240,128,52)" fg:x="12797" fg:w="152"/><text x="18.2673%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (152 samples, 0.21%)</title><rect x="18.0173%" y="453" width="0.2140%" height="15" fill="rgb(253,114,12)" fg:x="12797" fg:w="152"/><text x="18.2673%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (152 samples, 0.21%)</title><rect x="18.0173%" y="437" width="0.2140%" height="15" fill="rgb(215,223,47)" fg:x="12797" fg:w="152"/><text x="18.2673%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (152 samples, 0.21%)</title><rect x="18.0173%" y="421" width="0.2140%" height="15" fill="rgb(248,225,23)" fg:x="12797" fg:w="152"/><text x="18.2673%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (152 samples, 0.21%)</title><rect x="18.0173%" y="405" width="0.2140%" height="15" fill="rgb(250,108,0)" fg:x="12797" fg:w="152"/><text x="18.2673%" y="415.50"></text></g><g><title>alloc::alloc::alloc (151 samples, 0.21%)</title><rect x="18.0188%" y="389" width="0.2126%" height="15" fill="rgb(228,208,7)" fg:x="12798" fg:w="151"/><text x="18.2688%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (193 samples, 0.27%)</title><rect x="17.9878%" y="549" width="0.2717%" height="15" fill="rgb(244,45,10)" fg:x="12776" fg:w="193"/><text x="18.2378%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (188 samples, 0.26%)</title><rect x="17.9948%" y="533" width="0.2647%" height="15" fill="rgb(207,125,25)" fg:x="12781" fg:w="188"/><text x="18.2448%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (176 samples, 0.25%)</title><rect x="18.0117%" y="517" width="0.2478%" height="15" fill="rgb(210,195,18)" fg:x="12793" fg:w="176"/><text x="18.2617%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (176 samples, 0.25%)</title><rect x="18.0117%" y="501" width="0.2478%" height="15" fill="rgb(249,80,12)" fg:x="12793" fg:w="176"/><text x="18.2617%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (176 samples, 0.25%)</title><rect x="18.0117%" y="485" width="0.2478%" height="15" fill="rgb(221,65,9)" fg:x="12793" fg:w="176"/><text x="18.2617%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (20 samples, 0.03%)</title><rect x="18.2314%" y="469" width="0.0282%" height="15" fill="rgb(235,49,36)" fg:x="12949" fg:w="20"/><text x="18.4814%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.03%)</title><rect x="18.2314%" y="453" width="0.0282%" height="15" fill="rgb(225,32,20)" fg:x="12949" fg:w="20"/><text x="18.4814%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (18 samples, 0.03%)</title><rect x="18.2342%" y="437" width="0.0253%" height="15" fill="rgb(215,141,46)" fg:x="12951" fg:w="18"/><text x="18.4842%" y="447.50"></text></g><g><title>_int_malloc (69 samples, 0.10%)</title><rect x="18.3975%" y="517" width="0.0971%" height="15" fill="rgb(250,160,47)" fg:x="13067" fg:w="69"/><text x="18.6475%" y="527.50"></text></g><g><title>__GI___libc_malloc (100 samples, 0.14%)</title><rect x="18.3595%" y="533" width="0.1408%" height="15" fill="rgb(216,222,40)" fg:x="13040" fg:w="100"/><text x="18.6095%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (14 samples, 0.02%)</title><rect x="18.5003%" y="533" width="0.0197%" height="15" fill="rgb(234,217,39)" fg:x="13140" fg:w="14"/><text x="18.7503%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (26 samples, 0.04%)</title><rect x="18.5791%" y="517" width="0.0366%" height="15" fill="rgb(207,178,40)" fg:x="13196" fg:w="26"/><text x="18.8291%" y="527.50"></text></g><g><title>hashbrown::map::make_hash (59 samples, 0.08%)</title><rect x="18.6932%" y="485" width="0.0831%" height="15" fill="rgb(221,136,13)" fg:x="13277" fg:w="59"/><text x="18.9432%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (35 samples, 0.05%)</title><rect x="18.7269%" y="469" width="0.0493%" height="15" fill="rgb(249,199,10)" fg:x="13301" fg:w="35"/><text x="18.9769%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (197 samples, 0.28%)</title><rect x="18.5228%" y="533" width="0.2774%" height="15" fill="rgb(249,222,13)" fg:x="13156" fg:w="197"/><text x="18.7728%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (131 samples, 0.18%)</title><rect x="18.6157%" y="517" width="0.1844%" height="15" fill="rgb(244,185,38)" fg:x="13222" fg:w="131"/><text x="18.8657%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (113 samples, 0.16%)</title><rect x="18.6411%" y="501" width="0.1591%" height="15" fill="rgb(236,202,9)" fg:x="13240" fg:w="113"/><text x="18.8911%" y="511.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (17 samples, 0.02%)</title><rect x="18.7762%" y="485" width="0.0239%" height="15" fill="rgb(250,229,37)" fg:x="13336" fg:w="17"/><text x="19.0262%" y="495.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (829 samples, 1.17%)</title><rect x="17.7189%" y="565" width="1.1672%" height="15" fill="rgb(206,174,23)" fg:x="12585" fg:w="829"/><text x="17.9689%" y="575.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (445 samples, 0.63%)</title><rect x="18.2595%" y="549" width="0.6265%" height="15" fill="rgb(211,33,43)" fg:x="12969" fg:w="445"/><text x="18.5095%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (61 samples, 0.09%)</title><rect x="18.8002%" y="533" width="0.0859%" height="15" fill="rgb(245,58,50)" fg:x="13353" fg:w="61"/><text x="19.0502%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (30 samples, 0.04%)</title><rect x="18.8438%" y="517" width="0.0422%" height="15" fill="rgb(244,68,36)" fg:x="13384" fg:w="30"/><text x="19.0938%" y="527.50"></text></g><g><title>_int_malloc (20 samples, 0.03%)</title><rect x="18.8973%" y="549" width="0.0282%" height="15" fill="rgb(232,229,15)" fg:x="13422" fg:w="20"/><text x="19.1473%" y="559.50"></text></g><g><title>__GI___libc_malloc (31 samples, 0.04%)</title><rect x="18.8860%" y="565" width="0.0436%" height="15" fill="rgb(254,30,23)" fg:x="13414" fg:w="31"/><text x="19.1360%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (909 samples, 1.28%)</title><rect x="17.6555%" y="581" width="1.2798%" height="15" fill="rgb(235,160,14)" fg:x="12540" fg:w="909"/><text x="17.9055%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (72 samples, 0.10%)</title><rect x="18.9776%" y="549" width="0.1014%" height="15" fill="rgb(212,155,44)" fg:x="13479" fg:w="72"/><text x="19.2276%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (39 samples, 0.05%)</title><rect x="19.0240%" y="533" width="0.0549%" height="15" fill="rgb(226,2,50)" fg:x="13512" fg:w="39"/><text x="19.2740%" y="543.50"></text></g><g><title>checked_request2size (40 samples, 0.06%)</title><rect x="20.6488%" y="373" width="0.0563%" height="15" fill="rgb(234,177,6)" fg:x="14666" fg:w="40"/><text x="20.8988%" y="383.50"></text></g><g><title>get_max_fast (8 samples, 0.01%)</title><rect x="20.7051%" y="373" width="0.0113%" height="15" fill="rgb(217,24,9)" fg:x="14706" fg:w="8"/><text x="20.9551%" y="383.50"></text></g><g><title>_int_malloc (819 samples, 1.15%)</title><rect x="19.5689%" y="389" width="1.1531%" height="15" fill="rgb(220,13,46)" fg:x="13899" fg:w="819"/><text x="19.8189%" y="399.50"></text></g><g><title>__GI___libc_malloc (1,165 samples, 1.64%)</title><rect x="19.1479%" y="405" width="1.6402%" height="15" fill="rgb(239,221,27)" fg:x="13600" fg:w="1165"/><text x="19.3979%" y="415.50"></text></g><g><title>checked_request2size (47 samples, 0.07%)</title><rect x="20.7220%" y="389" width="0.0662%" height="15" fill="rgb(222,198,25)" fg:x="14718" fg:w="47"/><text x="20.9720%" y="399.50"></text></g><g><title>__rdl_alloc (39 samples, 0.05%)</title><rect x="20.7882%" y="405" width="0.0549%" height="15" fill="rgb(211,99,13)" fg:x="14765" fg:w="39"/><text x="21.0382%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (39 samples, 0.05%)</title><rect x="20.7882%" y="389" width="0.0549%" height="15" fill="rgb(232,111,31)" fg:x="14765" fg:w="39"/><text x="21.0382%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,238 samples, 1.74%)</title><rect x="19.1296%" y="501" width="1.7430%" height="15" fill="rgb(245,82,37)" fg:x="13587" fg:w="1238"/><text x="19.3796%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,238 samples, 1.74%)</title><rect x="19.1296%" y="485" width="1.7430%" height="15" fill="rgb(227,149,46)" fg:x="13587" fg:w="1238"/><text x="19.3796%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,238 samples, 1.74%)</title><rect x="19.1296%" y="469" width="1.7430%" height="15" fill="rgb(218,36,50)" fg:x="13587" fg:w="1238"/><text x="19.3796%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,238 samples, 1.74%)</title><rect x="19.1296%" y="453" width="1.7430%" height="15" fill="rgb(226,80,48)" fg:x="13587" fg:w="1238"/><text x="19.3796%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,238 samples, 1.74%)</title><rect x="19.1296%" y="437" width="1.7430%" height="15" fill="rgb(238,224,15)" fg:x="13587" fg:w="1238"/><text x="19.3796%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1,237 samples, 1.74%)</title><rect x="19.1310%" y="421" width="1.7416%" height="15" fill="rgb(241,136,10)" fg:x="13588" fg:w="1237"/><text x="19.3810%" y="431.50"></text></g><g><title>__rust_alloc (21 samples, 0.03%)</title><rect x="20.8431%" y="405" width="0.0296%" height="15" fill="rgb(208,32,45)" fg:x="14804" fg:w="21"/><text x="21.0931%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,473 samples, 2.07%)</title><rect x="18.9353%" y="581" width="2.0739%" height="15" fill="rgb(207,135,9)" fg:x="13449" fg:w="1473"/><text x="19.1853%" y="591.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,443 samples, 2.03%)</title><rect x="18.9776%" y="565" width="2.0317%" height="15" fill="rgb(206,86,44)" fg:x="13479" fg:w="1443"/><text x="19.2276%" y="575.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,371 samples, 1.93%)</title><rect x="19.0789%" y="549" width="1.9303%" height="15" fill="rgb(245,177,15)" fg:x="13551" fg:w="1371"/><text x="19.3289%" y="559.50">a..</text></g><g><title>alloc::slice::hack::to_vec (1,371 samples, 1.93%)</title><rect x="19.0789%" y="533" width="1.9303%" height="15" fill="rgb(206,64,50)" fg:x="13551" fg:w="1371"/><text x="19.3289%" y="543.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,371 samples, 1.93%)</title><rect x="19.0789%" y="517" width="1.9303%" height="15" fill="rgb(234,36,40)" fg:x="13551" fg:w="1371"/><text x="19.3289%" y="527.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (97 samples, 0.14%)</title><rect x="20.8726%" y="501" width="0.1366%" height="15" fill="rgb(213,64,8)" fg:x="14825" fg:w="97"/><text x="21.1226%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (97 samples, 0.14%)</title><rect x="20.8726%" y="485" width="0.1366%" height="15" fill="rgb(210,75,36)" fg:x="14825" fg:w="97"/><text x="21.1226%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (80 samples, 0.11%)</title><rect x="20.8966%" y="469" width="0.1126%" height="15" fill="rgb(229,88,21)" fg:x="14842" fg:w="80"/><text x="21.1466%" y="479.50"></text></g><g><title>checked_request2size (33 samples, 0.05%)</title><rect x="22.6931%" y="533" width="0.0465%" height="15" fill="rgb(252,204,47)" fg:x="16118" fg:w="33"/><text x="22.9431%" y="543.50"></text></g><g><title>_int_malloc (562 samples, 0.79%)</title><rect x="21.9652%" y="549" width="0.7913%" height="15" fill="rgb(208,77,27)" fg:x="15601" fg:w="562"/><text x="22.2152%" y="559.50"></text></g><g><title>get_max_fast (12 samples, 0.02%)</title><rect x="22.7396%" y="533" width="0.0169%" height="15" fill="rgb(221,76,26)" fg:x="16151" fg:w="12"/><text x="22.9896%" y="543.50"></text></g><g><title>__GI___libc_malloc (781 samples, 1.10%)</title><rect x="21.7075%" y="565" width="1.0996%" height="15" fill="rgb(225,139,18)" fg:x="15418" fg:w="781"/><text x="21.9575%" y="575.50"></text></g><g><title>checked_request2size (36 samples, 0.05%)</title><rect x="22.7565%" y="549" width="0.0507%" height="15" fill="rgb(230,137,11)" fg:x="16163" fg:w="36"/><text x="23.0065%" y="559.50"></text></g><g><title>__memmove_avx_unaligned_erms (86 samples, 0.12%)</title><rect x="22.8071%" y="565" width="0.1211%" height="15" fill="rgb(212,28,1)" fg:x="16199" fg:w="86"/><text x="23.0571%" y="575.50"></text></g><g><title>__rdl_alloc (28 samples, 0.04%)</title><rect x="22.9282%" y="565" width="0.0394%" height="15" fill="rgb(248,164,17)" fg:x="16285" fg:w="28"/><text x="23.1782%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (28 samples, 0.04%)</title><rect x="22.9282%" y="549" width="0.0394%" height="15" fill="rgb(222,171,42)" fg:x="16285" fg:w="28"/><text x="23.1782%" y="559.50"></text></g><g><title>__rust_alloc (10 samples, 0.01%)</title><rect x="22.9676%" y="565" width="0.0141%" height="15" fill="rgb(243,84,45)" fg:x="16313" fg:w="10"/><text x="23.2176%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (309 samples, 0.44%)</title><rect x="23.5027%" y="549" width="0.4351%" height="15" fill="rgb(252,49,23)" fg:x="16693" fg:w="309"/><text x="23.7527%" y="559.50"></text></g><g><title>__GI___libc_free (9 samples, 0.01%)</title><rect x="24.6107%" y="517" width="0.0127%" height="15" fill="rgb(215,19,7)" fg:x="17480" fg:w="9"/><text x="24.8607%" y="527.50"></text></g><g><title>_int_free (24 samples, 0.03%)</title><rect x="24.6290%" y="517" width="0.0338%" height="15" fill="rgb(238,81,41)" fg:x="17493" fg:w="24"/><text x="24.8790%" y="527.50"></text></g><g><title>hashbrown::map::make_hash (1,064 samples, 1.50%)</title><rect x="24.6628%" y="517" width="1.4980%" height="15" fill="rgb(210,199,37)" fg:x="17517" fg:w="1064"/><text x="24.9128%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (514 samples, 0.72%)</title><rect x="25.4372%" y="501" width="0.7237%" height="15" fill="rgb(244,192,49)" fg:x="18067" fg:w="514"/><text x="25.6872%" y="511.50"></text></g><g><title>_int_malloc (109 samples, 0.15%)</title><rect x="26.2721%" y="485" width="0.1535%" height="15" fill="rgb(226,211,11)" fg:x="18660" fg:w="109"/><text x="26.5221%" y="495.50"></text></g><g><title>__GI___libc_malloc (150 samples, 0.21%)</title><rect x="26.2158%" y="501" width="0.2112%" height="15" fill="rgb(236,162,54)" fg:x="18620" fg:w="150"/><text x="26.4658%" y="511.50"></text></g><g><title>__memset_avx2_unaligned_erms (9 samples, 0.01%)</title><rect x="26.4269%" y="501" width="0.0127%" height="15" fill="rgb(220,229,9)" fg:x="18770" fg:w="9"/><text x="26.6769%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,466 samples, 3.47%)</title><rect x="22.9817%" y="565" width="3.4720%" height="15" fill="rgb(250,87,22)" fg:x="16323" fg:w="2466"/><text x="23.2317%" y="575.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,785 samples, 2.51%)</title><rect x="23.9405%" y="549" width="2.5132%" height="15" fill="rgb(239,43,17)" fg:x="17004" fg:w="1785"/><text x="24.1905%" y="559.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,656 samples, 2.33%)</title><rect x="24.1222%" y="533" width="2.3315%" height="15" fill="rgb(231,177,25)" fg:x="17133" fg:w="1656"/><text x="24.3722%" y="543.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (208 samples, 0.29%)</title><rect x="26.1608%" y="517" width="0.2929%" height="15" fill="rgb(219,179,1)" fg:x="18581" fg:w="208"/><text x="26.4108%" y="527.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (7,544 samples, 10.62%)</title><rect x="16.6756%" y="597" width="10.6215%" height="15" fill="rgb(238,219,53)" fg:x="11844" fg:w="7544"/><text x="16.9256%" y="607.50">&lt;linked_hash_map..</text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (4,465 samples, 6.29%)</title><rect x="21.0106%" y="581" width="6.2864%" height="15" fill="rgb(232,167,36)" fg:x="14923" fg:w="4465"/><text x="21.2606%" y="591.50">linked_h..</text></g><g><title>hashbrown::map::make_hash (599 samples, 0.84%)</title><rect x="26.4537%" y="565" width="0.8434%" height="15" fill="rgb(244,19,51)" fg:x="18789" fg:w="599"/><text x="26.7037%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (329 samples, 0.46%)</title><rect x="26.8338%" y="549" width="0.4632%" height="15" fill="rgb(224,6,22)" fg:x="19059" fg:w="329"/><text x="27.0838%" y="559.50"></text></g><g><title>checked_request2size (11 samples, 0.02%)</title><rect x="28.1840%" y="549" width="0.0155%" height="15" fill="rgb(224,145,5)" fg:x="20018" fg:w="11"/><text x="28.4340%" y="559.50"></text></g><g><title>_int_malloc (271 samples, 0.38%)</title><rect x="27.8250%" y="565" width="0.3816%" height="15" fill="rgb(234,130,49)" fg:x="19763" fg:w="271"/><text x="28.0750%" y="575.50"></text></g><g><title>__GI___libc_malloc (394 samples, 0.55%)</title><rect x="27.6772%" y="581" width="0.5547%" height="15" fill="rgb(254,6,2)" fg:x="19658" fg:w="394"/><text x="27.9272%" y="591.50"></text></g><g><title>checked_request2size (18 samples, 0.03%)</title><rect x="28.2066%" y="565" width="0.0253%" height="15" fill="rgb(208,96,46)" fg:x="20034" fg:w="18"/><text x="28.4566%" y="575.50"></text></g><g><title>__memmove_avx_unaligned_erms (57 samples, 0.08%)</title><rect x="28.2319%" y="581" width="0.0803%" height="15" fill="rgb(239,3,39)" fg:x="20052" fg:w="57"/><text x="28.4819%" y="591.50"></text></g><g><title>__rdl_alloc (17 samples, 0.02%)</title><rect x="28.3122%" y="581" width="0.0239%" height="15" fill="rgb(233,210,1)" fg:x="20109" fg:w="17"/><text x="28.5622%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (17 samples, 0.02%)</title><rect x="28.3122%" y="565" width="0.0239%" height="15" fill="rgb(244,137,37)" fg:x="20109" fg:w="17"/><text x="28.5622%" y="575.50"></text></g><g><title>__rust_alloc (9 samples, 0.01%)</title><rect x="28.3361%" y="581" width="0.0127%" height="15" fill="rgb(240,136,2)" fg:x="20126" fg:w="9"/><text x="28.5861%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (136 samples, 0.19%)</title><rect x="28.6543%" y="565" width="0.1915%" height="15" fill="rgb(239,18,37)" fg:x="20352" fg:w="136"/><text x="28.9043%" y="575.50"></text></g><g><title>__GI___libc_free (8 samples, 0.01%)</title><rect x="29.2090%" y="533" width="0.0113%" height="15" fill="rgb(218,185,22)" fg:x="20746" fg:w="8"/><text x="29.4590%" y="543.50"></text></g><g><title>_int_free (13 samples, 0.02%)</title><rect x="29.2203%" y="533" width="0.0183%" height="15" fill="rgb(225,218,4)" fg:x="20754" fg:w="13"/><text x="29.4703%" y="543.50"></text></g><g><title>hashbrown::map::make_hash (499 samples, 0.70%)</title><rect x="29.2386%" y="533" width="0.7026%" height="15" fill="rgb(230,182,32)" fg:x="20767" fg:w="499"/><text x="29.4886%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (222 samples, 0.31%)</title><rect x="29.6286%" y="517" width="0.3126%" height="15" fill="rgb(242,56,43)" fg:x="21044" fg:w="222"/><text x="29.8786%" y="527.50"></text></g><g><title>__GI___libc_malloc (16 samples, 0.02%)</title><rect x="29.9665%" y="517" width="0.0225%" height="15" fill="rgb(233,99,24)" fg:x="21284" fg:w="16"/><text x="30.2165%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1,175 samples, 1.65%)</title><rect x="28.3488%" y="581" width="1.6543%" height="15" fill="rgb(234,209,42)" fg:x="20135" fg:w="1175"/><text x="28.5988%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (821 samples, 1.16%)</title><rect x="28.8472%" y="565" width="1.1559%" height="15" fill="rgb(227,7,12)" fg:x="20489" fg:w="821"/><text x="29.0972%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (734 samples, 1.03%)</title><rect x="28.9697%" y="549" width="1.0334%" height="15" fill="rgb(245,203,43)" fg:x="20576" fg:w="734"/><text x="29.2197%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (44 samples, 0.06%)</title><rect x="29.9411%" y="533" width="0.0619%" height="15" fill="rgb(238,205,33)" fg:x="21266" fg:w="44"/><text x="30.1911%" y="543.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (10,727 samples, 15.10%)</title><rect x="15.2902%" y="661" width="15.1029%" height="15" fill="rgb(231,56,7)" fg:x="10860" fg:w="10727"/><text x="15.5402%" y="671.50">&lt;linked_hash_map::Linke..</text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (10,727 samples, 15.10%)</title><rect x="15.2902%" y="645" width="15.1029%" height="15" fill="rgb(244,186,29)" fg:x="10860" fg:w="10727"/><text x="15.5402%" y="655.50">&lt;linked_hash_map::Linke..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10,727 samples, 15.10%)</title><rect x="15.2902%" y="629" width="15.1029%" height="15" fill="rgb(234,111,31)" fg:x="10860" fg:w="10727"/><text x="15.5402%" y="639.50">&lt;T as alloc::slice::hac..</text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (10,708 samples, 15.08%)</title><rect x="15.3169%" y="613" width="15.0762%" height="15" fill="rgb(241,149,10)" fg:x="10879" fg:w="10708"/><text x="15.5669%" y="623.50">&lt;linked_hash_map::Linke..</text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (2,199 samples, 3.10%)</title><rect x="27.2970%" y="597" width="3.0960%" height="15" fill="rgb(249,206,44)" fg:x="19388" fg:w="2199"/><text x="27.5470%" y="607.50">lin..</text></g><g><title>hashbrown::map::make_hash (277 samples, 0.39%)</title><rect x="30.0031%" y="581" width="0.3900%" height="15" fill="rgb(251,153,30)" fg:x="21310" fg:w="277"/><text x="30.2531%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (119 samples, 0.17%)</title><rect x="30.2256%" y="565" width="0.1675%" height="15" fill="rgb(239,152,38)" fg:x="21468" fg:w="119"/><text x="30.4756%" y="575.50"></text></g><g><title>bson::de::serde::&lt;impl serde::de::Deserialize for bson::document::Document&gt;::deserialize (28 samples, 0.04%)</title><rect x="30.4100%" y="581" width="0.0394%" height="15" fill="rgb(249,139,47)" fg:x="21599" fg:w="28"/><text x="30.6600%" y="591.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (16,676 samples, 23.48%)</title><rect x="6.9834%" y="693" width="23.4787%" height="15" fill="rgb(244,64,35)" fg:x="4960" fg:w="16676"/><text x="7.2334%" y="703.50">&lt;core::future::from_generator::GenFut..</text></g><g><title>mongodb::cmap::conn::command::CommandResponse::body (10,776 samples, 15.17%)</title><rect x="15.2902%" y="677" width="15.1719%" height="15" fill="rgb(216,46,15)" fg:x="10860" fg:w="10776"/><text x="15.5402%" y="687.50">mongodb::cmap::conn::co..</text></g><g><title>mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::GetMoreResponseBody&gt;::deserialize (49 samples, 0.07%)</title><rect x="30.3931%" y="661" width="0.0690%" height="15" fill="rgb(250,74,19)" fg:x="21587" fg:w="49"/><text x="30.6431%" y="671.50"></text></g><g><title>&lt;mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::GetMoreResponseBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (49 samples, 0.07%)</title><rect x="30.3931%" y="645" width="0.0690%" height="15" fill="rgb(249,42,33)" fg:x="21587" fg:w="49"/><text x="30.6431%" y="655.50"></text></g><g><title>mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::NextBatchBody&gt;::deserialize (49 samples, 0.07%)</title><rect x="30.3931%" y="629" width="0.0690%" height="15" fill="rgb(242,149,17)" fg:x="21587" fg:w="49"/><text x="30.6431%" y="639.50"></text></g><g><title>&lt;mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::NextBatchBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (49 samples, 0.07%)</title><rect x="30.3931%" y="613" width="0.0690%" height="15" fill="rgb(244,29,21)" fg:x="21587" fg:w="49"/><text x="30.6431%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::vec_deque::VecDeque&lt;T&gt;&gt;::deserialize (49 samples, 0.07%)</title><rect x="30.3931%" y="597" width="0.0690%" height="15" fill="rgb(220,130,37)" fg:x="21587" fg:w="49"/><text x="30.6431%" y="607.50"></text></g><g><title>bson::de::serde::Deserializer::new (9 samples, 0.01%)</title><rect x="30.4494%" y="581" width="0.0127%" height="15" fill="rgb(211,67,2)" fg:x="21627" fg:w="9"/><text x="30.6994%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;mongodb::cmap::conn::command::CommandResponse&gt; (30 samples, 0.04%)</title><rect x="30.4635%" y="677" width="0.0422%" height="15" fill="rgb(235,68,52)" fg:x="21637" fg:w="30"/><text x="30.7135%" y="687.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.04%)</title><rect x="30.4635%" y="661" width="0.0422%" height="15" fill="rgb(246,142,3)" fg:x="21637" fg:w="30"/><text x="30.7135%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (30 samples, 0.04%)</title><rect x="30.4635%" y="645" width="0.0422%" height="15" fill="rgb(241,25,7)" fg:x="21637" fg:w="30"/><text x="30.7135%" y="655.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.04%)</title><rect x="30.4635%" y="629" width="0.0422%" height="15" fill="rgb(242,119,39)" fg:x="21637" fg:w="30"/><text x="30.7135%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (28 samples, 0.04%)</title><rect x="30.4663%" y="613" width="0.0394%" height="15" fill="rgb(241,98,45)" fg:x="21639" fg:w="28"/><text x="30.7163%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (28 samples, 0.04%)</title><rect x="30.4663%" y="597" width="0.0394%" height="15" fill="rgb(254,28,30)" fg:x="21639" fg:w="28"/><text x="30.7163%" y="607.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 0.04%)</title><rect x="30.4663%" y="581" width="0.0394%" height="15" fill="rgb(241,142,54)" fg:x="21639" fg:w="28"/><text x="30.7163%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (25 samples, 0.04%)</title><rect x="30.4705%" y="565" width="0.0352%" height="15" fill="rgb(222,85,15)" fg:x="21642" fg:w="25"/><text x="30.7205%" y="575.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.04%)</title><rect x="30.4705%" y="549" width="0.0352%" height="15" fill="rgb(210,85,47)" fg:x="21642" fg:w="25"/><text x="30.7205%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (11 samples, 0.02%)</title><rect x="30.4902%" y="533" width="0.0155%" height="15" fill="rgb(224,206,25)" fg:x="21656" fg:w="11"/><text x="30.7402%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (10 samples, 0.01%)</title><rect x="30.4917%" y="517" width="0.0141%" height="15" fill="rgb(243,201,19)" fg:x="21657" fg:w="10"/><text x="30.7417%" y="527.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="30.4945%" y="501" width="0.0113%" height="15" fill="rgb(236,59,4)" fg:x="21659" fg:w="8"/><text x="30.7445%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.01%)</title><rect x="30.5254%" y="581" width="0.0113%" height="15" fill="rgb(254,179,45)" fg:x="21681" fg:w="8"/><text x="30.7754%" y="591.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (8 samples, 0.01%)</title><rect x="30.5254%" y="565" width="0.0113%" height="15" fill="rgb(226,14,10)" fg:x="21681" fg:w="8"/><text x="30.7754%" y="575.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.01%)</title><rect x="30.5381%" y="405" width="0.0113%" height="15" fill="rgb(244,27,41)" fg:x="21690" fg:w="8"/><text x="30.7881%" y="415.50"></text></g><g><title>_int_malloc (8 samples, 0.01%)</title><rect x="30.5381%" y="389" width="0.0113%" height="15" fill="rgb(235,35,32)" fg:x="21690" fg:w="8"/><text x="30.7881%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (9 samples, 0.01%)</title><rect x="30.5381%" y="501" width="0.0127%" height="15" fill="rgb(218,68,31)" fg:x="21690" fg:w="9"/><text x="30.7881%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.01%)</title><rect x="30.5381%" y="485" width="0.0127%" height="15" fill="rgb(207,120,37)" fg:x="21690" fg:w="9"/><text x="30.7881%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.01%)</title><rect x="30.5381%" y="469" width="0.0127%" height="15" fill="rgb(227,98,0)" fg:x="21690" fg:w="9"/><text x="30.7881%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.01%)</title><rect x="30.5381%" y="453" width="0.0127%" height="15" fill="rgb(207,7,3)" fg:x="21690" fg:w="9"/><text x="30.7881%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.01%)</title><rect x="30.5381%" y="437" width="0.0127%" height="15" fill="rgb(206,98,19)" fg:x="21690" fg:w="9"/><text x="30.7881%" y="447.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.01%)</title><rect x="30.5381%" y="421" width="0.0127%" height="15" fill="rgb(217,5,26)" fg:x="21690" fg:w="9"/><text x="30.7881%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (13 samples, 0.02%)</title><rect x="30.5367%" y="581" width="0.0183%" height="15" fill="rgb(235,190,38)" fg:x="21689" fg:w="13"/><text x="30.7867%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (13 samples, 0.02%)</title><rect x="30.5367%" y="565" width="0.0183%" height="15" fill="rgb(247,86,24)" fg:x="21689" fg:w="13"/><text x="30.7867%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.02%)</title><rect x="30.5367%" y="549" width="0.0183%" height="15" fill="rgb(205,101,16)" fg:x="21689" fg:w="13"/><text x="30.7867%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.02%)</title><rect x="30.5367%" y="533" width="0.0183%" height="15" fill="rgb(246,168,33)" fg:x="21689" fg:w="13"/><text x="30.7867%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.02%)</title><rect x="30.5367%" y="517" width="0.0183%" height="15" fill="rgb(231,114,1)" fg:x="21689" fg:w="13"/><text x="30.7867%" y="527.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.02%)</title><rect x="30.5635%" y="565" width="0.0155%" height="15" fill="rgb(207,184,53)" fg:x="21708" fg:w="11"/><text x="30.8135%" y="575.50"></text></g><g><title>_int_malloc (8 samples, 0.01%)</title><rect x="30.5677%" y="549" width="0.0113%" height="15" fill="rgb(224,95,51)" fg:x="21711" fg:w="8"/><text x="30.8177%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.01%)</title><rect x="30.5958%" y="517" width="0.0127%" height="15" fill="rgb(212,188,45)" fg:x="21731" fg:w="9"/><text x="30.8458%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (19 samples, 0.03%)</title><rect x="30.5846%" y="565" width="0.0268%" height="15" fill="rgb(223,154,38)" fg:x="21723" fg:w="19"/><text x="30.8346%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.02%)</title><rect x="30.5930%" y="549" width="0.0183%" height="15" fill="rgb(251,22,52)" fg:x="21729" fg:w="13"/><text x="30.8430%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (13 samples, 0.02%)</title><rect x="30.5930%" y="533" width="0.0183%" height="15" fill="rgb(229,209,22)" fg:x="21729" fg:w="13"/><text x="30.8430%" y="543.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (74 samples, 0.10%)</title><rect x="30.5156%" y="597" width="0.1042%" height="15" fill="rgb(234,138,34)" fg:x="21674" fg:w="74"/><text x="30.7656%" y="607.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (46 samples, 0.06%)</title><rect x="30.5550%" y="581" width="0.0648%" height="15" fill="rgb(212,95,11)" fg:x="21702" fg:w="46"/><text x="30.8050%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (21 samples, 0.03%)</title><rect x="30.6282%" y="581" width="0.0296%" height="15" fill="rgb(240,179,47)" fg:x="21754" fg:w="21"/><text x="30.8782%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (17 samples, 0.02%)</title><rect x="30.6339%" y="565" width="0.0239%" height="15" fill="rgb(240,163,11)" fg:x="21758" fg:w="17"/><text x="30.8839%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (16 samples, 0.02%)</title><rect x="30.6353%" y="549" width="0.0225%" height="15" fill="rgb(236,37,12)" fg:x="21759" fg:w="16"/><text x="30.8853%" y="559.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.01%)</title><rect x="30.6451%" y="533" width="0.0127%" height="15" fill="rgb(232,164,16)" fg:x="21766" fg:w="9"/><text x="30.8951%" y="543.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (109 samples, 0.15%)</title><rect x="30.5057%" y="661" width="0.1535%" height="15" fill="rgb(244,205,15)" fg:x="21667" fg:w="109"/><text x="30.7557%" y="671.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (109 samples, 0.15%)</title><rect x="30.5057%" y="645" width="0.1535%" height="15" fill="rgb(223,117,47)" fg:x="21667" fg:w="109"/><text x="30.7557%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (109 samples, 0.15%)</title><rect x="30.5057%" y="629" width="0.1535%" height="15" fill="rgb(244,107,35)" fg:x="21667" fg:w="109"/><text x="30.7557%" y="639.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (109 samples, 0.15%)</title><rect x="30.5057%" y="613" width="0.1535%" height="15" fill="rgb(205,140,8)" fg:x="21667" fg:w="109"/><text x="30.7557%" y="623.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (28 samples, 0.04%)</title><rect x="30.6198%" y="597" width="0.0394%" height="15" fill="rgb(228,84,46)" fg:x="21748" fg:w="28"/><text x="30.8698%" y="607.50"></text></g><g><title>&lt;mongodb::operation::find::Find as mongodb::operation::Operation&gt;::handle_response (153 samples, 0.22%)</title><rect x="30.4635%" y="693" width="0.2154%" height="15" fill="rgb(254,188,9)" fg:x="21637" fg:w="153"/><text x="30.7135%" y="703.50"></text></g><g><title>mongodb::cmap::conn::command::CommandResponse::body (123 samples, 0.17%)</title><rect x="30.5057%" y="677" width="0.1732%" height="15" fill="rgb(206,112,54)" fg:x="21667" fg:w="123"/><text x="30.7557%" y="687.50"></text></g><g><title>mongodb::operation::_::&lt;impl serde::de::Deserialize for mongodb::operation::CursorBody&gt;::deserialize (14 samples, 0.02%)</title><rect x="30.6592%" y="661" width="0.0197%" height="15" fill="rgb(216,84,49)" fg:x="21776" fg:w="14"/><text x="30.9092%" y="671.50"></text></g><g><title>&lt;mongodb::operation::_::&lt;impl serde::de::Deserialize for mongodb::operation::CursorBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (14 samples, 0.02%)</title><rect x="30.6592%" y="645" width="0.0197%" height="15" fill="rgb(214,194,35)" fg:x="21776" fg:w="14"/><text x="30.9092%" y="655.50"></text></g><g><title>mongodb::operation::_::&lt;impl serde::de::Deserialize for mongodb::operation::CursorInfo&gt;::deserialize (14 samples, 0.02%)</title><rect x="30.6592%" y="629" width="0.0197%" height="15" fill="rgb(249,28,3)" fg:x="21776" fg:w="14"/><text x="30.9092%" y="639.50"></text></g><g><title>&lt;mongodb::operation::_::&lt;impl serde::de::Deserialize for mongodb::operation::CursorInfo&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (14 samples, 0.02%)</title><rect x="30.6592%" y="613" width="0.0197%" height="15" fill="rgb(222,56,52)" fg:x="21776" fg:w="14"/><text x="30.9092%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::vec_deque::VecDeque&lt;T&gt;&gt;::deserialize (14 samples, 0.02%)</title><rect x="30.6592%" y="597" width="0.0197%" height="15" fill="rgb(245,217,50)" fg:x="21776" fg:w="14"/><text x="30.9092%" y="607.50"></text></g><g><title>bson::de::serde::&lt;impl serde::de::Deserialize for bson::document::Document&gt;::deserialize (14 samples, 0.02%)</title><rect x="30.6592%" y="581" width="0.0197%" height="15" fill="rgb(213,201,24)" fg:x="21776" fg:w="14"/><text x="30.9092%" y="591.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (14 samples, 0.02%)</title><rect x="30.6592%" y="565" width="0.0197%" height="15" fill="rgb(248,116,28)" fg:x="21776" fg:w="14"/><text x="30.9092%" y="575.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (8 samples, 0.01%)</title><rect x="30.6676%" y="549" width="0.0113%" height="15" fill="rgb(219,72,43)" fg:x="21782" fg:w="8"/><text x="30.9176%" y="559.50"></text></g><g><title>bson::de::read_string (52 samples, 0.07%)</title><rect x="30.6789%" y="533" width="0.0732%" height="15" fill="rgb(209,138,14)" fg:x="21790" fg:w="52"/><text x="30.9289%" y="543.50"></text></g><g><title>std::io::Read::read_to_string (52 samples, 0.07%)</title><rect x="30.6789%" y="517" width="0.0732%" height="15" fill="rgb(222,18,33)" fg:x="21790" fg:w="52"/><text x="30.9289%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (52 samples, 0.07%)</title><rect x="30.6789%" y="501" width="0.0732%" height="15" fill="rgb(213,199,7)" fg:x="21790" fg:w="52"/><text x="30.9289%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (52 samples, 0.07%)</title><rect x="30.6789%" y="485" width="0.0732%" height="15" fill="rgb(250,110,10)" fg:x="21790" fg:w="52"/><text x="30.9289%" y="495.50"></text></g><g><title>__GI___libc_realloc (52 samples, 0.07%)</title><rect x="30.6789%" y="469" width="0.0732%" height="15" fill="rgb(248,123,6)" fg:x="21790" fg:w="52"/><text x="30.9289%" y="479.50"></text></g><g><title>_int_realloc (52 samples, 0.07%)</title><rect x="30.6789%" y="453" width="0.0732%" height="15" fill="rgb(206,91,31)" fg:x="21790" fg:w="52"/><text x="30.9289%" y="463.50"></text></g><g><title>_int_malloc (52 samples, 0.07%)</title><rect x="30.6789%" y="437" width="0.0732%" height="15" fill="rgb(211,154,13)" fg:x="21790" fg:w="52"/><text x="30.9289%" y="447.50"></text></g><g><title>__memset_avx2_unaligned_erms (20 samples, 0.03%)</title><rect x="31.4983%" y="485" width="0.0282%" height="15" fill="rgb(225,148,7)" fg:x="22372" fg:w="20"/><text x="31.7483%" y="495.50"></text></g><g><title>malloc_consolidate (45 samples, 0.06%)</title><rect x="31.6518%" y="469" width="0.0634%" height="15" fill="rgb(220,160,43)" fg:x="22481" fg:w="45"/><text x="31.9018%" y="479.50"></text></g><g><title>__libc_calloc (180 samples, 0.25%)</title><rect x="31.4645%" y="501" width="0.2534%" height="15" fill="rgb(213,52,39)" fg:x="22348" fg:w="180"/><text x="31.7145%" y="511.50"></text></g><g><title>_int_malloc (136 samples, 0.19%)</title><rect x="31.5265%" y="485" width="0.1915%" height="15" fill="rgb(243,137,7)" fg:x="22392" fg:w="136"/><text x="31.7765%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (42 samples, 0.06%)</title><rect x="31.7180%" y="501" width="0.0591%" height="15" fill="rgb(230,79,13)" fg:x="22528" fg:w="42"/><text x="31.9680%" y="511.50"></text></g><g><title>_int_free (10 samples, 0.01%)</title><rect x="31.7884%" y="501" width="0.0141%" height="15" fill="rgb(247,105,23)" fg:x="22578" fg:w="10"/><text x="32.0384%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (118 samples, 0.17%)</title><rect x="32.6768%" y="485" width="0.1661%" height="15" fill="rgb(223,179,41)" fg:x="23209" fg:w="118"/><text x="32.9268%" y="495.50"></text></g><g><title>__rdl_alloc (26 samples, 0.04%)</title><rect x="32.8429%" y="485" width="0.0366%" height="15" fill="rgb(218,9,34)" fg:x="23327" fg:w="26"/><text x="33.0929%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (26 samples, 0.04%)</title><rect x="32.8429%" y="469" width="0.0366%" height="15" fill="rgb(222,106,8)" fg:x="23327" fg:w="26"/><text x="33.0929%" y="479.50"></text></g><g><title>bson::document::Document::from_reader (1,573 samples, 2.21%)</title><rect x="30.6789%" y="693" width="2.2147%" height="15" fill="rgb(211,220,0)" fg:x="21790" fg:w="1573"/><text x="30.9289%" y="703.50">b..</text></g><g><title>bson::de::ensure_read_exactly (1,573 samples, 2.21%)</title><rect x="30.6789%" y="677" width="2.2147%" height="15" fill="rgb(229,52,16)" fg:x="21790" fg:w="1573"/><text x="30.9289%" y="687.50">b..</text></g><g><title>bson::de::deserialize_bson_kvp (1,573 samples, 2.21%)</title><rect x="30.6789%" y="661" width="2.2147%" height="15" fill="rgb(212,155,18)" fg:x="21790" fg:w="1573"/><text x="30.9289%" y="671.50">b..</text></g><g><title>bson::document::Document::from_reader (1,573 samples, 2.21%)</title><rect x="30.6789%" y="645" width="2.2147%" height="15" fill="rgb(242,21,14)" fg:x="21790" fg:w="1573"/><text x="30.9289%" y="655.50">b..</text></g><g><title>bson::de::ensure_read_exactly (1,573 samples, 2.21%)</title><rect x="30.6789%" y="629" width="2.2147%" height="15" fill="rgb(222,19,48)" fg:x="21790" fg:w="1573"/><text x="30.9289%" y="639.50">b..</text></g><g><title>bson::de::deserialize_bson_kvp (1,573 samples, 2.21%)</title><rect x="30.6789%" y="613" width="2.2147%" height="15" fill="rgb(232,45,27)" fg:x="21790" fg:w="1573"/><text x="30.9289%" y="623.50">b..</text></g><g><title>bson::de::deserialize_bson_kvp (1,573 samples, 2.21%)</title><rect x="30.6789%" y="597" width="2.2147%" height="15" fill="rgb(249,103,42)" fg:x="21790" fg:w="1573"/><text x="30.9289%" y="607.50">b..</text></g><g><title>bson::document::Document::from_reader (1,573 samples, 2.21%)</title><rect x="30.6789%" y="581" width="2.2147%" height="15" fill="rgb(246,81,33)" fg:x="21790" fg:w="1573"/><text x="30.9289%" y="591.50">b..</text></g><g><title>bson::de::ensure_read_exactly (1,573 samples, 2.21%)</title><rect x="30.6789%" y="565" width="2.2147%" height="15" fill="rgb(252,33,42)" fg:x="21790" fg:w="1573"/><text x="30.9289%" y="575.50">b..</text></g><g><title>bson::de::deserialize_bson_kvp (1,573 samples, 2.21%)</title><rect x="30.6789%" y="549" width="2.2147%" height="15" fill="rgb(209,212,41)" fg:x="21790" fg:w="1573"/><text x="30.9289%" y="559.50">b..</text></g><g><title>bson::document::Document::from_reader (1,521 samples, 2.14%)</title><rect x="30.7521%" y="533" width="2.1415%" height="15" fill="rgb(207,154,6)" fg:x="21842" fg:w="1521"/><text x="31.0021%" y="543.50">b..</text></g><g><title>bson::de::ensure_read_exactly (1,521 samples, 2.14%)</title><rect x="30.7521%" y="517" width="2.1415%" height="15" fill="rgb(223,64,47)" fg:x="21842" fg:w="1521"/><text x="31.0021%" y="527.50">b..</text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (775 samples, 1.09%)</title><rect x="31.8024%" y="501" width="1.0911%" height="15" fill="rgb(211,161,38)" fg:x="22588" fg:w="775"/><text x="32.0524%" y="511.50"></text></g><g><title>__rust_alloc (10 samples, 0.01%)</title><rect x="32.8795%" y="485" width="0.0141%" height="15" fill="rgb(219,138,40)" fg:x="23353" fg:w="10"/><text x="33.1295%" y="495.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (8 samples, 0.01%)</title><rect x="32.8936%" y="677" width="0.0113%" height="15" fill="rgb(241,228,46)" fg:x="23363" fg:w="8"/><text x="33.1436%" y="687.50"></text></g><g><title>mongodb::cmap::conn::Connection::send_command::{{closure}} (34 samples, 0.05%)</title><rect x="32.8936%" y="693" width="0.0479%" height="15" fill="rgb(223,209,38)" fg:x="23363" fg:w="34"/><text x="33.1436%" y="703.50"></text></g><g><title>bson::document::Document::from_reader (23 samples, 0.03%)</title><rect x="32.9091%" y="677" width="0.0324%" height="15" fill="rgb(236,164,45)" fg:x="23374" fg:w="23"/><text x="33.1591%" y="687.50"></text></g><g><title>bson::de::ensure_read_exactly (23 samples, 0.03%)</title><rect x="32.9091%" y="661" width="0.0324%" height="15" fill="rgb(231,15,5)" fg:x="23374" fg:w="23"/><text x="33.1591%" y="671.50"></text></g><g><title>bson::de::deserialize_bson_kvp (20 samples, 0.03%)</title><rect x="32.9133%" y="645" width="0.0282%" height="15" fill="rgb(252,35,15)" fg:x="23377" fg:w="20"/><text x="33.1633%" y="655.50"></text></g><g><title>bson::document::Document::from_reader (20 samples, 0.03%)</title><rect x="32.9133%" y="629" width="0.0282%" height="15" fill="rgb(248,181,18)" fg:x="23377" fg:w="20"/><text x="33.1633%" y="639.50"></text></g><g><title>bson::de::ensure_read_exactly (20 samples, 0.03%)</title><rect x="32.9133%" y="613" width="0.0282%" height="15" fill="rgb(233,39,42)" fg:x="23377" fg:w="20"/><text x="33.1633%" y="623.50"></text></g><g><title>bson::de::deserialize_bson_kvp (19 samples, 0.03%)</title><rect x="32.9147%" y="597" width="0.0268%" height="15" fill="rgb(238,110,33)" fg:x="23378" fg:w="19"/><text x="33.1647%" y="607.50"></text></g><g><title>bson::de::deserialize_bson_kvp (16 samples, 0.02%)</title><rect x="32.9189%" y="581" width="0.0225%" height="15" fill="rgb(233,195,10)" fg:x="23381" fg:w="16"/><text x="33.1689%" y="591.50"></text></g><g><title>bson::document::Document::from_reader (16 samples, 0.02%)</title><rect x="32.9189%" y="565" width="0.0225%" height="15" fill="rgb(254,105,3)" fg:x="23381" fg:w="16"/><text x="33.1689%" y="575.50"></text></g><g><title>bson::de::ensure_read_exactly (16 samples, 0.02%)</title><rect x="32.9189%" y="549" width="0.0225%" height="15" fill="rgb(221,225,9)" fg:x="23381" fg:w="16"/><text x="33.1689%" y="559.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (10 samples, 0.01%)</title><rect x="32.9274%" y="533" width="0.0141%" height="15" fill="rgb(224,227,45)" fg:x="23387" fg:w="10"/><text x="33.1774%" y="543.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (148 samples, 0.21%)</title><rect x="33.5314%" y="565" width="0.2084%" height="15" fill="rgb(229,198,43)" fg:x="23816" fg:w="148"/><text x="33.7814%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (27 samples, 0.04%)</title><rect x="33.7017%" y="549" width="0.0380%" height="15" fill="rgb(206,209,35)" fg:x="23937" fg:w="27"/><text x="33.9517%" y="559.50"></text></g><g><title>__GI___libc_free (34 samples, 0.05%)</title><rect x="34.1326%" y="533" width="0.0479%" height="15" fill="rgb(245,195,53)" fg:x="24243" fg:w="34"/><text x="34.3826%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (68 samples, 0.10%)</title><rect x="34.1804%" y="533" width="0.0957%" height="15" fill="rgb(240,92,26)" fg:x="24277" fg:w="68"/><text x="34.4304%" y="543.50"></text></g><g><title>_int_free (76 samples, 0.11%)</title><rect x="34.2903%" y="533" width="0.1070%" height="15" fill="rgb(207,40,23)" fg:x="24355" fg:w="76"/><text x="34.5403%" y="543.50"></text></g><g><title>tcache_put (9 samples, 0.01%)</title><rect x="34.3846%" y="517" width="0.0127%" height="15" fill="rgb(223,111,35)" fg:x="24422" fg:w="9"/><text x="34.6346%" y="527.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (126 samples, 0.18%)</title><rect x="34.6422%" y="517" width="0.1774%" height="15" fill="rgb(229,147,28)" fg:x="24605" fg:w="126"/><text x="34.8922%" y="527.50"></text></g><g><title>&lt;bson::document::DocumentIntoIterator as core::iter::traits::iterator::Iterator&gt;::next (1,067 samples, 1.50%)</title><rect x="34.0073%" y="549" width="1.5023%" height="15" fill="rgb(211,29,28)" fg:x="24154" fg:w="1067"/><text x="34.2573%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (790 samples, 1.11%)</title><rect x="34.3973%" y="533" width="1.1123%" height="15" fill="rgb(228,72,33)" fg:x="24431" fg:w="790"/><text x="34.6473%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (490 samples, 0.69%)</title><rect x="34.8196%" y="517" width="0.6899%" height="15" fill="rgb(205,214,31)" fg:x="24731" fg:w="490"/><text x="35.0696%" y="527.50"></text></g><g><title>__memcmp_avx2_movbe (58 samples, 0.08%)</title><rect x="35.4279%" y="501" width="0.0817%" height="15" fill="rgb(224,111,15)" fg:x="25163" fg:w="58"/><text x="35.6779%" y="511.50"></text></g><g><title>bson::de::serde::Deserializer::new (58 samples, 0.08%)</title><rect x="35.5095%" y="549" width="0.0817%" height="15" fill="rgb(253,21,26)" fg:x="25221" fg:w="58"/><text x="35.7595%" y="559.50"></text></g><g><title>&lt;bson::de::serde::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1,502 samples, 2.11%)</title><rect x="33.7398%" y="565" width="2.1147%" height="15" fill="rgb(245,139,43)" fg:x="23964" fg:w="1502"/><text x="33.9898%" y="575.50">&lt;..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (187 samples, 0.26%)</title><rect x="35.5912%" y="549" width="0.2633%" height="15" fill="rgb(252,170,7)" fg:x="25279" fg:w="187"/><text x="35.8412%" y="559.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.01%)</title><rect x="35.8559%" y="565" width="0.0127%" height="15" fill="rgb(231,118,14)" fg:x="25467" fg:w="9"/><text x="36.1059%" y="575.50"></text></g><g><title>bson::de::serde::Deserializer::new (19 samples, 0.03%)</title><rect x="35.8883%" y="565" width="0.0268%" height="15" fill="rgb(238,83,0)" fg:x="25490" fg:w="19"/><text x="36.1383%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (60 samples, 0.08%)</title><rect x="35.9150%" y="565" width="0.0845%" height="15" fill="rgb(221,39,39)" fg:x="25509" fg:w="60"/><text x="36.1650%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (14 samples, 0.02%)</title><rect x="35.9995%" y="565" width="0.0197%" height="15" fill="rgb(222,119,46)" fg:x="25569" fg:w="14"/><text x="36.2495%" y="575.50"></text></g><g><title>checked_request2size (26 samples, 0.04%)</title><rect x="36.4345%" y="533" width="0.0366%" height="15" fill="rgb(222,165,49)" fg:x="25878" fg:w="26"/><text x="36.6845%" y="543.50"></text></g><g><title>__GI___libc_malloc (73 samples, 0.10%)</title><rect x="36.3796%" y="549" width="0.1028%" height="15" fill="rgb(219,113,52)" fg:x="25839" fg:w="73"/><text x="36.6296%" y="559.50"></text></g><g><title>tcache_get (8 samples, 0.01%)</title><rect x="36.4712%" y="533" width="0.0113%" height="15" fill="rgb(214,7,15)" fg:x="25904" fg:w="8"/><text x="36.7212%" y="543.50"></text></g><g><title>__memmove_avx_unaligned_erms (82 samples, 0.12%)</title><rect x="36.4824%" y="549" width="0.1155%" height="15" fill="rgb(235,32,4)" fg:x="25912" fg:w="82"/><text x="36.7324%" y="559.50"></text></g><g><title>__rdl_alloc (16 samples, 0.02%)</title><rect x="36.5979%" y="549" width="0.0225%" height="15" fill="rgb(238,90,54)" fg:x="25994" fg:w="16"/><text x="36.8479%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (16 samples, 0.02%)</title><rect x="36.5979%" y="533" width="0.0225%" height="15" fill="rgb(213,208,19)" fg:x="25994" fg:w="16"/><text x="36.8479%" y="543.50"></text></g><g><title>__rust_alloc (12 samples, 0.02%)</title><rect x="36.6204%" y="549" width="0.0169%" height="15" fill="rgb(233,156,4)" fg:x="26010" fg:w="12"/><text x="36.8704%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (198 samples, 0.28%)</title><rect x="36.9062%" y="533" width="0.2788%" height="15" fill="rgb(207,194,5)" fg:x="26213" fg:w="198"/><text x="37.1562%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (459 samples, 0.65%)</title><rect x="36.6373%" y="549" width="0.6462%" height="15" fill="rgb(206,111,30)" fg:x="26022" fg:w="459"/><text x="36.8873%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (69 samples, 0.10%)</title><rect x="37.1864%" y="533" width="0.0971%" height="15" fill="rgb(243,70,54)" fg:x="26412" fg:w="69"/><text x="37.4364%" y="543.50"></text></g><g><title>mongodb::cmap::conn::command::CommandResponse::body (3,387 samples, 4.77%)</title><rect x="32.9415%" y="693" width="4.7687%" height="15" fill="rgb(242,28,8)" fg:x="23397" fg:w="3387"/><text x="33.1915%" y="703.50">mongod..</text></g><g><title>mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::GetMoreResponseBody&gt;::deserialize (3,387 samples, 4.77%)</title><rect x="32.9415%" y="677" width="4.7687%" height="15" fill="rgb(219,106,18)" fg:x="23397" fg:w="3387"/><text x="33.1915%" y="687.50">mongod..</text></g><g><title>&lt;mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::GetMoreResponseBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (3,387 samples, 4.77%)</title><rect x="32.9415%" y="661" width="4.7687%" height="15" fill="rgb(244,222,10)" fg:x="23397" fg:w="3387"/><text x="33.1915%" y="671.50">&lt;mongo..</text></g><g><title>mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::NextBatchBody&gt;::deserialize (3,387 samples, 4.77%)</title><rect x="32.9415%" y="645" width="4.7687%" height="15" fill="rgb(236,179,52)" fg:x="23397" fg:w="3387"/><text x="33.1915%" y="655.50">mongod..</text></g><g><title>&lt;mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::NextBatchBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (3,387 samples, 4.77%)</title><rect x="32.9415%" y="629" width="4.7687%" height="15" fill="rgb(213,23,39)" fg:x="23397" fg:w="3387"/><text x="33.1915%" y="639.50">&lt;mongo..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::vec_deque::VecDeque&lt;T&gt;&gt;::deserialize (3,387 samples, 4.77%)</title><rect x="32.9415%" y="613" width="4.7687%" height="15" fill="rgb(238,48,10)" fg:x="23397" fg:w="3387"/><text x="33.1915%" y="623.50">serde:..</text></g><g><title>bson::de::serde::&lt;impl serde::de::Deserialize for bson::document::Document&gt;::deserialize (3,387 samples, 4.77%)</title><rect x="32.9415%" y="597" width="4.7687%" height="15" fill="rgb(251,196,23)" fg:x="23397" fg:w="3387"/><text x="33.1915%" y="607.50">bson::..</text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (3,387 samples, 4.77%)</title><rect x="32.9415%" y="581" width="4.7687%" height="15" fill="rgb(250,152,24)" fg:x="23397" fg:w="3387"/><text x="33.1915%" y="591.50">&lt;bson:..</text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (1,201 samples, 1.69%)</title><rect x="36.0192%" y="565" width="1.6909%" height="15" fill="rgb(209,150,17)" fg:x="25583" fg:w="1201"/><text x="36.2692%" y="575.50"></text></g><g><title>hashbrown::map::make_hash (303 samples, 0.43%)</title><rect x="37.2835%" y="549" width="0.4266%" height="15" fill="rgb(234,202,34)" fg:x="26481" fg:w="303"/><text x="37.5335%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (132 samples, 0.19%)</title><rect x="37.5243%" y="533" width="0.1858%" height="15" fill="rgb(253,148,53)" fg:x="26652" fg:w="132"/><text x="37.7743%" y="543.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (21,825 samples, 30.73%)</title><rect x="6.9834%" y="709" width="30.7282%" height="15" fill="rgb(218,129,16)" fg:x="4960" fg:w="21825"/><text x="7.2334%" y="719.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as cor..</text></g><g><title>&lt;mongodb::cursor::common::GenericCursor&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (15 samples, 0.02%)</title><rect x="37.7411%" y="693" width="0.0211%" height="15" fill="rgb(216,85,19)" fg:x="26806" fg:w="15"/><text x="37.9911%" y="703.50"></text></g><g><title>__GI___libc_free (39 samples, 0.05%)</title><rect x="38.8646%" y="629" width="0.0549%" height="15" fill="rgb(235,228,7)" fg:x="27604" fg:w="39"/><text x="39.1146%" y="639.50"></text></g><g><title>__memmove_avx_unaligned_erms (158 samples, 0.22%)</title><rect x="38.9196%" y="629" width="0.2225%" height="15" fill="rgb(245,175,0)" fg:x="27643" fg:w="158"/><text x="39.1696%" y="639.50"></text></g><g><title>__rust_dealloc (15 samples, 0.02%)</title><rect x="39.1434%" y="629" width="0.0211%" height="15" fill="rgb(208,168,36)" fg:x="27802" fg:w="15"/><text x="39.3934%" y="639.50"></text></g><g><title>_int_free (91 samples, 0.13%)</title><rect x="39.1645%" y="629" width="0.1281%" height="15" fill="rgb(246,171,24)" fg:x="27817" fg:w="91"/><text x="39.4145%" y="639.50"></text></g><g><title>tcache_put (10 samples, 0.01%)</title><rect x="39.2786%" y="613" width="0.0141%" height="15" fill="rgb(215,142,24)" fg:x="27898" fg:w="10"/><text x="39.5286%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (166 samples, 0.23%)</title><rect x="39.6038%" y="613" width="0.2337%" height="15" fill="rgb(250,187,7)" fg:x="28129" fg:w="166"/><text x="39.8538%" y="623.50"></text></g><g><title>&lt;bson::document::DocumentIntoIterator as core::iter::traits::iterator::Iterator&gt;::next (1,133 samples, 1.60%)</title><rect x="38.6689%" y="645" width="1.5952%" height="15" fill="rgb(228,66,33)" fg:x="27465" fg:w="1133"/><text x="38.9189%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (690 samples, 0.97%)</title><rect x="39.2927%" y="629" width="0.9715%" height="15" fill="rgb(234,215,21)" fg:x="27908" fg:w="690"/><text x="39.5427%" y="639.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (302 samples, 0.43%)</title><rect x="39.8389%" y="613" width="0.4252%" height="15" fill="rgb(222,191,20)" fg:x="28296" fg:w="302"/><text x="40.0889%" y="623.50"></text></g><g><title>__memcmp_avx2_movbe (54 samples, 0.08%)</title><rect x="40.1881%" y="597" width="0.0760%" height="15" fill="rgb(245,79,54)" fg:x="28544" fg:w="54"/><text x="40.4381%" y="607.50"></text></g><g><title>bson::de::serde::Deserializer::new (55 samples, 0.08%)</title><rect x="40.2641%" y="645" width="0.0774%" height="15" fill="rgb(240,10,37)" fg:x="28598" fg:w="55"/><text x="40.5141%" y="655.50"></text></g><g><title>&lt;bson::de::serde::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1,569 samples, 2.21%)</title><rect x="38.4042%" y="661" width="2.2091%" height="15" fill="rgb(214,192,32)" fg:x="27277" fg:w="1569"/><text x="38.6542%" y="671.50">&lt;..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (193 samples, 0.27%)</title><rect x="40.3416%" y="645" width="0.2717%" height="15" fill="rgb(209,36,54)" fg:x="28653" fg:w="193"/><text x="40.5916%" y="655.50"></text></g><g><title>__GI___libc_free (72 samples, 0.10%)</title><rect x="43.0054%" y="597" width="0.1014%" height="15" fill="rgb(220,10,11)" fg:x="30545" fg:w="72"/><text x="43.2554%" y="607.50"></text></g><g><title>__memmove_avx_unaligned_erms (175 samples, 0.25%)</title><rect x="43.1067%" y="597" width="0.2464%" height="15" fill="rgb(221,106,17)" fg:x="30617" fg:w="175"/><text x="43.3567%" y="607.50"></text></g><g><title>__rust_dealloc (14 samples, 0.02%)</title><rect x="43.3588%" y="597" width="0.0197%" height="15" fill="rgb(251,142,44)" fg:x="30796" fg:w="14"/><text x="43.6088%" y="607.50"></text></g><g><title>_int_free (163 samples, 0.23%)</title><rect x="43.3785%" y="597" width="0.2295%" height="15" fill="rgb(238,13,15)" fg:x="30810" fg:w="163"/><text x="43.6285%" y="607.50"></text></g><g><title>tcache_put (24 samples, 0.03%)</title><rect x="43.5742%" y="581" width="0.0338%" height="15" fill="rgb(208,107,27)" fg:x="30949" fg:w="24"/><text x="43.8242%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (332 samples, 0.47%)</title><rect x="44.1022%" y="581" width="0.4674%" height="15" fill="rgb(205,136,37)" fg:x="31324" fg:w="332"/><text x="44.3522%" y="591.50"></text></g><g><title>&lt;bson::document::DocumentIntoIterator as core::iter::traits::iterator::Iterator&gt;::next (2,077 samples, 2.92%)</title><rect x="42.6421%" y="613" width="2.9243%" height="15" fill="rgb(250,205,27)" fg:x="30287" fg:w="2077"/><text x="42.8921%" y="623.50">&lt;b..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1,391 samples, 1.96%)</title><rect x="43.6080%" y="597" width="1.9584%" height="15" fill="rgb(210,80,43)" fg:x="30973" fg:w="1391"/><text x="43.8580%" y="607.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (706 samples, 0.99%)</title><rect x="44.5724%" y="581" width="0.9940%" height="15" fill="rgb(247,160,36)" fg:x="31658" fg:w="706"/><text x="44.8224%" y="591.50"></text></g><g><title>__memcmp_avx2_movbe (143 samples, 0.20%)</title><rect x="45.3651%" y="565" width="0.2013%" height="15" fill="rgb(234,13,49)" fg:x="32221" fg:w="143"/><text x="45.6151%" y="575.50"></text></g><g><title>bson::de::serde::Deserializer::new (81 samples, 0.11%)</title><rect x="45.5664%" y="613" width="0.1140%" height="15" fill="rgb(234,122,0)" fg:x="32364" fg:w="81"/><text x="45.8164%" y="623.50"></text></g><g><title>&lt;bson::de::serde::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2,938 samples, 4.14%)</title><rect x="42.0086%" y="629" width="4.1365%" height="15" fill="rgb(207,146,38)" fg:x="29837" fg:w="2938"/><text x="42.2586%" y="639.50">&lt;bson..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (330 samples, 0.46%)</title><rect x="45.6805%" y="613" width="0.4646%" height="15" fill="rgb(207,177,25)" fg:x="32445" fg:w="330"/><text x="45.9305%" y="623.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="46.9884%" y="581" width="0.0169%" height="15" fill="rgb(211,178,42)" fg:x="33374" fg:w="12"/><text x="47.2384%" y="591.50"></text></g><g><title>_int_free (8 samples, 0.01%)</title><rect x="46.9941%" y="565" width="0.0113%" height="15" fill="rgb(230,69,54)" fg:x="33378" fg:w="8"/><text x="47.2441%" y="575.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (9 samples, 0.01%)</title><rect x="47.0335%" y="581" width="0.0127%" height="15" fill="rgb(214,135,41)" fg:x="33406" fg:w="9"/><text x="47.2835%" y="591.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (16 samples, 0.02%)</title><rect x="47.0462%" y="581" width="0.0225%" height="15" fill="rgb(237,67,25)" fg:x="33415" fg:w="16"/><text x="47.2962%" y="591.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (152 samples, 0.21%)</title><rect x="46.8561%" y="597" width="0.2140%" height="15" fill="rgb(222,189,50)" fg:x="33280" fg:w="152"/><text x="47.1061%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (167 samples, 0.24%)</title><rect x="46.8378%" y="613" width="0.2351%" height="15" fill="rgb(245,148,34)" fg:x="33267" fg:w="167"/><text x="47.0878%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (688 samples, 0.97%)</title><rect x="46.1465%" y="629" width="0.9687%" height="15" fill="rgb(222,29,6)" fg:x="32776" fg:w="688"/><text x="46.3965%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (15 samples, 0.02%)</title><rect x="47.0940%" y="613" width="0.0211%" height="15" fill="rgb(221,189,43)" fg:x="33449" fg:w="15"/><text x="47.3440%" y="623.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.03%)</title><rect x="47.1151%" y="629" width="0.0324%" height="15" fill="rgb(207,36,27)" fg:x="33464" fg:w="23"/><text x="47.3651%" y="639.50"></text></g><g><title>_int_free (15 samples, 0.02%)</title><rect x="47.1264%" y="613" width="0.0211%" height="15" fill="rgb(217,90,24)" fg:x="33472" fg:w="15"/><text x="47.3764%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (16 samples, 0.02%)</title><rect x="47.1517%" y="629" width="0.0225%" height="15" fill="rgb(224,66,35)" fg:x="33490" fg:w="16"/><text x="47.4017%" y="639.50"></text></g><g><title>_int_free (59 samples, 0.08%)</title><rect x="47.1743%" y="629" width="0.0831%" height="15" fill="rgb(221,13,50)" fg:x="33506" fg:w="59"/><text x="47.4243%" y="639.50"></text></g><g><title>bson::de::serde::Deserializer::new (106 samples, 0.15%)</title><rect x="47.2644%" y="629" width="0.1492%" height="15" fill="rgb(236,68,49)" fg:x="33570" fg:w="106"/><text x="47.5144%" y="639.50"></text></g><g><title>_int_malloc (49 samples, 0.07%)</title><rect x="47.4516%" y="597" width="0.0690%" height="15" fill="rgb(229,146,28)" fg:x="33703" fg:w="49"/><text x="47.7016%" y="607.50"></text></g><g><title>__GI___libc_malloc (66 samples, 0.09%)</title><rect x="47.4362%" y="613" width="0.0929%" height="15" fill="rgb(225,31,38)" fg:x="33692" fg:w="66"/><text x="47.6862%" y="623.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (92 samples, 0.13%)</title><rect x="47.4136%" y="629" width="0.1295%" height="15" fill="rgb(250,208,3)" fg:x="33676" fg:w="92"/><text x="47.6636%" y="639.50"></text></g><g><title>checked_request2size (33 samples, 0.05%)</title><rect x="48.3105%" y="597" width="0.0465%" height="15" fill="rgb(246,54,23)" fg:x="34313" fg:w="33"/><text x="48.5605%" y="607.50"></text></g><g><title>__GI___libc_malloc (112 samples, 0.16%)</title><rect x="48.2274%" y="613" width="0.1577%" height="15" fill="rgb(243,76,11)" fg:x="34254" fg:w="112"/><text x="48.4774%" y="623.50"></text></g><g><title>tcache_get (20 samples, 0.03%)</title><rect x="48.3569%" y="597" width="0.0282%" height="15" fill="rgb(245,21,50)" fg:x="34346" fg:w="20"/><text x="48.6069%" y="607.50"></text></g><g><title>__memmove_avx_unaligned_erms (94 samples, 0.13%)</title><rect x="48.3851%" y="613" width="0.1323%" height="15" fill="rgb(228,9,43)" fg:x="34366" fg:w="94"/><text x="48.6351%" y="623.50"></text></g><g><title>__rdl_alloc (24 samples, 0.03%)</title><rect x="48.5174%" y="613" width="0.0338%" height="15" fill="rgb(208,100,47)" fg:x="34460" fg:w="24"/><text x="48.7674%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (24 samples, 0.03%)</title><rect x="48.5174%" y="597" width="0.0338%" height="15" fill="rgb(232,26,8)" fg:x="34460" fg:w="24"/><text x="48.7674%" y="607.50"></text></g><g><title>__rust_alloc (9 samples, 0.01%)</title><rect x="48.5512%" y="613" width="0.0127%" height="15" fill="rgb(216,166,38)" fg:x="34484" fg:w="9"/><text x="48.8012%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (289 samples, 0.41%)</title><rect x="49.0257%" y="597" width="0.4069%" height="15" fill="rgb(251,202,51)" fg:x="34821" fg:w="289"/><text x="49.2757%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (803 samples, 1.13%)</title><rect x="48.5639%" y="613" width="1.1306%" height="15" fill="rgb(254,216,34)" fg:x="34493" fg:w="803"/><text x="48.8139%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (185 samples, 0.26%)</title><rect x="49.4340%" y="597" width="0.2605%" height="15" fill="rgb(251,32,27)" fg:x="35111" fg:w="185"/><text x="49.6840%" y="607.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (6,849 samples, 9.64%)</title><rect x="40.8752%" y="645" width="9.6429%" height="15" fill="rgb(208,127,28)" fg:x="29032" fg:w="6849"/><text x="41.1252%" y="655.50">&lt;bson::de::ser..</text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (2,113 samples, 2.97%)</title><rect x="47.5432%" y="629" width="2.9750%" height="15" fill="rgb(224,137,22)" fg:x="33768" fg:w="2113"/><text x="47.7932%" y="639.50">lin..</text></g><g><title>hashbrown::map::make_hash (585 samples, 0.82%)</title><rect x="49.6945%" y="613" width="0.8236%" height="15" fill="rgb(254,70,32)" fg:x="35296" fg:w="585"/><text x="49.9445%" y="623.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (291 samples, 0.41%)</title><rect x="50.1084%" y="597" width="0.4097%" height="15" fill="rgb(229,75,37)" fg:x="35590" fg:w="291"/><text x="50.3584%" y="607.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7,060 samples, 9.94%)</title><rect x="40.6175%" y="661" width="9.9400%" height="15" fill="rgb(252,64,23)" fg:x="28849" fg:w="7060"/><text x="40.8675%" y="671.50">&lt;core::marker:..</text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (25 samples, 0.04%)</title><rect x="50.5223%" y="645" width="0.0352%" height="15" fill="rgb(232,162,48)" fg:x="35884" fg:w="25"/><text x="50.7723%" y="655.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.02%)</title><rect x="50.5575%" y="661" width="0.0169%" height="15" fill="rgb(246,160,12)" fg:x="35909" fg:w="12"/><text x="50.8075%" y="671.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.01%)</title><rect x="50.5773%" y="661" width="0.0141%" height="15" fill="rgb(247,166,0)" fg:x="35923" fg:w="10"/><text x="50.8273%" y="671.50"></text></g><g><title>bson::de::serde::Deserializer::new (47 samples, 0.07%)</title><rect x="50.5970%" y="661" width="0.0662%" height="15" fill="rgb(249,219,21)" fg:x="35937" fg:w="47"/><text x="50.8470%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (19 samples, 0.03%)</title><rect x="50.6631%" y="661" width="0.0268%" height="15" fill="rgb(205,209,3)" fg:x="35984" fg:w="19"/><text x="50.9131%" y="671.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.01%)</title><rect x="50.6786%" y="645" width="0.0113%" height="15" fill="rgb(243,44,1)" fg:x="35995" fg:w="8"/><text x="50.9286%" y="655.50"></text></g><g><title>checked_request2size (20 samples, 0.03%)</title><rect x="51.1475%" y="629" width="0.0282%" height="15" fill="rgb(206,159,16)" fg:x="36328" fg:w="20"/><text x="51.3975%" y="639.50"></text></g><g><title>__GI___libc_malloc (68 samples, 0.10%)</title><rect x="51.0996%" y="645" width="0.0957%" height="15" fill="rgb(244,77,30)" fg:x="36294" fg:w="68"/><text x="51.3496%" y="655.50"></text></g><g><title>tcache_get (14 samples, 0.02%)</title><rect x="51.1756%" y="629" width="0.0197%" height="15" fill="rgb(218,69,12)" fg:x="36348" fg:w="14"/><text x="51.4256%" y="639.50"></text></g><g><title>__memmove_avx_unaligned_erms (91 samples, 0.13%)</title><rect x="51.1953%" y="645" width="0.1281%" height="15" fill="rgb(212,87,7)" fg:x="36362" fg:w="91"/><text x="51.4453%" y="655.50"></text></g><g><title>__rdl_alloc (10 samples, 0.01%)</title><rect x="51.3235%" y="645" width="0.0141%" height="15" fill="rgb(245,114,25)" fg:x="36453" fg:w="10"/><text x="51.5735%" y="655.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (10 samples, 0.01%)</title><rect x="51.3235%" y="629" width="0.0141%" height="15" fill="rgb(210,61,42)" fg:x="36453" fg:w="10"/><text x="51.5735%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (134 samples, 0.19%)</title><rect x="51.6022%" y="629" width="0.1887%" height="15" fill="rgb(211,52,33)" fg:x="36651" fg:w="134"/><text x="51.8522%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (383 samples, 0.54%)</title><rect x="51.3418%" y="645" width="0.5392%" height="15" fill="rgb(234,58,33)" fg:x="36466" fg:w="383"/><text x="51.5918%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (64 samples, 0.09%)</title><rect x="51.7909%" y="629" width="0.0901%" height="15" fill="rgb(220,115,36)" fg:x="36785" fg:w="64"/><text x="52.0409%" y="639.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (10,275 samples, 14.47%)</title><rect x="37.8059%" y="677" width="14.4665%" height="15" fill="rgb(243,153,54)" fg:x="26852" fg:w="10275"/><text x="38.0559%" y="687.50">&lt;bson::de::serde::Bson..</text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (1,124 samples, 1.58%)</title><rect x="50.6899%" y="661" width="1.5825%" height="15" fill="rgb(251,47,18)" fg:x="36003" fg:w="1124"/><text x="50.9399%" y="671.50"></text></g><g><title>hashbrown::map::make_hash (278 samples, 0.39%)</title><rect x="51.8810%" y="645" width="0.3914%" height="15" fill="rgb(242,102,42)" fg:x="36849" fg:w="278"/><text x="52.1310%" y="655.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (145 samples, 0.20%)</title><rect x="52.0683%" y="629" width="0.2042%" height="15" fill="rgb(234,31,38)" fg:x="36982" fg:w="145"/><text x="52.3183%" y="639.50"></text></g><g><title>bson::de::serde::&lt;impl serde::de::Deserialize for bson::document::Document&gt;::deserialize (10,303 samples, 14.51%)</title><rect x="37.7707%" y="693" width="14.5060%" height="15" fill="rgb(221,117,51)" fg:x="26827" fg:w="10303"/><text x="38.0207%" y="703.50">bson::de::serde::&lt;impl..</text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (10,352 samples, 14.57%)</title><rect x="37.7115%" y="709" width="14.5749%" height="15" fill="rgb(212,20,18)" fg:x="26785" fg:w="10352"/><text x="37.9615%" y="719.50">&lt;futures_util::stream:..</text></g><g><title>__GI___libc_free (317 samples, 0.45%)</title><rect x="52.7638%" y="693" width="0.4463%" height="15" fill="rgb(245,133,36)" fg:x="37476" fg:w="317"/><text x="53.0138%" y="703.50"></text></g><g><title>__rdl_dealloc (12 samples, 0.02%)</title><rect x="53.2101%" y="693" width="0.0169%" height="15" fill="rgb(212,6,19)" fg:x="37793" fg:w="12"/><text x="53.4601%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12 samples, 0.02%)</title><rect x="53.2101%" y="677" width="0.0169%" height="15" fill="rgb(218,1,36)" fg:x="37793" fg:w="12"/><text x="53.4601%" y="687.50"></text></g><g><title>__rust_dealloc (24 samples, 0.03%)</title><rect x="53.2270%" y="693" width="0.0338%" height="15" fill="rgb(246,84,54)" fg:x="37805" fg:w="24"/><text x="53.4770%" y="703.50"></text></g><g><title>free_perturb (27 samples, 0.04%)</title><rect x="54.0915%" y="677" width="0.0380%" height="15" fill="rgb(242,110,6)" fg:x="38419" fg:w="27"/><text x="54.3415%" y="687.50"></text></g><g><title>malloc_consolidate (714 samples, 1.01%)</title><rect x="54.1295%" y="677" width="1.0053%" height="15" fill="rgb(214,47,5)" fg:x="38446" fg:w="714"/><text x="54.3795%" y="687.50"></text></g><g><title>unlink_chunk (281 samples, 0.40%)</title><rect x="54.7391%" y="661" width="0.3956%" height="15" fill="rgb(218,159,25)" fg:x="38879" fg:w="281"/><text x="54.9891%" y="671.50"></text></g><g><title>_int_free (1,371 samples, 1.93%)</title><rect x="53.2608%" y="693" width="1.9303%" height="15" fill="rgb(215,211,28)" fg:x="37829" fg:w="1371"/><text x="53.5108%" y="703.50">_..</text></g><g><title>unlink_chunk (40 samples, 0.06%)</title><rect x="55.1347%" y="677" width="0.0563%" height="15" fill="rgb(238,59,32)" fg:x="39160" fg:w="40"/><text x="55.3847%" y="687.50"></text></g><g><title>__GI___libc_free (533 samples, 0.75%)</title><rect x="55.8556%" y="661" width="0.7504%" height="15" fill="rgb(226,82,3)" fg:x="39672" fg:w="533"/><text x="56.1056%" y="671.50"></text></g><g><title>__rdl_dealloc (24 samples, 0.03%)</title><rect x="56.6060%" y="661" width="0.0338%" height="15" fill="rgb(240,164,32)" fg:x="40205" fg:w="24"/><text x="56.8560%" y="671.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (24 samples, 0.03%)</title><rect x="56.6060%" y="645" width="0.0338%" height="15" fill="rgb(232,46,7)" fg:x="40205" fg:w="24"/><text x="56.8560%" y="655.50"></text></g><g><title>__rust_dealloc (32 samples, 0.05%)</title><rect x="56.6398%" y="661" width="0.0451%" height="15" fill="rgb(229,129,53)" fg:x="40229" fg:w="32"/><text x="56.8898%" y="671.50"></text></g><g><title>free_perturb (51 samples, 0.07%)</title><rect x="58.0590%" y="645" width="0.0718%" height="15" fill="rgb(234,188,29)" fg:x="41237" fg:w="51"/><text x="58.3090%" y="655.50"></text></g><g><title>_int_free (1,039 samples, 1.46%)</title><rect x="56.6849%" y="661" width="1.4628%" height="15" fill="rgb(246,141,4)" fg:x="40261" fg:w="1039"/><text x="56.9349%" y="671.50"></text></g><g><title>_int_free (23 samples, 0.03%)</title><rect x="58.2364%" y="645" width="0.0324%" height="15" fill="rgb(229,23,39)" fg:x="41363" fg:w="23"/><text x="58.4864%" y="655.50"></text></g><g><title>__GI___libc_free (49 samples, 0.07%)</title><rect x="58.3617%" y="613" width="0.0690%" height="15" fill="rgb(206,12,3)" fg:x="41452" fg:w="49"/><text x="58.6117%" y="623.50"></text></g><g><title>_int_free (134 samples, 0.19%)</title><rect x="58.4335%" y="613" width="0.1887%" height="15" fill="rgb(252,226,20)" fg:x="41503" fg:w="134"/><text x="58.6835%" y="623.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (4,521 samples, 6.37%)</title><rect x="52.2865%" y="709" width="6.3653%" height="15" fill="rgb(216,123,35)" fg:x="37137" fg:w="4521"/><text x="52.5365%" y="719.50">&lt;linked_..</text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (2,458 samples, 3.46%)</title><rect x="55.1911%" y="693" width="3.4607%" height="15" fill="rgb(212,68,40)" fg:x="39200" fg:w="2458"/><text x="55.4411%" y="703.50">cor..</text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (2,433 samples, 3.43%)</title><rect x="55.2263%" y="677" width="3.4255%" height="15" fill="rgb(254,125,32)" fg:x="39225" fg:w="2433"/><text x="55.4763%" y="687.50">&lt;li..</text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (358 samples, 0.50%)</title><rect x="58.1477%" y="661" width="0.5040%" height="15" fill="rgb(253,97,22)" fg:x="41300" fg:w="358"/><text x="58.3977%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (272 samples, 0.38%)</title><rect x="58.2688%" y="645" width="0.3830%" height="15" fill="rgb(241,101,14)" fg:x="41386" fg:w="272"/><text x="58.5188%" y="655.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (263 samples, 0.37%)</title><rect x="58.2815%" y="629" width="0.3703%" height="15" fill="rgb(238,103,29)" fg:x="41395" fg:w="263"/><text x="58.5315%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (21 samples, 0.03%)</title><rect x="58.6222%" y="613" width="0.0296%" height="15" fill="rgb(233,195,47)" fg:x="41637" fg:w="21"/><text x="58.8722%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (11 samples, 0.02%)</title><rect x="58.6363%" y="597" width="0.0155%" height="15" fill="rgb(246,218,30)" fg:x="41647" fg:w="11"/><text x="58.8863%" y="607.50"></text></g><g><title>&lt;bson::document::DocumentIntoIterator as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.01%)</title><rect x="58.6574%" y="549" width="0.0141%" height="15" fill="rgb(219,145,47)" fg:x="41662" fg:w="10"/><text x="58.9074%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (8 samples, 0.01%)</title><rect x="58.6602%" y="533" width="0.0113%" height="15" fill="rgb(243,12,26)" fg:x="41664" fg:w="8"/><text x="58.9102%" y="543.50"></text></g><g><title>&lt;bson::de::serde::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (12 samples, 0.02%)</title><rect x="58.6574%" y="565" width="0.0169%" height="15" fill="rgb(214,87,16)" fg:x="41662" fg:w="12"/><text x="58.9074%" y="575.50"></text></g><g><title>&lt;mongodb::operation::find::Find as mongodb::operation::Operation&gt;::handle_response (22 samples, 0.03%)</title><rect x="58.6518%" y="709" width="0.0310%" height="15" fill="rgb(208,99,42)" fg:x="41658" fg:w="22"/><text x="58.9018%" y="719.50"></text></g><g><title>mongodb::cmap::conn::command::CommandResponse::body (22 samples, 0.03%)</title><rect x="58.6518%" y="693" width="0.0310%" height="15" fill="rgb(253,99,2)" fg:x="41658" fg:w="22"/><text x="58.9018%" y="703.50"></text></g><g><title>mongodb::operation::_::&lt;impl serde::de::Deserialize for mongodb::operation::CursorBody&gt;::deserialize (22 samples, 0.03%)</title><rect x="58.6518%" y="677" width="0.0310%" height="15" fill="rgb(220,168,23)" fg:x="41658" fg:w="22"/><text x="58.9018%" y="687.50"></text></g><g><title>&lt;mongodb::operation::_::&lt;impl serde::de::Deserialize for mongodb::operation::CursorBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (22 samples, 0.03%)</title><rect x="58.6518%" y="661" width="0.0310%" height="15" fill="rgb(242,38,24)" fg:x="41658" fg:w="22"/><text x="58.9018%" y="671.50"></text></g><g><title>mongodb::operation::_::&lt;impl serde::de::Deserialize for mongodb::operation::CursorInfo&gt;::deserialize (22 samples, 0.03%)</title><rect x="58.6518%" y="645" width="0.0310%" height="15" fill="rgb(225,182,9)" fg:x="41658" fg:w="22"/><text x="58.9018%" y="655.50"></text></g><g><title>&lt;mongodb::operation::_::&lt;impl serde::de::Deserialize for mongodb::operation::CursorInfo&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (22 samples, 0.03%)</title><rect x="58.6518%" y="629" width="0.0310%" height="15" fill="rgb(243,178,37)" fg:x="41658" fg:w="22"/><text x="58.9018%" y="639.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::vec_deque::VecDeque&lt;T&gt;&gt;::deserialize (22 samples, 0.03%)</title><rect x="58.6518%" y="613" width="0.0310%" height="15" fill="rgb(232,139,19)" fg:x="41658" fg:w="22"/><text x="58.9018%" y="623.50"></text></g><g><title>bson::de::serde::&lt;impl serde::de::Deserialize for bson::document::Document&gt;::deserialize (22 samples, 0.03%)</title><rect x="58.6518%" y="597" width="0.0310%" height="15" fill="rgb(225,201,24)" fg:x="41658" fg:w="22"/><text x="58.9018%" y="607.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (22 samples, 0.03%)</title><rect x="58.6518%" y="581" width="0.0310%" height="15" fill="rgb(221,47,46)" fg:x="41658" fg:w="22"/><text x="58.9018%" y="591.50"></text></g><g><title>[my-bench] (8 samples, 0.01%)</title><rect x="58.6827%" y="709" width="0.0113%" height="15" fill="rgb(249,23,13)" fg:x="41680" fg:w="8"/><text x="58.9327%" y="719.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.01%)</title><rect x="58.6827%" y="693" width="0.0113%" height="15" fill="rgb(219,9,5)" fg:x="41680" fg:w="8"/><text x="58.9327%" y="703.50"></text></g><g><title>_int_free (23 samples, 0.03%)</title><rect x="58.7010%" y="709" width="0.0324%" height="15" fill="rgb(254,171,16)" fg:x="41693" fg:w="23"/><text x="58.9510%" y="719.50"></text></g><g><title>__GI___libc_free (11 samples, 0.02%)</title><rect x="59.2727%" y="501" width="0.0155%" height="15" fill="rgb(230,171,20)" fg:x="42099" fg:w="11"/><text x="59.5227%" y="511.50"></text></g><g><title>__libc_calloc (76 samples, 0.11%)</title><rect x="59.2881%" y="501" width="0.1070%" height="15" fill="rgb(210,71,41)" fg:x="42110" fg:w="76"/><text x="59.5381%" y="511.50"></text></g><g><title>_int_malloc (51 samples, 0.07%)</title><rect x="59.3233%" y="485" width="0.0718%" height="15" fill="rgb(206,173,20)" fg:x="42135" fg:w="51"/><text x="59.5733%" y="495.50"></text></g><g><title>_int_free (21 samples, 0.03%)</title><rect x="59.4106%" y="501" width="0.0296%" height="15" fill="rgb(233,88,34)" fg:x="42197" fg:w="21"/><text x="59.6606%" y="511.50"></text></g><g><title>_int_malloc (17 samples, 0.02%)</title><rect x="59.4501%" y="453" width="0.0239%" height="15" fill="rgb(223,209,46)" fg:x="42225" fg:w="17"/><text x="59.7001%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (25 samples, 0.04%)</title><rect x="59.4402%" y="501" width="0.0352%" height="15" fill="rgb(250,43,18)" fg:x="42218" fg:w="25"/><text x="59.6902%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 0.03%)</title><rect x="59.4458%" y="485" width="0.0296%" height="15" fill="rgb(208,13,10)" fg:x="42222" fg:w="21"/><text x="59.6958%" y="495.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.03%)</title><rect x="59.4472%" y="469" width="0.0282%" height="15" fill="rgb(212,200,36)" fg:x="42223" fg:w="20"/><text x="59.6972%" y="479.50"></text></g><g><title>checked_request2size (26 samples, 0.04%)</title><rect x="62.9755%" y="421" width="0.0366%" height="15" fill="rgb(225,90,30)" fg:x="44729" fg:w="26"/><text x="63.2255%" y="431.50"></text></g><g><title>_int_malloc (558 samples, 0.79%)</title><rect x="62.2279%" y="437" width="0.7856%" height="15" fill="rgb(236,182,39)" fg:x="44198" fg:w="558"/><text x="62.4779%" y="447.50"></text></g><g><title>__GI___libc_malloc (713 samples, 1.00%)</title><rect x="62.0181%" y="453" width="1.0039%" height="15" fill="rgb(212,144,35)" fg:x="44049" fg:w="713"/><text x="62.2681%" y="463.50"></text></g><g><title>_int_realloc (134 samples, 0.19%)</title><rect x="63.3402%" y="437" width="0.1887%" height="15" fill="rgb(228,63,44)" fg:x="44988" fg:w="134"/><text x="63.5902%" y="447.50"></text></g><g><title>unlink_chunk (16 samples, 0.02%)</title><rect x="63.5063%" y="421" width="0.0225%" height="15" fill="rgb(228,109,6)" fg:x="45106" fg:w="16"/><text x="63.7563%" y="431.50"></text></g><g><title>__GI___libc_realloc (399 samples, 0.56%)</title><rect x="63.0220%" y="453" width="0.5618%" height="15" fill="rgb(238,117,24)" fg:x="44762" fg:w="399"/><text x="63.2720%" y="463.50"></text></g><g><title>checked_request2size (39 samples, 0.05%)</title><rect x="63.5288%" y="437" width="0.0549%" height="15" fill="rgb(242,26,26)" fg:x="45122" fg:w="39"/><text x="63.7788%" y="447.50"></text></g><g><title>__rdl_alloc (15 samples, 0.02%)</title><rect x="63.5838%" y="453" width="0.0211%" height="15" fill="rgb(221,92,48)" fg:x="45161" fg:w="15"/><text x="63.8338%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (15 samples, 0.02%)</title><rect x="63.5838%" y="437" width="0.0211%" height="15" fill="rgb(209,209,32)" fg:x="45161" fg:w="15"/><text x="63.8338%" y="447.50"></text></g><g><title>__rdl_realloc (21 samples, 0.03%)</title><rect x="63.6049%" y="453" width="0.0296%" height="15" fill="rgb(221,70,22)" fg:x="45176" fg:w="21"/><text x="63.8549%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (13 samples, 0.02%)</title><rect x="63.6161%" y="437" width="0.0183%" height="15" fill="rgb(248,145,5)" fg:x="45184" fg:w="13"/><text x="63.8661%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,446 samples, 2.04%)</title><rect x="61.6295%" y="485" width="2.0359%" height="15" fill="rgb(226,116,26)" fg:x="43773" fg:w="1446"/><text x="61.8795%" y="495.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (1,281 samples, 1.80%)</title><rect x="61.8619%" y="469" width="1.8036%" height="15" fill="rgb(244,5,17)" fg:x="43938" fg:w="1281"/><text x="62.1119%" y="479.50">a..</text></g><g><title>__rust_realloc (15 samples, 0.02%)</title><rect x="63.6443%" y="453" width="0.0211%" height="15" fill="rgb(252,159,33)" fg:x="45204" fg:w="15"/><text x="63.8943%" y="463.50"></text></g><g><title>bson::de::read_cstring (3,290 samples, 4.63%)</title><rect x="59.4754%" y="501" width="4.6321%" height="15" fill="rgb(206,71,0)" fg:x="42243" fg:w="3290"/><text x="59.7254%" y="511.50">bson:..</text></g><g><title>core::str::converts::from_utf8 (314 samples, 0.44%)</title><rect x="63.6654%" y="485" width="0.4421%" height="15" fill="rgb(233,118,54)" fg:x="45219" fg:w="314"/><text x="63.9154%" y="495.50"></text></g><g><title>core::str::validations::run_utf8_validation (290 samples, 0.41%)</title><rect x="63.6992%" y="469" width="0.4083%" height="15" fill="rgb(234,83,48)" fg:x="45243" fg:w="290"/><text x="63.9492%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (19 samples, 0.03%)</title><rect x="64.0808%" y="453" width="0.0268%" height="15" fill="rgb(228,3,54)" fg:x="45514" fg:w="19"/><text x="64.3308%" y="463.50"></text></g><g><title>checked_request2size (9 samples, 0.01%)</title><rect x="64.6355%" y="453" width="0.0127%" height="15" fill="rgb(226,155,13)" fg:x="45908" fg:w="9"/><text x="64.8855%" y="463.50"></text></g><g><title>_int_malloc (284 samples, 0.40%)</title><rect x="64.2821%" y="469" width="0.3999%" height="15" fill="rgb(241,28,37)" fg:x="45657" fg:w="284"/><text x="64.5321%" y="479.50"></text></g><g><title>unlink_chunk (23 samples, 0.03%)</title><rect x="64.6496%" y="453" width="0.0324%" height="15" fill="rgb(233,93,10)" fg:x="45918" fg:w="23"/><text x="64.8996%" y="463.50"></text></g><g><title>__GI___libc_malloc (358 samples, 0.50%)</title><rect x="64.1962%" y="485" width="0.5040%" height="15" fill="rgb(225,113,19)" fg:x="45596" fg:w="358"/><text x="64.4462%" y="495.50"></text></g><g><title>tcache_get (8 samples, 0.01%)</title><rect x="64.6890%" y="469" width="0.0113%" height="15" fill="rgb(241,2,18)" fg:x="45946" fg:w="8"/><text x="64.9390%" y="479.50"></text></g><g><title>&lt;std::io::Guard as core::ops::drop::Drop&gt;::drop (18 samples, 0.03%)</title><rect x="65.0030%" y="469" width="0.0253%" height="15" fill="rgb(228,207,21)" fg:x="46169" fg:w="18"/><text x="65.2530%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (34 samples, 0.05%)</title><rect x="65.0283%" y="469" width="0.0479%" height="15" fill="rgb(213,211,35)" fg:x="46187" fg:w="34"/><text x="65.2783%" y="479.50"></text></g><g><title>_int_realloc (71 samples, 0.10%)</title><rect x="65.2676%" y="421" width="0.1000%" height="15" fill="rgb(209,83,10)" fg:x="46357" fg:w="71"/><text x="65.5176%" y="431.50"></text></g><g><title>unlink_chunk (11 samples, 0.02%)</title><rect x="65.3521%" y="405" width="0.0155%" height="15" fill="rgb(209,164,1)" fg:x="46417" fg:w="11"/><text x="65.6021%" y="415.50"></text></g><g><title>__GI___libc_realloc (150 samples, 0.21%)</title><rect x="65.1719%" y="437" width="0.2112%" height="15" fill="rgb(213,184,43)" fg:x="46289" fg:w="150"/><text x="65.4219%" y="447.50"></text></g><g><title>checked_request2size (11 samples, 0.02%)</title><rect x="65.3676%" y="421" width="0.0155%" height="15" fill="rgb(231,61,34)" fg:x="46428" fg:w="11"/><text x="65.6176%" y="431.50"></text></g><g><title>__rdl_realloc (21 samples, 0.03%)</title><rect x="65.3831%" y="437" width="0.0296%" height="15" fill="rgb(235,75,3)" fg:x="46439" fg:w="21"/><text x="65.6331%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (13 samples, 0.02%)</title><rect x="65.3944%" y="421" width="0.0183%" height="15" fill="rgb(220,106,47)" fg:x="46447" fg:w="13"/><text x="65.6444%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (246 samples, 0.35%)</title><rect x="65.0762%" y="469" width="0.3464%" height="15" fill="rgb(210,196,33)" fg:x="46221" fg:w="246"/><text x="65.3262%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (203 samples, 0.29%)</title><rect x="65.1367%" y="453" width="0.2858%" height="15" fill="rgb(229,154,42)" fg:x="46264" fg:w="203"/><text x="65.3867%" y="463.50"></text></g><g><title>bson::de::deserialize_bson_kvp (4,886 samples, 6.88%)</title><rect x="58.7334%" y="517" width="6.8792%" height="15" fill="rgb(228,114,26)" fg:x="41716" fg:w="4886"/><text x="58.9834%" y="527.50">bson::de:..</text></g><g><title>bson::de::read_string (1,069 samples, 1.51%)</title><rect x="64.1075%" y="501" width="1.5051%" height="15" fill="rgb(208,144,1)" fg:x="45533" fg:w="1069"/><text x="64.3575%" y="511.50"></text></g><g><title>std::io::Read::read_to_string (642 samples, 0.90%)</title><rect x="64.7087%" y="485" width="0.9039%" height="15" fill="rgb(239,112,37)" fg:x="45960" fg:w="642"/><text x="64.9587%" y="495.50"></text></g><g><title>core::str::converts::from_utf8 (135 samples, 0.19%)</title><rect x="65.4225%" y="469" width="0.1901%" height="15" fill="rgb(210,96,50)" fg:x="46467" fg:w="135"/><text x="65.6725%" y="479.50"></text></g><g><title>core::str::validations::run_utf8_validation (133 samples, 0.19%)</title><rect x="65.4253%" y="453" width="0.1873%" height="15" fill="rgb(222,178,2)" fg:x="46469" fg:w="133"/><text x="65.6753%" y="463.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="67.0768%" y="469" width="0.0127%" height="15" fill="rgb(226,74,18)" fg:x="47642" fg:w="9"/><text x="67.3268%" y="479.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="67.0783%" y="453" width="0.0113%" height="15" fill="rgb(225,67,54)" fg:x="47643" fg:w="8"/><text x="67.3283%" y="463.50"></text></g><g><title>alloc_perturb (8 samples, 0.01%)</title><rect x="67.0895%" y="469" width="0.0113%" height="15" fill="rgb(251,92,32)" fg:x="47651" fg:w="8"/><text x="67.3395%" y="479.50"></text></g><g><title>checked_request2size (31 samples, 0.04%)</title><rect x="67.1008%" y="469" width="0.0436%" height="15" fill="rgb(228,149,22)" fg:x="47659" fg:w="31"/><text x="67.3508%" y="479.50"></text></g><g><title>get_max_fast (8 samples, 0.01%)</title><rect x="67.1444%" y="469" width="0.0113%" height="15" fill="rgb(243,54,13)" fg:x="47690" fg:w="8"/><text x="67.3944%" y="479.50"></text></g><g><title>_int_malloc (939 samples, 1.32%)</title><rect x="65.9266%" y="485" width="1.3221%" height="15" fill="rgb(243,180,28)" fg:x="46825" fg:w="939"/><text x="66.1766%" y="495.50"></text></g><g><title>unlink_chunk (66 samples, 0.09%)</title><rect x="67.1557%" y="469" width="0.0929%" height="15" fill="rgb(208,167,24)" fg:x="47698" fg:w="66"/><text x="67.4057%" y="479.50"></text></g><g><title>__GI___libc_malloc (1,197 samples, 1.69%)</title><rect x="65.6126%" y="501" width="1.6853%" height="15" fill="rgb(245,73,45)" fg:x="46602" fg:w="1197"/><text x="65.8626%" y="511.50"></text></g><g><title>checked_request2size (35 samples, 0.05%)</title><rect x="67.2486%" y="485" width="0.0493%" height="15" fill="rgb(237,203,48)" fg:x="47764" fg:w="35"/><text x="67.4986%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (318 samples, 0.45%)</title><rect x="67.9089%" y="485" width="0.4477%" height="15" fill="rgb(211,197,16)" fg:x="48233" fg:w="318"/><text x="68.1589%" y="495.50"></text></g><g><title>_int_free (10 samples, 0.01%)</title><rect x="69.1127%" y="453" width="0.0141%" height="15" fill="rgb(243,99,51)" fg:x="49088" fg:w="10"/><text x="69.3627%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (529 samples, 0.74%)</title><rect x="69.9533%" y="437" width="0.7448%" height="15" fill="rgb(215,123,29)" fg:x="49685" fg:w="529"/><text x="70.2033%" y="447.50"></text></g><g><title>hashbrown::map::make_hash (1,117 samples, 1.57%)</title><rect x="69.1268%" y="453" width="1.5727%" height="15" fill="rgb(239,186,37)" fg:x="49098" fg:w="1117"/><text x="69.3768%" y="463.50"></text></g><g><title>_int_malloc (97 samples, 0.14%)</title><rect x="70.7600%" y="421" width="0.1366%" height="15" fill="rgb(252,136,39)" fg:x="50258" fg:w="97"/><text x="71.0100%" y="431.50"></text></g><g><title>checked_request2size (8 samples, 0.01%)</title><rect x="70.8966%" y="421" width="0.0113%" height="15" fill="rgb(223,213,32)" fg:x="50355" fg:w="8"/><text x="71.1466%" y="431.50"></text></g><g><title>__GI___libc_malloc (134 samples, 0.19%)</title><rect x="70.7290%" y="437" width="0.1887%" height="15" fill="rgb(233,115,5)" fg:x="50236" fg:w="134"/><text x="70.9790%" y="447.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2,577 samples, 3.63%)</title><rect x="67.3049%" y="501" width="3.6282%" height="15" fill="rgb(207,226,44)" fg:x="47804" fg:w="2577"/><text x="67.5549%" y="511.50">hash..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,828 samples, 2.57%)</title><rect x="68.3595%" y="485" width="2.5737%" height="15" fill="rgb(208,126,0)" fg:x="48553" fg:w="1828"/><text x="68.6095%" y="495.50">ha..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1,657 samples, 2.33%)</title><rect x="68.6002%" y="469" width="2.3329%" height="15" fill="rgb(244,66,21)" fg:x="48724" fg:w="1657"/><text x="68.8502%" y="479.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (166 samples, 0.23%)</title><rect x="70.6995%" y="453" width="0.2337%" height="15" fill="rgb(222,97,12)" fg:x="50215" fg:w="166"/><text x="70.9495%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (311 samples, 0.44%)</title><rect x="71.2894%" y="485" width="0.4379%" height="15" fill="rgb(219,213,19)" fg:x="50634" fg:w="311"/><text x="71.5394%" y="495.50"></text></g><g><title>bson::document::Document::from_reader (9,230 samples, 13.00%)</title><rect x="58.7334%" y="709" width="12.9952%" height="15" fill="rgb(252,169,30)" fg:x="41716" fg:w="9230"/><text x="58.9834%" y="719.50">bson::document::Docu..</text></g><g><title>bson::de::ensure_read_exactly (9,230 samples, 13.00%)</title><rect x="58.7334%" y="693" width="12.9952%" height="15" fill="rgb(206,32,51)" fg:x="41716" fg:w="9230"/><text x="58.9834%" y="703.50">bson::de::ensure_rea..</text></g><g><title>bson::de::deserialize_bson_kvp (9,230 samples, 13.00%)</title><rect x="58.7334%" y="677" width="12.9952%" height="15" fill="rgb(250,172,42)" fg:x="41716" fg:w="9230"/><text x="58.9834%" y="687.50">bson::de::deserializ..</text></g><g><title>bson::document::Document::from_reader (9,230 samples, 13.00%)</title><rect x="58.7334%" y="661" width="12.9952%" height="15" fill="rgb(209,34,43)" fg:x="41716" fg:w="9230"/><text x="58.9834%" y="671.50">bson::document::Docu..</text></g><g><title>bson::de::ensure_read_exactly (9,230 samples, 13.00%)</title><rect x="58.7334%" y="645" width="12.9952%" height="15" fill="rgb(223,11,35)" fg:x="41716" fg:w="9230"/><text x="58.9834%" y="655.50">bson::de::ensure_rea..</text></g><g><title>bson::de::deserialize_bson_kvp (9,230 samples, 13.00%)</title><rect x="58.7334%" y="629" width="12.9952%" height="15" fill="rgb(251,219,26)" fg:x="41716" fg:w="9230"/><text x="58.9834%" y="639.50">bson::de::deserializ..</text></g><g><title>bson::de::deserialize_bson_kvp (9,230 samples, 13.00%)</title><rect x="58.7334%" y="613" width="12.9952%" height="15" fill="rgb(231,119,3)" fg:x="41716" fg:w="9230"/><text x="58.9834%" y="623.50">bson::de::deserializ..</text></g><g><title>bson::document::Document::from_reader (9,230 samples, 13.00%)</title><rect x="58.7334%" y="597" width="12.9952%" height="15" fill="rgb(216,97,11)" fg:x="41716" fg:w="9230"/><text x="58.9834%" y="607.50">bson::document::Docu..</text></g><g><title>bson::de::ensure_read_exactly (9,230 samples, 13.00%)</title><rect x="58.7334%" y="581" width="12.9952%" height="15" fill="rgb(223,59,9)" fg:x="41716" fg:w="9230"/><text x="58.9834%" y="591.50">bson::de::ensure_rea..</text></g><g><title>bson::de::deserialize_bson_kvp (9,230 samples, 13.00%)</title><rect x="58.7334%" y="565" width="12.9952%" height="15" fill="rgb(233,93,31)" fg:x="41716" fg:w="9230"/><text x="58.9834%" y="575.50">bson::de::deserializ..</text></g><g><title>bson::document::Document::from_reader (9,230 samples, 13.00%)</title><rect x="58.7334%" y="549" width="12.9952%" height="15" fill="rgb(239,81,33)" fg:x="41716" fg:w="9230"/><text x="58.9834%" y="559.50">bson::document::Docu..</text></g><g><title>bson::de::ensure_read_exactly (9,230 samples, 13.00%)</title><rect x="58.7334%" y="533" width="12.9952%" height="15" fill="rgb(213,120,34)" fg:x="41716" fg:w="9230"/><text x="58.9834%" y="543.50">bson::de::ensure_rea..</text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (4,344 samples, 6.12%)</title><rect x="65.6126%" y="517" width="6.1161%" height="15" fill="rgb(243,49,53)" fg:x="46602" fg:w="4344"/><text x="65.8626%" y="527.50">linked_h..</text></g><g><title>hashbrown::map::make_hash (565 samples, 0.80%)</title><rect x="70.9332%" y="501" width="0.7955%" height="15" fill="rgb(247,216,33)" fg:x="50381" fg:w="565"/><text x="71.1832%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.01%)</title><rect x="71.7357%" y="517" width="0.0141%" height="15" fill="rgb(226,26,14)" fg:x="50951" fg:w="10"/><text x="71.9857%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.01%)</title><rect x="71.7371%" y="501" width="0.0127%" height="15" fill="rgb(215,49,53)" fg:x="50952" fg:w="9"/><text x="71.9871%" y="511.50"></text></g><g><title>bson::de::read_cstring (15 samples, 0.02%)</title><rect x="71.7301%" y="533" width="0.0211%" height="15" fill="rgb(245,162,40)" fg:x="50947" fg:w="15"/><text x="71.9801%" y="543.50"></text></g><g><title>bson::de::deserialize_bson_kvp (20 samples, 0.03%)</title><rect x="71.7287%" y="549" width="0.0282%" height="15" fill="rgb(229,68,17)" fg:x="50946" fg:w="20"/><text x="71.9787%" y="559.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (46,024 samples, 64.80%)</title><rect x="6.9777%" y="725" width="64.7988%" height="15" fill="rgb(213,182,10)" fg:x="4956" fg:w="46024"/><text x="7.2277%" y="735.50">&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>mongodb::cmap::conn::Connection::send_command::{{closure}} (34 samples, 0.05%)</title><rect x="71.7287%" y="709" width="0.0479%" height="15" fill="rgb(245,125,30)" fg:x="50946" fg:w="34"/><text x="71.9787%" y="719.50"></text></g><g><title>bson::document::Document::from_reader (34 samples, 0.05%)</title><rect x="71.7287%" y="693" width="0.0479%" height="15" fill="rgb(232,202,2)" fg:x="50946" fg:w="34"/><text x="71.9787%" y="703.50"></text></g><g><title>bson::de::ensure_read_exactly (34 samples, 0.05%)</title><rect x="71.7287%" y="677" width="0.0479%" height="15" fill="rgb(237,140,51)" fg:x="50946" fg:w="34"/><text x="71.9787%" y="687.50"></text></g><g><title>bson::de::deserialize_bson_kvp (34 samples, 0.05%)</title><rect x="71.7287%" y="661" width="0.0479%" height="15" fill="rgb(236,157,25)" fg:x="50946" fg:w="34"/><text x="71.9787%" y="671.50"></text></g><g><title>bson::document::Document::from_reader (34 samples, 0.05%)</title><rect x="71.7287%" y="645" width="0.0479%" height="15" fill="rgb(219,209,0)" fg:x="50946" fg:w="34"/><text x="71.9787%" y="655.50"></text></g><g><title>bson::de::ensure_read_exactly (34 samples, 0.05%)</title><rect x="71.7287%" y="629" width="0.0479%" height="15" fill="rgb(240,116,54)" fg:x="50946" fg:w="34"/><text x="71.9787%" y="639.50"></text></g><g><title>bson::de::deserialize_bson_kvp (34 samples, 0.05%)</title><rect x="71.7287%" y="613" width="0.0479%" height="15" fill="rgb(216,10,36)" fg:x="50946" fg:w="34"/><text x="71.9787%" y="623.50"></text></g><g><title>bson::de::deserialize_bson_kvp (34 samples, 0.05%)</title><rect x="71.7287%" y="597" width="0.0479%" height="15" fill="rgb(222,72,44)" fg:x="50946" fg:w="34"/><text x="71.9787%" y="607.50"></text></g><g><title>bson::document::Document::from_reader (34 samples, 0.05%)</title><rect x="71.7287%" y="581" width="0.0479%" height="15" fill="rgb(232,159,9)" fg:x="50946" fg:w="34"/><text x="71.9787%" y="591.50"></text></g><g><title>bson::de::ensure_read_exactly (34 samples, 0.05%)</title><rect x="71.7287%" y="565" width="0.0479%" height="15" fill="rgb(210,39,32)" fg:x="50946" fg:w="34"/><text x="71.9787%" y="575.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (14 samples, 0.02%)</title><rect x="71.7568%" y="549" width="0.0197%" height="15" fill="rgb(216,194,45)" fg:x="50966" fg:w="14"/><text x="72.0068%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8 samples, 0.01%)</title><rect x="71.7653%" y="533" width="0.0113%" height="15" fill="rgb(218,18,35)" fg:x="50972" fg:w="8"/><text x="72.0153%" y="543.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (92 samples, 0.13%)</title><rect x="71.7765%" y="725" width="0.1295%" height="15" fill="rgb(207,83,51)" fg:x="50980" fg:w="92"/><text x="72.0265%" y="735.50"></text></g><g><title>_int_free (2,964 samples, 4.17%)</title><rect x="71.9075%" y="581" width="4.1731%" height="15" fill="rgb(225,63,43)" fg:x="51073" fg:w="2964"/><text x="72.1575%" y="591.50">_int_..</text></g><g><title>malloc_consolidate (2,964 samples, 4.17%)</title><rect x="71.9075%" y="565" width="4.1731%" height="15" fill="rgb(207,57,36)" fg:x="51073" fg:w="2964"/><text x="72.1575%" y="575.50">mallo..</text></g><g><title>unlink_chunk (1,142 samples, 1.61%)</title><rect x="74.4727%" y="549" width="1.6079%" height="15" fill="rgb(216,99,33)" fg:x="52895" fg:w="1142"/><text x="74.7227%" y="559.50"></text></g><g><title>_int_free (15 samples, 0.02%)</title><rect x="76.0834%" y="565" width="0.0211%" height="15" fill="rgb(225,42,16)" fg:x="54039" fg:w="15"/><text x="76.3334%" y="575.50"></text></g><g><title>__GI___libc_free (338 samples, 0.48%)</title><rect x="76.6438%" y="533" width="0.4759%" height="15" fill="rgb(220,201,45)" fg:x="54437" fg:w="338"/><text x="76.8938%" y="543.50"></text></g><g><title>__rdl_dealloc (11 samples, 0.02%)</title><rect x="77.1196%" y="533" width="0.0155%" height="15" fill="rgb(225,33,4)" fg:x="54775" fg:w="11"/><text x="77.3696%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (11 samples, 0.02%)</title><rect x="77.1196%" y="517" width="0.0155%" height="15" fill="rgb(224,33,50)" fg:x="54775" fg:w="11"/><text x="77.3696%" y="527.50"></text></g><g><title>__rust_dealloc (18 samples, 0.03%)</title><rect x="77.1351%" y="533" width="0.0253%" height="15" fill="rgb(246,198,51)" fg:x="54786" fg:w="18"/><text x="77.3851%" y="543.50"></text></g><g><title>free_perturb (20 samples, 0.03%)</title><rect x="77.9306%" y="517" width="0.0282%" height="15" fill="rgb(205,22,4)" fg:x="55351" fg:w="20"/><text x="78.1806%" y="527.50"></text></g><g><title>_int_free (571 samples, 0.80%)</title><rect x="77.1605%" y="533" width="0.8039%" height="15" fill="rgb(206,3,8)" fg:x="54804" fg:w="571"/><text x="77.4105%" y="543.50"></text></g><g><title>__GI___libc_free (594 samples, 0.84%)</title><rect x="78.5895%" y="501" width="0.8363%" height="15" fill="rgb(251,23,15)" fg:x="55819" fg:w="594"/><text x="78.8395%" y="511.50"></text></g><g><title>__rdl_dealloc (24 samples, 0.03%)</title><rect x="79.4258%" y="501" width="0.0338%" height="15" fill="rgb(252,88,28)" fg:x="56413" fg:w="24"/><text x="79.6758%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (24 samples, 0.03%)</title><rect x="79.4258%" y="485" width="0.0338%" height="15" fill="rgb(212,127,14)" fg:x="56413" fg:w="24"/><text x="79.6758%" y="495.50"></text></g><g><title>__rust_dealloc (40 samples, 0.06%)</title><rect x="79.4596%" y="501" width="0.0563%" height="15" fill="rgb(247,145,37)" fg:x="56437" fg:w="40"/><text x="79.7096%" y="511.50"></text></g><g><title>_int_free (1,045 samples, 1.47%)</title><rect x="79.5160%" y="501" width="1.4713%" height="15" fill="rgb(209,117,53)" fg:x="56477" fg:w="1045"/><text x="79.7660%" y="511.50"></text></g><g><title>free_perturb (48 samples, 0.07%)</title><rect x="80.9197%" y="485" width="0.0676%" height="15" fill="rgb(212,90,42)" fg:x="57474" fg:w="48"/><text x="81.1697%" y="495.50"></text></g><g><title>&lt;mongodb::cursor::common::GenericCursor&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (6,525 samples, 9.19%)</title><rect x="71.9061%" y="709" width="9.1868%" height="15" fill="rgb(218,164,37)" fg:x="51072" fg:w="6525"/><text x="72.1561%" y="719.50">&lt;mongodb::cur..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,525 samples, 9.19%)</title><rect x="71.9061%" y="693" width="9.1868%" height="15" fill="rgb(246,65,34)" fg:x="51072" fg:w="6525"/><text x="72.1561%" y="703.50">&lt;core::future..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,525 samples, 9.19%)</title><rect x="71.9061%" y="677" width="9.1868%" height="15" fill="rgb(231,100,33)" fg:x="51072" fg:w="6525"/><text x="72.1561%" y="687.50">&lt;core::future..</text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (6,525 samples, 9.19%)</title><rect x="71.9061%" y="661" width="9.1868%" height="15" fill="rgb(228,126,14)" fg:x="51072" fg:w="6525"/><text x="72.1561%" y="671.50">&lt;core::future..</text></g><g><title>core::ptr::drop_in_place&lt;mongodb::cmap::conn::command::CommandResponse&gt; (6,524 samples, 9.19%)</title><rect x="71.9075%" y="645" width="9.1854%" height="15" fill="rgb(215,173,21)" fg:x="51073" fg:w="6524"/><text x="72.1575%" y="655.50">core::ptr::dr..</text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (6,524 samples, 9.19%)</title><rect x="71.9075%" y="629" width="9.1854%" height="15" fill="rgb(210,6,40)" fg:x="51073" fg:w="6524"/><text x="72.1575%" y="639.50">&lt;linked_hash_..</text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (6,524 samples, 9.19%)</title><rect x="71.9075%" y="613" width="9.1854%" height="15" fill="rgb(212,48,18)" fg:x="51073" fg:w="6524"/><text x="72.1575%" y="623.50">core::ptr::dr..</text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (6,524 samples, 9.19%)</title><rect x="71.9075%" y="597" width="9.1854%" height="15" fill="rgb(230,214,11)" fg:x="51073" fg:w="6524"/><text x="72.1575%" y="607.50">&lt;linked_hash_..</text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (3,560 samples, 5.01%)</title><rect x="76.0806%" y="581" width="5.0122%" height="15" fill="rgb(254,105,39)" fg:x="54037" fg:w="3560"/><text x="76.3306%" y="591.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (3,543 samples, 4.99%)</title><rect x="76.1045%" y="565" width="4.9883%" height="15" fill="rgb(245,158,5)" fg:x="54054" fg:w="3543"/><text x="76.3545%" y="575.50">core::..</text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (3,540 samples, 4.98%)</title><rect x="76.1087%" y="549" width="4.9841%" height="15" fill="rgb(249,208,11)" fg:x="54057" fg:w="3540"/><text x="76.3587%" y="559.50">&lt;linke..</text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (2,222 samples, 3.13%)</title><rect x="77.9644%" y="533" width="3.1284%" height="15" fill="rgb(210,39,28)" fg:x="55375" fg:w="2222"/><text x="78.2144%" y="543.50">cor..</text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (2,203 samples, 3.10%)</title><rect x="77.9912%" y="517" width="3.1017%" height="15" fill="rgb(211,56,53)" fg:x="55394" fg:w="2203"/><text x="78.2412%" y="527.50">&lt;li..</text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (75 samples, 0.11%)</title><rect x="80.9872%" y="501" width="0.1056%" height="15" fill="rgb(226,201,30)" fg:x="57522" fg:w="75"/><text x="81.2372%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (20 samples, 0.03%)</title><rect x="81.0647%" y="485" width="0.0282%" height="15" fill="rgb(239,101,34)" fg:x="57577" fg:w="20"/><text x="81.3147%" y="495.50"></text></g><g><title>__GI___libc_free (10 samples, 0.01%)</title><rect x="81.1970%" y="565" width="0.0141%" height="15" fill="rgb(226,209,5)" fg:x="57671" fg:w="10"/><text x="81.4470%" y="575.50"></text></g><g><title>__memmove_avx_unaligned_erms (25 samples, 0.04%)</title><rect x="81.2111%" y="565" width="0.0352%" height="15" fill="rgb(250,105,47)" fg:x="57681" fg:w="25"/><text x="81.4611%" y="575.50"></text></g><g><title>_int_free (23 samples, 0.03%)</title><rect x="81.2505%" y="565" width="0.0324%" height="15" fill="rgb(230,72,3)" fg:x="57709" fg:w="23"/><text x="81.5005%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (43 samples, 0.06%)</title><rect x="81.3547%" y="549" width="0.0605%" height="15" fill="rgb(232,218,39)" fg:x="57783" fg:w="43"/><text x="81.6047%" y="559.50"></text></g><g><title>&lt;bson::document::DocumentIntoIterator as core::iter::traits::iterator::Iterator&gt;::next (225 samples, 0.32%)</title><rect x="81.1689%" y="581" width="0.3168%" height="15" fill="rgb(248,166,6)" fg:x="57651" fg:w="225"/><text x="81.4189%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (144 samples, 0.20%)</title><rect x="81.2829%" y="565" width="0.2027%" height="15" fill="rgb(247,89,20)" fg:x="57732" fg:w="144"/><text x="81.5329%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (49 samples, 0.07%)</title><rect x="81.4167%" y="549" width="0.0690%" height="15" fill="rgb(248,130,54)" fg:x="57827" fg:w="49"/><text x="81.6667%" y="559.50"></text></g><g><title>__memcmp_avx2_movbe (11 samples, 0.02%)</title><rect x="81.4702%" y="533" width="0.0155%" height="15" fill="rgb(234,196,4)" fg:x="57865" fg:w="11"/><text x="81.7202%" y="543.50"></text></g><g><title>&lt;bson::de::serde::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (330 samples, 0.46%)</title><rect x="81.0928%" y="597" width="0.4646%" height="15" fill="rgb(250,143,31)" fg:x="57597" fg:w="330"/><text x="81.3428%" y="607.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (44 samples, 0.06%)</title><rect x="81.4955%" y="581" width="0.0619%" height="15" fill="rgb(211,110,34)" fg:x="57883" fg:w="44"/><text x="81.7455%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.01%)</title><rect x="81.7334%" y="581" width="0.0127%" height="15" fill="rgb(215,124,48)" fg:x="58052" fg:w="9"/><text x="81.9834%" y="591.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (144 samples, 0.20%)</title><rect x="81.5575%" y="597" width="0.2027%" height="15" fill="rgb(216,46,13)" fg:x="57927" fg:w="144"/><text x="81.8075%" y="607.50"></text></g><g><title>checked_request2size (8 samples, 0.01%)</title><rect x="81.8419%" y="565" width="0.0113%" height="15" fill="rgb(205,184,25)" fg:x="58129" fg:w="8"/><text x="82.0919%" y="575.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.03%)</title><rect x="81.8278%" y="581" width="0.0282%" height="15" fill="rgb(228,1,10)" fg:x="58119" fg:w="20"/><text x="82.0778%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.01%)</title><rect x="81.8559%" y="581" width="0.0141%" height="15" fill="rgb(213,116,27)" fg:x="58139" fg:w="10"/><text x="82.1059%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (24 samples, 0.03%)</title><rect x="81.9277%" y="565" width="0.0338%" height="15" fill="rgb(241,95,50)" fg:x="58190" fg:w="24"/><text x="82.1777%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (83 samples, 0.12%)</title><rect x="81.8771%" y="581" width="0.1169%" height="15" fill="rgb(238,48,32)" fg:x="58154" fg:w="83"/><text x="82.1271%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (23 samples, 0.03%)</title><rect x="81.9615%" y="565" width="0.0324%" height="15" fill="rgb(235,113,49)" fg:x="58214" fg:w="23"/><text x="82.2115%" y="575.50"></text></g><g><title>&lt;futures_util::stream::try_stream::try_collect::TryCollect&lt;St,C&gt; as core::future::future::Future&gt;::poll (7,225 samples, 10.17%)</title><rect x="71.9061%" y="725" width="10.1723%" height="15" fill="rgb(205,127,43)" fg:x="51072" fg:w="7225"/><text x="72.1561%" y="735.50">&lt;futures_util::..</text></g><g><title>bson::de::serde::&lt;impl serde::de::Deserialize for bson::document::Document&gt;::deserialize (700 samples, 0.99%)</title><rect x="81.0928%" y="709" width="0.9856%" height="15" fill="rgb(250,162,2)" fg:x="57597" fg:w="700"/><text x="81.3428%" y="719.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (700 samples, 0.99%)</title><rect x="81.0928%" y="693" width="0.9856%" height="15" fill="rgb(220,13,41)" fg:x="57597" fg:w="700"/><text x="81.3428%" y="703.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (700 samples, 0.99%)</title><rect x="81.0928%" y="677" width="0.9856%" height="15" fill="rgb(249,221,25)" fg:x="57597" fg:w="700"/><text x="81.3428%" y="687.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (700 samples, 0.99%)</title><rect x="81.0928%" y="661" width="0.9856%" height="15" fill="rgb(215,208,19)" fg:x="57597" fg:w="700"/><text x="81.3428%" y="671.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (700 samples, 0.99%)</title><rect x="81.0928%" y="645" width="0.9856%" height="15" fill="rgb(236,175,2)" fg:x="57597" fg:w="700"/><text x="81.3428%" y="655.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (700 samples, 0.99%)</title><rect x="81.0928%" y="629" width="0.9856%" height="15" fill="rgb(241,52,2)" fg:x="57597" fg:w="700"/><text x="81.3428%" y="639.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (700 samples, 0.99%)</title><rect x="81.0928%" y="613" width="0.9856%" height="15" fill="rgb(248,140,14)" fg:x="57597" fg:w="700"/><text x="81.3428%" y="623.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (224 samples, 0.32%)</title><rect x="81.7630%" y="597" width="0.3154%" height="15" fill="rgb(253,22,42)" fg:x="58073" fg:w="224"/><text x="82.0130%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (60 samples, 0.08%)</title><rect x="81.9939%" y="581" width="0.0845%" height="15" fill="rgb(234,61,47)" fg:x="58237" fg:w="60"/><text x="82.2439%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (20 samples, 0.03%)</title><rect x="82.0502%" y="565" width="0.0282%" height="15" fill="rgb(208,226,15)" fg:x="58277" fg:w="20"/><text x="82.3002%" y="575.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (40 samples, 0.06%)</title><rect x="82.0784%" y="725" width="0.0563%" height="15" fill="rgb(217,221,4)" fg:x="58297" fg:w="40"/><text x="82.3284%" y="735.50"></text></g><g><title>malloc_consolidate (29 samples, 0.04%)</title><rect x="82.1502%" y="501" width="0.0408%" height="15" fill="rgb(212,174,34)" fg:x="58348" fg:w="29"/><text x="82.4002%" y="511.50"></text></g><g><title>unlink_chunk (14 samples, 0.02%)</title><rect x="82.1713%" y="485" width="0.0197%" height="15" fill="rgb(253,83,4)" fg:x="58363" fg:w="14"/><text x="82.4213%" y="495.50"></text></g><g><title>_int_free (36 samples, 0.05%)</title><rect x="82.1502%" y="517" width="0.0507%" height="15" fill="rgb(250,195,49)" fg:x="58348" fg:w="36"/><text x="82.4002%" y="527.50"></text></g><g><title>_int_free (19 samples, 0.03%)</title><rect x="82.2009%" y="501" width="0.0268%" height="15" fill="rgb(241,192,25)" fg:x="58384" fg:w="19"/><text x="82.4509%" y="511.50"></text></g><g><title>__GI___libc_free (57 samples, 0.08%)</title><rect x="82.3783%" y="469" width="0.0803%" height="15" fill="rgb(208,124,10)" fg:x="58510" fg:w="57"/><text x="82.6283%" y="479.50"></text></g><g><title>_int_free (135 samples, 0.19%)</title><rect x="82.4656%" y="469" width="0.1901%" height="15" fill="rgb(222,33,0)" fg:x="58572" fg:w="135"/><text x="82.7156%" y="479.50"></text></g><g><title>&lt;mongodb::cursor::common::GenericCursor&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (385 samples, 0.54%)</title><rect x="82.1432%" y="725" width="0.5421%" height="15" fill="rgb(234,209,28)" fg:x="58343" fg:w="385"/><text x="82.3932%" y="735.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (383 samples, 0.54%)</title><rect x="82.1460%" y="709" width="0.5392%" height="15" fill="rgb(224,11,23)" fg:x="58345" fg:w="383"/><text x="82.3960%" y="719.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (383 samples, 0.54%)</title><rect x="82.1460%" y="693" width="0.5392%" height="15" fill="rgb(232,99,1)" fg:x="58345" fg:w="383"/><text x="82.3960%" y="703.50"></text></g><g><title>&lt;core::future::from_generator::GenFuture&lt;T&gt; as core::future::future::Future&gt;::poll (383 samples, 0.54%)</title><rect x="82.1460%" y="677" width="0.5392%" height="15" fill="rgb(237,95,45)" fg:x="58345" fg:w="383"/><text x="82.3960%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;mongodb::cmap::conn::command::CommandResponse&gt; (380 samples, 0.54%)</title><rect x="82.1502%" y="661" width="0.5350%" height="15" fill="rgb(208,109,11)" fg:x="58348" fg:w="380"/><text x="82.4002%" y="671.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (380 samples, 0.54%)</title><rect x="82.1502%" y="645" width="0.5350%" height="15" fill="rgb(216,190,48)" fg:x="58348" fg:w="380"/><text x="82.4002%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (380 samples, 0.54%)</title><rect x="82.1502%" y="629" width="0.5350%" height="15" fill="rgb(251,171,36)" fg:x="58348" fg:w="380"/><text x="82.4002%" y="639.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (380 samples, 0.54%)</title><rect x="82.1502%" y="613" width="0.5350%" height="15" fill="rgb(230,62,22)" fg:x="58348" fg:w="380"/><text x="82.4002%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (380 samples, 0.54%)</title><rect x="82.1502%" y="597" width="0.5350%" height="15" fill="rgb(225,114,35)" fg:x="58348" fg:w="380"/><text x="82.4002%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (380 samples, 0.54%)</title><rect x="82.1502%" y="581" width="0.5350%" height="15" fill="rgb(215,118,42)" fg:x="58348" fg:w="380"/><text x="82.4002%" y="591.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (380 samples, 0.54%)</title><rect x="82.1502%" y="565" width="0.5350%" height="15" fill="rgb(243,119,21)" fg:x="58348" fg:w="380"/><text x="82.4002%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (380 samples, 0.54%)</title><rect x="82.1502%" y="549" width="0.5350%" height="15" fill="rgb(252,177,53)" fg:x="58348" fg:w="380"/><text x="82.4002%" y="559.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (380 samples, 0.54%)</title><rect x="82.1502%" y="533" width="0.5350%" height="15" fill="rgb(237,209,29)" fg:x="58348" fg:w="380"/><text x="82.4002%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (344 samples, 0.48%)</title><rect x="82.2009%" y="517" width="0.4843%" height="15" fill="rgb(212,65,23)" fg:x="58384" fg:w="344"/><text x="82.4509%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (325 samples, 0.46%)</title><rect x="82.2276%" y="501" width="0.4576%" height="15" fill="rgb(230,222,46)" fg:x="58403" fg:w="325"/><text x="82.4776%" y="511.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (325 samples, 0.46%)</title><rect x="82.2276%" y="485" width="0.4576%" height="15" fill="rgb(215,135,32)" fg:x="58403" fg:w="325"/><text x="82.4776%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (21 samples, 0.03%)</title><rect x="82.6556%" y="469" width="0.0296%" height="15" fill="rgb(246,101,22)" fg:x="58707" fg:w="21"/><text x="82.9056%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (8 samples, 0.01%)</title><rect x="82.6740%" y="453" width="0.0113%" height="15" fill="rgb(206,107,13)" fg:x="58720" fg:w="8"/><text x="82.9240%" y="463.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.01%)</title><rect x="82.6852%" y="597" width="0.0113%" height="15" fill="rgb(250,100,44)" fg:x="58728" fg:w="8"/><text x="82.9352%" y="607.50"></text></g><g><title>&lt;bson::document::DocumentIntoIterator as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.02%)</title><rect x="82.6965%" y="581" width="0.0197%" height="15" fill="rgb(231,147,38)" fg:x="58736" fg:w="14"/><text x="82.9465%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (10 samples, 0.01%)</title><rect x="82.7021%" y="565" width="0.0141%" height="15" fill="rgb(229,8,40)" fg:x="58740" fg:w="10"/><text x="82.9521%" y="575.50"></text></g><g><title>&lt;bson::de::serde::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (17 samples, 0.02%)</title><rect x="82.6965%" y="597" width="0.0239%" height="15" fill="rgb(221,135,30)" fg:x="58736" fg:w="17"/><text x="82.9465%" y="607.50"></text></g><g><title>&lt;mongodb::operation::_::&lt;impl serde::de::Deserialize for mongodb::operation::CursorBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (35 samples, 0.05%)</title><rect x="82.6852%" y="725" width="0.0493%" height="15" fill="rgb(249,193,18)" fg:x="58728" fg:w="35"/><text x="82.9352%" y="735.50"></text></g><g><title>mongodb::operation::_::&lt;impl serde::de::Deserialize for mongodb::operation::CursorInfo&gt;::deserialize (35 samples, 0.05%)</title><rect x="82.6852%" y="709" width="0.0493%" height="15" fill="rgb(209,133,39)" fg:x="58728" fg:w="35"/><text x="82.9352%" y="719.50"></text></g><g><title>&lt;mongodb::operation::_::&lt;impl serde::de::Deserialize for mongodb::operation::CursorInfo&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (35 samples, 0.05%)</title><rect x="82.6852%" y="693" width="0.0493%" height="15" fill="rgb(232,100,14)" fg:x="58728" fg:w="35"/><text x="82.9352%" y="703.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::vec_deque::VecDeque&lt;T&gt;&gt;::deserialize (35 samples, 0.05%)</title><rect x="82.6852%" y="677" width="0.0493%" height="15" fill="rgb(224,185,1)" fg:x="58728" fg:w="35"/><text x="82.9352%" y="687.50"></text></g><g><title>bson::de::serde::&lt;impl serde::de::Deserialize for bson::document::Document&gt;::deserialize (35 samples, 0.05%)</title><rect x="82.6852%" y="661" width="0.0493%" height="15" fill="rgb(223,139,8)" fg:x="58728" fg:w="35"/><text x="82.9352%" y="671.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (35 samples, 0.05%)</title><rect x="82.6852%" y="645" width="0.0493%" height="15" fill="rgb(232,213,38)" fg:x="58728" fg:w="35"/><text x="82.9352%" y="655.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (35 samples, 0.05%)</title><rect x="82.6852%" y="629" width="0.0493%" height="15" fill="rgb(207,94,22)" fg:x="58728" fg:w="35"/><text x="82.9352%" y="639.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (35 samples, 0.05%)</title><rect x="82.6852%" y="613" width="0.0493%" height="15" fill="rgb(219,183,54)" fg:x="58728" fg:w="35"/><text x="82.9352%" y="623.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (10 samples, 0.01%)</title><rect x="82.7204%" y="597" width="0.0141%" height="15" fill="rgb(216,185,54)" fg:x="58753" fg:w="10"/><text x="82.9704%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (10 samples, 0.01%)</title><rect x="82.7204%" y="581" width="0.0141%" height="15" fill="rgb(254,217,39)" fg:x="58753" fg:w="10"/><text x="82.9704%" y="591.50"></text></g><g><title>_int_malloc (26 samples, 0.04%)</title><rect x="82.7584%" y="533" width="0.0366%" height="15" fill="rgb(240,178,23)" fg:x="58780" fg:w="26"/><text x="83.0084%" y="543.50"></text></g><g><title>__GI___libc_malloc (35 samples, 0.05%)</title><rect x="82.7486%" y="549" width="0.0493%" height="15" fill="rgb(218,11,47)" fg:x="58773" fg:w="35"/><text x="82.9986%" y="559.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (47 samples, 0.07%)</title><rect x="82.7345%" y="597" width="0.0662%" height="15" fill="rgb(218,51,51)" fg:x="58763" fg:w="47"/><text x="82.9845%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (40 samples, 0.06%)</title><rect x="82.7443%" y="581" width="0.0563%" height="15" fill="rgb(238,126,27)" fg:x="58770" fg:w="40"/><text x="82.9943%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (38 samples, 0.05%)</title><rect x="82.7472%" y="565" width="0.0535%" height="15" fill="rgb(249,202,22)" fg:x="58772" fg:w="38"/><text x="82.9972%" y="575.50"></text></g><g><title>_int_free (170 samples, 0.24%)</title><rect x="82.8007%" y="565" width="0.2393%" height="15" fill="rgb(254,195,49)" fg:x="58810" fg:w="170"/><text x="83.0507%" y="575.50"></text></g><g><title>tcache_put (34 samples, 0.05%)</title><rect x="82.9921%" y="549" width="0.0479%" height="15" fill="rgb(208,123,14)" fg:x="58946" fg:w="34"/><text x="83.2421%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (340 samples, 0.48%)</title><rect x="83.0400%" y="549" width="0.4787%" height="15" fill="rgb(224,200,8)" fg:x="58980" fg:w="340"/><text x="83.2900%" y="559.50"></text></g><g><title>&lt;bson::document::DocumentIntoIterator as core::iter::traits::iterator::Iterator&gt;::next (1,367 samples, 1.92%)</title><rect x="82.8007%" y="581" width="1.9246%" height="15" fill="rgb(217,61,36)" fg:x="58810" fg:w="1367"/><text x="83.0507%" y="591.50">&lt;..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (1,197 samples, 1.69%)</title><rect x="83.0400%" y="565" width="1.6853%" height="15" fill="rgb(206,35,45)" fg:x="58980" fg:w="1197"/><text x="83.2900%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (857 samples, 1.21%)</title><rect x="83.5187%" y="549" width="1.2066%" height="15" fill="rgb(217,65,33)" fg:x="59320" fg:w="857"/><text x="83.7687%" y="559.50"></text></g><g><title>__memcmp_avx2_movbe (141 samples, 0.20%)</title><rect x="84.5268%" y="533" width="0.1985%" height="15" fill="rgb(222,158,48)" fg:x="60036" fg:w="141"/><text x="84.7768%" y="543.50"></text></g><g><title>&lt;mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::GetMoreResponseBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1,734 samples, 2.44%)</title><rect x="82.7345%" y="725" width="2.4414%" height="15" fill="rgb(254,2,54)" fg:x="58763" fg:w="1734"/><text x="82.9845%" y="735.50">&lt;m..</text></g><g><title>mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::NextBatchBody&gt;::deserialize (1,734 samples, 2.44%)</title><rect x="82.7345%" y="709" width="2.4414%" height="15" fill="rgb(250,143,38)" fg:x="58763" fg:w="1734"/><text x="82.9845%" y="719.50">mo..</text></g><g><title>&lt;mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::NextBatchBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1,734 samples, 2.44%)</title><rect x="82.7345%" y="693" width="2.4414%" height="15" fill="rgb(248,25,0)" fg:x="58763" fg:w="1734"/><text x="82.9845%" y="703.50">&lt;m..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::vec_deque::VecDeque&lt;T&gt;&gt;::deserialize (1,734 samples, 2.44%)</title><rect x="82.7345%" y="677" width="2.4414%" height="15" fill="rgb(206,152,27)" fg:x="58763" fg:w="1734"/><text x="82.9845%" y="687.50">se..</text></g><g><title>bson::de::serde::&lt;impl serde::de::Deserialize for bson::document::Document&gt;::deserialize (1,734 samples, 2.44%)</title><rect x="82.7345%" y="661" width="2.4414%" height="15" fill="rgb(240,77,30)" fg:x="58763" fg:w="1734"/><text x="82.9845%" y="671.50">bs..</text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (1,734 samples, 2.44%)</title><rect x="82.7345%" y="645" width="2.4414%" height="15" fill="rgb(231,5,3)" fg:x="58763" fg:w="1734"/><text x="82.9845%" y="655.50">&lt;b..</text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (1,734 samples, 2.44%)</title><rect x="82.7345%" y="629" width="2.4414%" height="15" fill="rgb(207,226,32)" fg:x="58763" fg:w="1734"/><text x="82.9845%" y="639.50">&lt;b..</text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (1,734 samples, 2.44%)</title><rect x="82.7345%" y="613" width="2.4414%" height="15" fill="rgb(222,207,47)" fg:x="58763" fg:w="1734"/><text x="82.9845%" y="623.50">&lt;b..</text></g><g><title>&lt;bson::de::serde::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1,687 samples, 2.38%)</title><rect x="82.8007%" y="597" width="2.3752%" height="15" fill="rgb(229,115,45)" fg:x="58810" fg:w="1687"/><text x="83.0507%" y="607.50">&lt;b..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (320 samples, 0.45%)</title><rect x="84.7253%" y="581" width="0.4505%" height="15" fill="rgb(224,191,6)" fg:x="60177" fg:w="320"/><text x="84.9753%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (109 samples, 0.15%)</title><rect x="85.1759%" y="725" width="0.1535%" height="15" fill="rgb(230,227,24)" fg:x="60497" fg:w="109"/><text x="85.4259%" y="735.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="85.3364%" y="725" width="0.0183%" height="15" fill="rgb(228,80,19)" fg:x="60611" fg:w="13"/><text x="85.5864%" y="735.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="85.3364%" y="709" width="0.0183%" height="15" fill="rgb(247,229,0)" fg:x="60611" fg:w="13"/><text x="85.5864%" y="719.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="85.3364%" y="693" width="0.0183%" height="15" fill="rgb(237,194,15)" fg:x="60611" fg:w="13"/><text x="85.5864%" y="703.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="85.3364%" y="677" width="0.0183%" height="15" fill="rgb(219,203,20)" fg:x="60611" fg:w="13"/><text x="85.5864%" y="687.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="85.3364%" y="661" width="0.0183%" height="15" fill="rgb(234,128,8)" fg:x="60611" fg:w="13"/><text x="85.5864%" y="671.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="85.3364%" y="645" width="0.0183%" height="15" fill="rgb(248,202,8)" fg:x="60611" fg:w="13"/><text x="85.5864%" y="655.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="85.3364%" y="629" width="0.0183%" height="15" fill="rgb(206,104,37)" fg:x="60611" fg:w="13"/><text x="85.5864%" y="639.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="85.3364%" y="613" width="0.0183%" height="15" fill="rgb(223,8,27)" fg:x="60611" fg:w="13"/><text x="85.5864%" y="623.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="85.3364%" y="597" width="0.0183%" height="15" fill="rgb(216,217,28)" fg:x="60611" fg:w="13"/><text x="85.5864%" y="607.50"></text></g><g><title>[unknown] (13 samples, 0.02%)</title><rect x="85.3364%" y="581" width="0.0183%" height="15" fill="rgb(249,199,1)" fg:x="60611" fg:w="13"/><text x="85.5864%" y="591.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="85.3392%" y="565" width="0.0155%" height="15" fill="rgb(240,85,17)" fg:x="60613" fg:w="11"/><text x="85.5892%" y="575.50"></text></g><g><title>[unknown] (9 samples, 0.01%)</title><rect x="85.3420%" y="549" width="0.0127%" height="15" fill="rgb(206,108,45)" fg:x="60615" fg:w="9"/><text x="85.5920%" y="559.50"></text></g><g><title>__GI___libc_malloc (89 samples, 0.13%)</title><rect x="85.3589%" y="725" width="0.1253%" height="15" fill="rgb(245,210,41)" fg:x="60627" fg:w="89"/><text x="85.6089%" y="735.50"></text></g><g><title>__libc_calloc (23 samples, 0.03%)</title><rect x="85.4842%" y="725" width="0.0324%" height="15" fill="rgb(206,13,37)" fg:x="60716" fg:w="23"/><text x="85.7342%" y="735.50"></text></g><g><title>__memcmp_avx2_movbe (9 samples, 0.01%)</title><rect x="85.5166%" y="725" width="0.0127%" height="15" fill="rgb(250,61,18)" fg:x="60739" fg:w="9"/><text x="85.7666%" y="735.50"></text></g><g><title>__memmove_avx_unaligned_erms (43 samples, 0.06%)</title><rect x="85.5292%" y="725" width="0.0605%" height="15" fill="rgb(235,172,48)" fg:x="60748" fg:w="43"/><text x="85.7792%" y="735.50"></text></g><g><title>__rdl_alloc (17 samples, 0.02%)</title><rect x="85.5898%" y="725" width="0.0239%" height="15" fill="rgb(249,201,17)" fg:x="60791" fg:w="17"/><text x="85.8398%" y="735.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (12 samples, 0.02%)</title><rect x="85.5968%" y="709" width="0.0169%" height="15" fill="rgb(219,208,6)" fg:x="60796" fg:w="12"/><text x="85.8468%" y="719.50"></text></g><g><title>_int_free (178 samples, 0.25%)</title><rect x="85.6222%" y="725" width="0.2506%" height="15" fill="rgb(248,31,23)" fg:x="60814" fg:w="178"/><text x="85.8722%" y="735.50"></text></g><g><title>_int_malloc (148 samples, 0.21%)</title><rect x="85.8728%" y="725" width="0.2084%" height="15" fill="rgb(245,15,42)" fg:x="60992" fg:w="148"/><text x="86.1228%" y="735.50"></text></g><g><title>_int_realloc (87 samples, 0.12%)</title><rect x="86.0812%" y="725" width="0.1225%" height="15" fill="rgb(222,217,39)" fg:x="61140" fg:w="87"/><text x="86.3312%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (56 samples, 0.08%)</title><rect x="86.2036%" y="725" width="0.0788%" height="15" fill="rgb(210,219,27)" fg:x="61227" fg:w="56"/><text x="86.4536%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (81 samples, 0.11%)</title><rect x="86.2825%" y="725" width="0.1140%" height="15" fill="rgb(252,166,36)" fg:x="61283" fg:w="81"/><text x="86.5325%" y="735.50"></text></g><g><title>bson::bson::Bson::from_extended_document (21 samples, 0.03%)</title><rect x="86.3965%" y="725" width="0.0296%" height="15" fill="rgb(245,132,34)" fg:x="61364" fg:w="21"/><text x="86.6465%" y="735.50"></text></g><g><title>_int_malloc (10 samples, 0.01%)</title><rect x="86.5331%" y="453" width="0.0141%" height="15" fill="rgb(236,54,3)" fg:x="61461" fg:w="10"/><text x="86.7831%" y="463.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.02%)</title><rect x="86.5275%" y="469" width="0.0239%" height="15" fill="rgb(241,173,43)" fg:x="61457" fg:w="17"/><text x="86.7775%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (25 samples, 0.04%)</title><rect x="86.5176%" y="501" width="0.0352%" height="15" fill="rgb(215,190,9)" fg:x="61450" fg:w="25"/><text x="86.7676%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (23 samples, 0.03%)</title><rect x="86.5204%" y="485" width="0.0324%" height="15" fill="rgb(242,101,16)" fg:x="61452" fg:w="23"/><text x="86.7704%" y="495.50"></text></g><g><title>bson::de::deserialize_bson_kvp (70 samples, 0.10%)</title><rect x="86.4768%" y="533" width="0.0986%" height="15" fill="rgb(223,190,21)" fg:x="61421" fg:w="70"/><text x="86.7268%" y="543.50"></text></g><g><title>bson::de::read_cstring (70 samples, 0.10%)</title><rect x="86.4768%" y="517" width="0.0986%" height="15" fill="rgb(215,228,25)" fg:x="61421" fg:w="70"/><text x="86.7268%" y="527.50"></text></g><g><title>core::str::converts::from_utf8 (16 samples, 0.02%)</title><rect x="86.5528%" y="501" width="0.0225%" height="15" fill="rgb(225,36,22)" fg:x="61475" fg:w="16"/><text x="86.8028%" y="511.50"></text></g><g><title>core::str::validations::run_utf8_validation (15 samples, 0.02%)</title><rect x="86.5542%" y="485" width="0.0211%" height="15" fill="rgb(251,106,46)" fg:x="61476" fg:w="15"/><text x="86.8042%" y="495.50"></text></g><g><title>bson::de::deserialize_bson_kvp (84 samples, 0.12%)</title><rect x="86.4768%" y="709" width="0.1183%" height="15" fill="rgb(208,90,1)" fg:x="61421" fg:w="84"/><text x="86.7268%" y="719.50"></text></g><g><title>bson::document::Document::from_reader (84 samples, 0.12%)</title><rect x="86.4768%" y="693" width="0.1183%" height="15" fill="rgb(243,10,4)" fg:x="61421" fg:w="84"/><text x="86.7268%" y="703.50"></text></g><g><title>bson::de::ensure_read_exactly (84 samples, 0.12%)</title><rect x="86.4768%" y="677" width="0.1183%" height="15" fill="rgb(212,137,27)" fg:x="61421" fg:w="84"/><text x="86.7268%" y="687.50"></text></g><g><title>bson::de::deserialize_bson_kvp (84 samples, 0.12%)</title><rect x="86.4768%" y="661" width="0.1183%" height="15" fill="rgb(231,220,49)" fg:x="61421" fg:w="84"/><text x="86.7268%" y="671.50"></text></g><g><title>bson::document::Document::from_reader (84 samples, 0.12%)</title><rect x="86.4768%" y="645" width="0.1183%" height="15" fill="rgb(237,96,20)" fg:x="61421" fg:w="84"/><text x="86.7268%" y="655.50"></text></g><g><title>bson::de::ensure_read_exactly (84 samples, 0.12%)</title><rect x="86.4768%" y="629" width="0.1183%" height="15" fill="rgb(239,229,30)" fg:x="61421" fg:w="84"/><text x="86.7268%" y="639.50"></text></g><g><title>bson::de::deserialize_bson_kvp (84 samples, 0.12%)</title><rect x="86.4768%" y="613" width="0.1183%" height="15" fill="rgb(219,65,33)" fg:x="61421" fg:w="84"/><text x="86.7268%" y="623.50"></text></g><g><title>bson::de::deserialize_bson_kvp (84 samples, 0.12%)</title><rect x="86.4768%" y="597" width="0.1183%" height="15" fill="rgb(243,134,7)" fg:x="61421" fg:w="84"/><text x="86.7268%" y="607.50"></text></g><g><title>bson::document::Document::from_reader (84 samples, 0.12%)</title><rect x="86.4768%" y="581" width="0.1183%" height="15" fill="rgb(216,177,54)" fg:x="61421" fg:w="84"/><text x="86.7268%" y="591.50"></text></g><g><title>bson::de::ensure_read_exactly (84 samples, 0.12%)</title><rect x="86.4768%" y="565" width="0.1183%" height="15" fill="rgb(211,160,20)" fg:x="61421" fg:w="84"/><text x="86.7268%" y="575.50"></text></g><g><title>bson::de::deserialize_bson_kvp (84 samples, 0.12%)</title><rect x="86.4768%" y="549" width="0.1183%" height="15" fill="rgb(239,85,39)" fg:x="61421" fg:w="84"/><text x="86.7268%" y="559.50"></text></g><g><title>bson::de::read_string (14 samples, 0.02%)</title><rect x="86.5753%" y="533" width="0.0197%" height="15" fill="rgb(232,125,22)" fg:x="61491" fg:w="14"/><text x="86.8253%" y="543.50"></text></g><g><title>std::io::Read::read_to_string (14 samples, 0.02%)</title><rect x="86.5753%" y="517" width="0.0197%" height="15" fill="rgb(244,57,34)" fg:x="61491" fg:w="14"/><text x="86.8253%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.02%)</title><rect x="86.5753%" y="501" width="0.0197%" height="15" fill="rgb(214,203,32)" fg:x="61491" fg:w="14"/><text x="86.8253%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.02%)</title><rect x="86.5753%" y="485" width="0.0197%" height="15" fill="rgb(207,58,43)" fg:x="61491" fg:w="14"/><text x="86.8253%" y="495.50"></text></g><g><title>__GI___libc_realloc (14 samples, 0.02%)</title><rect x="86.5753%" y="469" width="0.0197%" height="15" fill="rgb(215,193,15)" fg:x="61491" fg:w="14"/><text x="86.8253%" y="479.50"></text></g><g><title>_int_realloc (14 samples, 0.02%)</title><rect x="86.5753%" y="453" width="0.0197%" height="15" fill="rgb(232,15,44)" fg:x="61491" fg:w="14"/><text x="86.8253%" y="463.50"></text></g><g><title>_int_malloc (14 samples, 0.02%)</title><rect x="86.5753%" y="437" width="0.0197%" height="15" fill="rgb(212,3,48)" fg:x="61491" fg:w="14"/><text x="86.8253%" y="447.50"></text></g><g><title>__libc_calloc (27 samples, 0.04%)</title><rect x="86.6781%" y="501" width="0.0380%" height="15" fill="rgb(218,128,7)" fg:x="61564" fg:w="27"/><text x="86.9281%" y="511.50"></text></g><g><title>_int_malloc (19 samples, 0.03%)</title><rect x="86.6894%" y="485" width="0.0268%" height="15" fill="rgb(226,216,39)" fg:x="61572" fg:w="19"/><text x="86.9394%" y="495.50"></text></g><g><title>_int_malloc (101 samples, 0.14%)</title><rect x="86.8696%" y="469" width="0.1422%" height="15" fill="rgb(243,47,51)" fg:x="61700" fg:w="101"/><text x="87.1196%" y="479.50"></text></g><g><title>__GI___libc_malloc (128 samples, 0.18%)</title><rect x="86.8344%" y="485" width="0.1802%" height="15" fill="rgb(241,183,40)" fg:x="61675" fg:w="128"/><text x="87.0844%" y="495.50"></text></g><g><title>__memmove_avx_unaligned_erms (10 samples, 0.01%)</title><rect x="87.0146%" y="485" width="0.0141%" height="15" fill="rgb(231,217,32)" fg:x="61803" fg:w="10"/><text x="87.2646%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (36 samples, 0.05%)</title><rect x="87.1104%" y="469" width="0.0507%" height="15" fill="rgb(229,61,38)" fg:x="61871" fg:w="36"/><text x="87.3604%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (100 samples, 0.14%)</title><rect x="87.0428%" y="485" width="0.1408%" height="15" fill="rgb(225,210,5)" fg:x="61823" fg:w="100"/><text x="87.2928%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.02%)</title><rect x="87.1610%" y="469" width="0.0225%" height="15" fill="rgb(231,79,45)" fg:x="61907" fg:w="16"/><text x="87.4110%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (31 samples, 0.04%)</title><rect x="87.2286%" y="469" width="0.0436%" height="15" fill="rgb(224,100,7)" fg:x="61955" fg:w="31"/><text x="87.4786%" y="479.50"></text></g><g><title>bson::de::deserialize_bson_kvp (602 samples, 0.85%)</title><rect x="86.4261%" y="725" width="0.8476%" height="15" fill="rgb(241,198,18)" fg:x="61385" fg:w="602"/><text x="86.6761%" y="735.50"></text></g><g><title>bson::document::Document::from_reader (482 samples, 0.68%)</title><rect x="86.5950%" y="709" width="0.6786%" height="15" fill="rgb(252,97,53)" fg:x="61505" fg:w="482"/><text x="86.8450%" y="719.50"></text></g><g><title>bson::de::ensure_read_exactly (482 samples, 0.68%)</title><rect x="86.5950%" y="693" width="0.6786%" height="15" fill="rgb(220,88,7)" fg:x="61505" fg:w="482"/><text x="86.8450%" y="703.50"></text></g><g><title>bson::de::deserialize_bson_kvp (482 samples, 0.68%)</title><rect x="86.5950%" y="677" width="0.6786%" height="15" fill="rgb(213,176,14)" fg:x="61505" fg:w="482"/><text x="86.8450%" y="687.50"></text></g><g><title>bson::de::deserialize_bson_kvp (482 samples, 0.68%)</title><rect x="86.5950%" y="661" width="0.6786%" height="15" fill="rgb(246,73,7)" fg:x="61505" fg:w="482"/><text x="86.8450%" y="671.50"></text></g><g><title>bson::document::Document::from_reader (482 samples, 0.68%)</title><rect x="86.5950%" y="645" width="0.6786%" height="15" fill="rgb(245,64,36)" fg:x="61505" fg:w="482"/><text x="86.8450%" y="655.50"></text></g><g><title>bson::de::ensure_read_exactly (482 samples, 0.68%)</title><rect x="86.5950%" y="629" width="0.6786%" height="15" fill="rgb(245,80,10)" fg:x="61505" fg:w="482"/><text x="86.8450%" y="639.50"></text></g><g><title>bson::de::deserialize_bson_kvp (482 samples, 0.68%)</title><rect x="86.5950%" y="613" width="0.6786%" height="15" fill="rgb(232,107,50)" fg:x="61505" fg:w="482"/><text x="86.8450%" y="623.50"></text></g><g><title>bson::document::Document::from_reader (482 samples, 0.68%)</title><rect x="86.5950%" y="597" width="0.6786%" height="15" fill="rgb(253,3,0)" fg:x="61505" fg:w="482"/><text x="86.8450%" y="607.50"></text></g><g><title>bson::de::ensure_read_exactly (482 samples, 0.68%)</title><rect x="86.5950%" y="581" width="0.6786%" height="15" fill="rgb(212,99,53)" fg:x="61505" fg:w="482"/><text x="86.8450%" y="591.50"></text></g><g><title>bson::de::deserialize_bson_kvp (482 samples, 0.68%)</title><rect x="86.5950%" y="565" width="0.6786%" height="15" fill="rgb(249,111,54)" fg:x="61505" fg:w="482"/><text x="86.8450%" y="575.50"></text></g><g><title>bson::de::deserialize_bson_kvp (482 samples, 0.68%)</title><rect x="86.5950%" y="549" width="0.6786%" height="15" fill="rgb(249,55,30)" fg:x="61505" fg:w="482"/><text x="86.8450%" y="559.50"></text></g><g><title>bson::document::Document::from_reader (482 samples, 0.68%)</title><rect x="86.5950%" y="533" width="0.6786%" height="15" fill="rgb(237,47,42)" fg:x="61505" fg:w="482"/><text x="86.8450%" y="543.50"></text></g><g><title>bson::de::ensure_read_exactly (482 samples, 0.68%)</title><rect x="86.5950%" y="517" width="0.6786%" height="15" fill="rgb(211,20,18)" fg:x="61505" fg:w="482"/><text x="86.8450%" y="527.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (380 samples, 0.54%)</title><rect x="86.7387%" y="501" width="0.5350%" height="15" fill="rgb(231,203,46)" fg:x="61607" fg:w="380"/><text x="86.9887%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (64 samples, 0.09%)</title><rect x="87.1836%" y="485" width="0.0901%" height="15" fill="rgb(237,142,3)" fg:x="61923" fg:w="64"/><text x="87.4336%" y="495.50"></text></g><g><title>__libc_calloc (30 samples, 0.04%)</title><rect x="87.2765%" y="517" width="0.0422%" height="15" fill="rgb(241,107,1)" fg:x="61989" fg:w="30"/><text x="87.5265%" y="527.50"></text></g><g><title>_int_malloc (30 samples, 0.04%)</title><rect x="87.2765%" y="501" width="0.0422%" height="15" fill="rgb(229,83,13)" fg:x="61989" fg:w="30"/><text x="87.5265%" y="511.50"></text></g><g><title>_int_malloc (16 samples, 0.02%)</title><rect x="87.3215%" y="469" width="0.0225%" height="15" fill="rgb(241,91,40)" fg:x="62021" fg:w="16"/><text x="87.5715%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (19 samples, 0.03%)</title><rect x="87.3187%" y="517" width="0.0268%" height="15" fill="rgb(225,3,45)" fg:x="62019" fg:w="19"/><text x="87.5687%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 0.03%)</title><rect x="87.3187%" y="501" width="0.0268%" height="15" fill="rgb(244,223,14)" fg:x="62019" fg:w="19"/><text x="87.5687%" y="511.50"></text></g><g><title>__GI___libc_malloc (19 samples, 0.03%)</title><rect x="87.3187%" y="485" width="0.0268%" height="15" fill="rgb(224,124,37)" fg:x="62019" fg:w="19"/><text x="87.5687%" y="495.50"></text></g><g><title>bson::de::deserialize_bson_kvp (28 samples, 0.04%)</title><rect x="87.3455%" y="517" width="0.0394%" height="15" fill="rgb(251,171,30)" fg:x="62038" fg:w="28"/><text x="87.5955%" y="527.50"></text></g><g><title>_int_malloc (38 samples, 0.05%)</title><rect x="87.5158%" y="453" width="0.0535%" height="15" fill="rgb(236,46,54)" fg:x="62159" fg:w="38"/><text x="87.7658%" y="463.50"></text></g><g><title>__GI___libc_malloc (47 samples, 0.07%)</title><rect x="87.5046%" y="469" width="0.0662%" height="15" fill="rgb(245,213,5)" fg:x="62151" fg:w="47"/><text x="87.7546%" y="479.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.02%)</title><rect x="87.5707%" y="469" width="0.0155%" height="15" fill="rgb(230,144,27)" fg:x="62198" fg:w="11"/><text x="87.8207%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (76 samples, 0.11%)</title><rect x="87.4820%" y="501" width="0.1070%" height="15" fill="rgb(220,86,6)" fg:x="62135" fg:w="76"/><text x="87.7320%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (64 samples, 0.09%)</title><rect x="87.4989%" y="485" width="0.0901%" height="15" fill="rgb(240,20,13)" fg:x="62147" fg:w="64"/><text x="87.7489%" y="495.50"></text></g><g><title>bson::de::read_cstring (169 samples, 0.24%)</title><rect x="87.3849%" y="517" width="0.2379%" height="15" fill="rgb(217,89,34)" fg:x="62066" fg:w="169"/><text x="87.6349%" y="527.50"></text></g><g><title>core::str::converts::from_utf8 (24 samples, 0.03%)</title><rect x="87.5891%" y="501" width="0.0338%" height="15" fill="rgb(229,13,5)" fg:x="62211" fg:w="24"/><text x="87.8391%" y="511.50"></text></g><g><title>core::str::validations::run_utf8_validation (23 samples, 0.03%)</title><rect x="87.5905%" y="485" width="0.0324%" height="15" fill="rgb(244,67,35)" fg:x="62212" fg:w="23"/><text x="87.8405%" y="495.50"></text></g><g><title>_int_malloc (17 samples, 0.02%)</title><rect x="87.6454%" y="485" width="0.0239%" height="15" fill="rgb(221,40,2)" fg:x="62251" fg:w="17"/><text x="87.8954%" y="495.50"></text></g><g><title>__GI___libc_malloc (23 samples, 0.03%)</title><rect x="87.6383%" y="501" width="0.0324%" height="15" fill="rgb(237,157,21)" fg:x="62246" fg:w="23"/><text x="87.8883%" y="511.50"></text></g><g><title>_int_realloc (29 samples, 0.04%)</title><rect x="87.7594%" y="437" width="0.0408%" height="15" fill="rgb(222,94,11)" fg:x="62332" fg:w="29"/><text x="88.0094%" y="447.50"></text></g><g><title>_int_free (15 samples, 0.02%)</title><rect x="87.7791%" y="421" width="0.0211%" height="15" fill="rgb(249,113,6)" fg:x="62346" fg:w="15"/><text x="88.0291%" y="431.50"></text></g><g><title>__GI___libc_realloc (43 samples, 0.06%)</title><rect x="87.7425%" y="453" width="0.0605%" height="15" fill="rgb(238,137,36)" fg:x="62320" fg:w="43"/><text x="87.9925%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (55 samples, 0.08%)</title><rect x="87.7270%" y="485" width="0.0774%" height="15" fill="rgb(210,102,26)" fg:x="62309" fg:w="55"/><text x="87.9770%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (48 samples, 0.07%)</title><rect x="87.7369%" y="469" width="0.0676%" height="15" fill="rgb(218,30,30)" fg:x="62316" fg:w="48"/><text x="87.9869%" y="479.50"></text></g><g><title>bson::de::deserialize_bson_kvp (397 samples, 0.56%)</title><rect x="87.2765%" y="533" width="0.5590%" height="15" fill="rgb(214,67,26)" fg:x="61989" fg:w="397"/><text x="87.5265%" y="543.50"></text></g><g><title>bson::de::read_string (151 samples, 0.21%)</title><rect x="87.6228%" y="517" width="0.2126%" height="15" fill="rgb(251,9,53)" fg:x="62235" fg:w="151"/><text x="87.8728%" y="527.50"></text></g><g><title>std::io::Read::read_to_string (116 samples, 0.16%)</title><rect x="87.6721%" y="501" width="0.1633%" height="15" fill="rgb(228,204,25)" fg:x="62270" fg:w="116"/><text x="87.9221%" y="511.50"></text></g><g><title>core::str::converts::from_utf8 (22 samples, 0.03%)</title><rect x="87.8045%" y="485" width="0.0310%" height="15" fill="rgb(207,153,8)" fg:x="62364" fg:w="22"/><text x="88.0545%" y="495.50"></text></g><g><title>core::str::validations::run_utf8_validation (21 samples, 0.03%)</title><rect x="87.8059%" y="469" width="0.0296%" height="15" fill="rgb(242,9,16)" fg:x="62365" fg:w="21"/><text x="88.0559%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (57 samples, 0.08%)</title><rect x="87.8467%" y="469" width="0.0803%" height="15" fill="rgb(217,211,10)" fg:x="62394" fg:w="57"/><text x="88.0967%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (23 samples, 0.03%)</title><rect x="87.8946%" y="453" width="0.0324%" height="15" fill="rgb(219,228,52)" fg:x="62428" fg:w="23"/><text x="88.1446%" y="463.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.01%)</title><rect x="87.9354%" y="453" width="0.0127%" height="15" fill="rgb(231,92,29)" fg:x="62457" fg:w="9"/><text x="88.1854%" y="463.50"></text></g><g><title>bson::de::deserialize_bson_kvp (481 samples, 0.68%)</title><rect x="87.2765%" y="693" width="0.6772%" height="15" fill="rgb(232,8,23)" fg:x="61989" fg:w="481"/><text x="87.5265%" y="703.50"></text></g><g><title>bson::document::Document::from_reader (481 samples, 0.68%)</title><rect x="87.2765%" y="677" width="0.6772%" height="15" fill="rgb(216,211,34)" fg:x="61989" fg:w="481"/><text x="87.5265%" y="687.50"></text></g><g><title>bson::de::ensure_read_exactly (481 samples, 0.68%)</title><rect x="87.2765%" y="661" width="0.6772%" height="15" fill="rgb(236,151,0)" fg:x="61989" fg:w="481"/><text x="87.5265%" y="671.50"></text></g><g><title>bson::de::deserialize_bson_kvp (481 samples, 0.68%)</title><rect x="87.2765%" y="645" width="0.6772%" height="15" fill="rgb(209,168,3)" fg:x="61989" fg:w="481"/><text x="87.5265%" y="655.50"></text></g><g><title>bson::document::Document::from_reader (481 samples, 0.68%)</title><rect x="87.2765%" y="629" width="0.6772%" height="15" fill="rgb(208,129,28)" fg:x="61989" fg:w="481"/><text x="87.5265%" y="639.50"></text></g><g><title>bson::de::ensure_read_exactly (481 samples, 0.68%)</title><rect x="87.2765%" y="613" width="0.6772%" height="15" fill="rgb(229,78,22)" fg:x="61989" fg:w="481"/><text x="87.5265%" y="623.50"></text></g><g><title>bson::de::deserialize_bson_kvp (481 samples, 0.68%)</title><rect x="87.2765%" y="597" width="0.6772%" height="15" fill="rgb(228,187,13)" fg:x="61989" fg:w="481"/><text x="87.5265%" y="607.50"></text></g><g><title>bson::de::deserialize_bson_kvp (481 samples, 0.68%)</title><rect x="87.2765%" y="581" width="0.6772%" height="15" fill="rgb(240,119,24)" fg:x="61989" fg:w="481"/><text x="87.5265%" y="591.50"></text></g><g><title>bson::document::Document::from_reader (481 samples, 0.68%)</title><rect x="87.2765%" y="565" width="0.6772%" height="15" fill="rgb(209,194,42)" fg:x="61989" fg:w="481"/><text x="87.5265%" y="575.50"></text></g><g><title>bson::de::ensure_read_exactly (481 samples, 0.68%)</title><rect x="87.2765%" y="549" width="0.6772%" height="15" fill="rgb(247,200,46)" fg:x="61989" fg:w="481"/><text x="87.5265%" y="559.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (84 samples, 0.12%)</title><rect x="87.8354%" y="533" width="0.1183%" height="15" fill="rgb(218,76,16)" fg:x="62386" fg:w="84"/><text x="88.0854%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (84 samples, 0.12%)</title><rect x="87.8354%" y="517" width="0.1183%" height="15" fill="rgb(225,21,48)" fg:x="62386" fg:w="84"/><text x="88.0854%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (84 samples, 0.12%)</title><rect x="87.8354%" y="501" width="0.1183%" height="15" fill="rgb(239,223,50)" fg:x="62386" fg:w="84"/><text x="88.0854%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (84 samples, 0.12%)</title><rect x="87.8354%" y="485" width="0.1183%" height="15" fill="rgb(244,45,21)" fg:x="62386" fg:w="84"/><text x="88.0854%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (19 samples, 0.03%)</title><rect x="87.9270%" y="469" width="0.0268%" height="15" fill="rgb(232,33,43)" fg:x="62451" fg:w="19"/><text x="88.1770%" y="479.50"></text></g><g><title>_int_malloc (17 samples, 0.02%)</title><rect x="87.9833%" y="453" width="0.0239%" height="15" fill="rgb(209,8,3)" fg:x="62491" fg:w="17"/><text x="88.2333%" y="463.50"></text></g><g><title>__GI___libc_malloc (23 samples, 0.03%)</title><rect x="87.9762%" y="469" width="0.0324%" height="15" fill="rgb(214,25,53)" fg:x="62486" fg:w="23"/><text x="88.2262%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (26 samples, 0.04%)</title><rect x="87.9734%" y="501" width="0.0366%" height="15" fill="rgb(254,186,54)" fg:x="62484" fg:w="26"/><text x="88.2234%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (25 samples, 0.04%)</title><rect x="87.9748%" y="485" width="0.0352%" height="15" fill="rgb(208,174,49)" fg:x="62485" fg:w="25"/><text x="88.2248%" y="495.50"></text></g><g><title>bson::de::read_cstring (51 samples, 0.07%)</title><rect x="87.9537%" y="517" width="0.0718%" height="15" fill="rgb(233,191,51)" fg:x="62470" fg:w="51"/><text x="88.2037%" y="527.50"></text></g><g><title>core::str::converts::from_utf8 (11 samples, 0.02%)</title><rect x="88.0100%" y="501" width="0.0155%" height="15" fill="rgb(222,134,10)" fg:x="62510" fg:w="11"/><text x="88.2600%" y="511.50"></text></g><g><title>core::str::validations::run_utf8_validation (10 samples, 0.01%)</title><rect x="88.0114%" y="485" width="0.0141%" height="15" fill="rgb(230,226,20)" fg:x="62511" fg:w="10"/><text x="88.2614%" y="495.50"></text></g><g><title>bson::de::ensure_read_exactly (538 samples, 0.76%)</title><rect x="87.2737%" y="725" width="0.7575%" height="15" fill="rgb(251,111,25)" fg:x="61987" fg:w="538"/><text x="87.5237%" y="735.50"></text></g><g><title>bson::de::deserialize_bson_kvp (536 samples, 0.75%)</title><rect x="87.2765%" y="709" width="0.7547%" height="15" fill="rgb(224,40,46)" fg:x="61989" fg:w="536"/><text x="87.5265%" y="719.50"></text></g><g><title>bson::document::Document::from_reader (55 samples, 0.08%)</title><rect x="87.9537%" y="693" width="0.0774%" height="15" fill="rgb(236,108,47)" fg:x="62470" fg:w="55"/><text x="88.2037%" y="703.50"></text></g><g><title>bson::de::ensure_read_exactly (55 samples, 0.08%)</title><rect x="87.9537%" y="677" width="0.0774%" height="15" fill="rgb(234,93,0)" fg:x="62470" fg:w="55"/><text x="88.2037%" y="687.50"></text></g><g><title>bson::de::deserialize_bson_kvp (55 samples, 0.08%)</title><rect x="87.9537%" y="661" width="0.0774%" height="15" fill="rgb(224,213,32)" fg:x="62470" fg:w="55"/><text x="88.2037%" y="671.50"></text></g><g><title>bson::de::deserialize_bson_kvp (55 samples, 0.08%)</title><rect x="87.9537%" y="645" width="0.0774%" height="15" fill="rgb(251,11,48)" fg:x="62470" fg:w="55"/><text x="88.2037%" y="655.50"></text></g><g><title>bson::document::Document::from_reader (55 samples, 0.08%)</title><rect x="87.9537%" y="629" width="0.0774%" height="15" fill="rgb(236,173,5)" fg:x="62470" fg:w="55"/><text x="88.2037%" y="639.50"></text></g><g><title>bson::de::ensure_read_exactly (55 samples, 0.08%)</title><rect x="87.9537%" y="613" width="0.0774%" height="15" fill="rgb(230,95,12)" fg:x="62470" fg:w="55"/><text x="88.2037%" y="623.50"></text></g><g><title>bson::de::deserialize_bson_kvp (55 samples, 0.08%)</title><rect x="87.9537%" y="597" width="0.0774%" height="15" fill="rgb(232,209,1)" fg:x="62470" fg:w="55"/><text x="88.2037%" y="607.50"></text></g><g><title>bson::document::Document::from_reader (55 samples, 0.08%)</title><rect x="87.9537%" y="581" width="0.0774%" height="15" fill="rgb(232,6,1)" fg:x="62470" fg:w="55"/><text x="88.2037%" y="591.50"></text></g><g><title>bson::de::ensure_read_exactly (55 samples, 0.08%)</title><rect x="87.9537%" y="565" width="0.0774%" height="15" fill="rgb(210,224,50)" fg:x="62470" fg:w="55"/><text x="88.2037%" y="575.50"></text></g><g><title>bson::de::deserialize_bson_kvp (55 samples, 0.08%)</title><rect x="87.9537%" y="549" width="0.0774%" height="15" fill="rgb(228,127,35)" fg:x="62470" fg:w="55"/><text x="88.2037%" y="559.50"></text></g><g><title>bson::de::deserialize_bson_kvp (55 samples, 0.08%)</title><rect x="87.9537%" y="533" width="0.0774%" height="15" fill="rgb(245,102,45)" fg:x="62470" fg:w="55"/><text x="88.2037%" y="543.50"></text></g><g><title>bson::de::read_cstring (22 samples, 0.03%)</title><rect x="88.0311%" y="725" width="0.0310%" height="15" fill="rgb(214,1,49)" fg:x="62525" fg:w="22"/><text x="88.2811%" y="735.50"></text></g><g><title>bson::de::read_string (13 samples, 0.02%)</title><rect x="88.0621%" y="725" width="0.0183%" height="15" fill="rgb(226,163,40)" fg:x="62547" fg:w="13"/><text x="88.3121%" y="735.50"></text></g><g><title>_int_free (11 samples, 0.02%)</title><rect x="88.2015%" y="597" width="0.0155%" height="15" fill="rgb(239,212,28)" fg:x="62646" fg:w="11"/><text x="88.4515%" y="607.50"></text></g><g><title>_int_malloc (27 samples, 0.04%)</title><rect x="88.2381%" y="549" width="0.0380%" height="15" fill="rgb(220,20,13)" fg:x="62672" fg:w="27"/><text x="88.4881%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (44 samples, 0.06%)</title><rect x="88.2170%" y="597" width="0.0619%" height="15" fill="rgb(210,164,35)" fg:x="62657" fg:w="44"/><text x="88.4670%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (40 samples, 0.06%)</title><rect x="88.2226%" y="581" width="0.0563%" height="15" fill="rgb(248,109,41)" fg:x="62661" fg:w="40"/><text x="88.4726%" y="591.50"></text></g><g><title>__GI___libc_malloc (39 samples, 0.05%)</title><rect x="88.2240%" y="565" width="0.0549%" height="15" fill="rgb(238,23,50)" fg:x="62662" fg:w="39"/><text x="88.4740%" y="575.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (143 samples, 0.20%)</title><rect x="88.0861%" y="613" width="0.2013%" height="15" fill="rgb(211,48,49)" fg:x="62564" fg:w="143"/><text x="88.3361%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (27 samples, 0.04%)</title><rect x="88.3465%" y="581" width="0.0380%" height="15" fill="rgb(223,36,21)" fg:x="62749" fg:w="27"/><text x="88.5965%" y="591.50"></text></g><g><title>_int_free (21 samples, 0.03%)</title><rect x="88.3874%" y="581" width="0.0296%" height="15" fill="rgb(207,123,46)" fg:x="62778" fg:w="21"/><text x="88.6374%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (45 samples, 0.06%)</title><rect x="88.4831%" y="565" width="0.0634%" height="15" fill="rgb(240,218,32)" fg:x="62846" fg:w="45"/><text x="88.7331%" y="575.50"></text></g><g><title>&lt;bson::document::DocumentIntoIterator as core::iter::traits::iterator::Iterator&gt;::next (244 samples, 0.34%)</title><rect x="88.2874%" y="597" width="0.3435%" height="15" fill="rgb(252,5,43)" fg:x="62707" fg:w="244"/><text x="88.5374%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (152 samples, 0.21%)</title><rect x="88.4169%" y="581" width="0.2140%" height="15" fill="rgb(252,84,19)" fg:x="62799" fg:w="152"/><text x="88.6669%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (60 samples, 0.08%)</title><rect x="88.5464%" y="565" width="0.0845%" height="15" fill="rgb(243,152,39)" fg:x="62891" fg:w="60"/><text x="88.7964%" y="575.50"></text></g><g><title>__memcmp_avx2_movbe (16 samples, 0.02%)</title><rect x="88.6084%" y="549" width="0.0225%" height="15" fill="rgb(234,160,15)" fg:x="62935" fg:w="16"/><text x="88.8584%" y="559.50"></text></g><g><title>&lt;bson::de::serde::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (282 samples, 0.40%)</title><rect x="88.2874%" y="613" width="0.3970%" height="15" fill="rgb(237,34,20)" fg:x="62707" fg:w="282"/><text x="88.5374%" y="623.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (38 samples, 0.05%)</title><rect x="88.6309%" y="597" width="0.0535%" height="15" fill="rgb(229,97,13)" fg:x="62951" fg:w="38"/><text x="88.8809%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (30 samples, 0.04%)</title><rect x="88.7520%" y="581" width="0.0422%" height="15" fill="rgb(234,71,50)" fg:x="63037" fg:w="30"/><text x="89.0020%" y="591.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (525 samples, 0.74%)</title><rect x="88.0861%" y="693" width="0.7392%" height="15" fill="rgb(253,155,4)" fg:x="62564" fg:w="525"/><text x="88.3361%" y="703.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (525 samples, 0.74%)</title><rect x="88.0861%" y="677" width="0.7392%" height="15" fill="rgb(222,185,37)" fg:x="62564" fg:w="525"/><text x="88.3361%" y="687.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (525 samples, 0.74%)</title><rect x="88.0861%" y="661" width="0.7392%" height="15" fill="rgb(251,177,13)" fg:x="62564" fg:w="525"/><text x="88.3361%" y="671.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (525 samples, 0.74%)</title><rect x="88.0861%" y="645" width="0.7392%" height="15" fill="rgb(250,179,40)" fg:x="62564" fg:w="525"/><text x="88.3361%" y="655.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (525 samples, 0.74%)</title><rect x="88.0861%" y="629" width="0.7392%" height="15" fill="rgb(242,44,2)" fg:x="62564" fg:w="525"/><text x="88.3361%" y="639.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (100 samples, 0.14%)</title><rect x="88.6844%" y="613" width="0.1408%" height="15" fill="rgb(216,177,13)" fg:x="62989" fg:w="100"/><text x="88.9344%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (100 samples, 0.14%)</title><rect x="88.6844%" y="597" width="0.1408%" height="15" fill="rgb(216,106,43)" fg:x="62989" fg:w="100"/><text x="88.9344%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (22 samples, 0.03%)</title><rect x="88.7942%" y="581" width="0.0310%" height="15" fill="rgb(216,183,2)" fg:x="63067" fg:w="22"/><text x="89.0442%" y="591.50"></text></g><g><title>bson::de::serde::&lt;impl serde::de::Deserialize for bson::document::Document&gt;::deserialize (546 samples, 0.77%)</title><rect x="88.0804%" y="725" width="0.7687%" height="15" fill="rgb(249,75,3)" fg:x="62560" fg:w="546"/><text x="88.3304%" y="735.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (542 samples, 0.76%)</title><rect x="88.0861%" y="709" width="0.7631%" height="15" fill="rgb(219,67,39)" fg:x="62564" fg:w="542"/><text x="88.3361%" y="719.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (17 samples, 0.02%)</title><rect x="88.8252%" y="693" width="0.0239%" height="15" fill="rgb(253,228,2)" fg:x="63089" fg:w="17"/><text x="89.0752%" y="703.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (17 samples, 0.02%)</title><rect x="88.8252%" y="677" width="0.0239%" height="15" fill="rgb(235,138,27)" fg:x="63089" fg:w="17"/><text x="89.0752%" y="687.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (17 samples, 0.02%)</title><rect x="88.8252%" y="661" width="0.0239%" height="15" fill="rgb(236,97,51)" fg:x="63089" fg:w="17"/><text x="89.0752%" y="671.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (17 samples, 0.02%)</title><rect x="88.8252%" y="645" width="0.0239%" height="15" fill="rgb(240,80,30)" fg:x="63089" fg:w="17"/><text x="89.0752%" y="655.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (17 samples, 0.02%)</title><rect x="88.8252%" y="629" width="0.0239%" height="15" fill="rgb(230,178,19)" fg:x="63089" fg:w="17"/><text x="89.0752%" y="639.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (17 samples, 0.02%)</title><rect x="88.8252%" y="613" width="0.0239%" height="15" fill="rgb(210,190,27)" fg:x="63089" fg:w="17"/><text x="89.0752%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (17 samples, 0.02%)</title><rect x="88.8252%" y="597" width="0.0239%" height="15" fill="rgb(222,107,31)" fg:x="63089" fg:w="17"/><text x="89.0752%" y="607.50"></text></g><g><title>_int_free (10 samples, 0.01%)</title><rect x="88.9773%" y="501" width="0.0141%" height="15" fill="rgb(216,127,34)" fg:x="63197" fg:w="10"/><text x="89.2273%" y="511.50"></text></g><g><title>bson::de::deserialize_bson_kvp (96 samples, 0.14%)</title><rect x="88.8590%" y="517" width="0.1352%" height="15" fill="rgb(234,116,52)" fg:x="63113" fg:w="96"/><text x="89.1090%" y="527.50"></text></g><g><title>bson::de::deserialize_bson_kvp (122 samples, 0.17%)</title><rect x="88.8590%" y="677" width="0.1718%" height="15" fill="rgb(222,124,15)" fg:x="63113" fg:w="122"/><text x="89.1090%" y="687.50"></text></g><g><title>bson::document::Document::from_reader (122 samples, 0.17%)</title><rect x="88.8590%" y="661" width="0.1718%" height="15" fill="rgb(231,179,28)" fg:x="63113" fg:w="122"/><text x="89.1090%" y="671.50"></text></g><g><title>bson::de::ensure_read_exactly (122 samples, 0.17%)</title><rect x="88.8590%" y="645" width="0.1718%" height="15" fill="rgb(226,93,45)" fg:x="63113" fg:w="122"/><text x="89.1090%" y="655.50"></text></g><g><title>bson::de::deserialize_bson_kvp (122 samples, 0.17%)</title><rect x="88.8590%" y="629" width="0.1718%" height="15" fill="rgb(215,8,51)" fg:x="63113" fg:w="122"/><text x="89.1090%" y="639.50"></text></g><g><title>bson::document::Document::from_reader (122 samples, 0.17%)</title><rect x="88.8590%" y="613" width="0.1718%" height="15" fill="rgb(223,106,5)" fg:x="63113" fg:w="122"/><text x="89.1090%" y="623.50"></text></g><g><title>bson::de::ensure_read_exactly (122 samples, 0.17%)</title><rect x="88.8590%" y="597" width="0.1718%" height="15" fill="rgb(250,191,5)" fg:x="63113" fg:w="122"/><text x="89.1090%" y="607.50"></text></g><g><title>bson::de::deserialize_bson_kvp (122 samples, 0.17%)</title><rect x="88.8590%" y="581" width="0.1718%" height="15" fill="rgb(242,132,44)" fg:x="63113" fg:w="122"/><text x="89.1090%" y="591.50"></text></g><g><title>bson::de::deserialize_bson_kvp (122 samples, 0.17%)</title><rect x="88.8590%" y="565" width="0.1718%" height="15" fill="rgb(251,152,29)" fg:x="63113" fg:w="122"/><text x="89.1090%" y="575.50"></text></g><g><title>bson::document::Document::from_reader (122 samples, 0.17%)</title><rect x="88.8590%" y="549" width="0.1718%" height="15" fill="rgb(218,179,5)" fg:x="63113" fg:w="122"/><text x="89.1090%" y="559.50"></text></g><g><title>bson::de::ensure_read_exactly (122 samples, 0.17%)</title><rect x="88.8590%" y="533" width="0.1718%" height="15" fill="rgb(227,67,19)" fg:x="63113" fg:w="122"/><text x="89.1090%" y="543.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (26 samples, 0.04%)</title><rect x="88.9942%" y="517" width="0.0366%" height="15" fill="rgb(233,119,31)" fg:x="63209" fg:w="26"/><text x="89.2442%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (26 samples, 0.04%)</title><rect x="88.9942%" y="501" width="0.0366%" height="15" fill="rgb(241,120,22)" fg:x="63209" fg:w="26"/><text x="89.2442%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (26 samples, 0.04%)</title><rect x="88.9942%" y="485" width="0.0366%" height="15" fill="rgb(224,102,30)" fg:x="63209" fg:w="26"/><text x="89.2442%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (26 samples, 0.04%)</title><rect x="88.9942%" y="469" width="0.0366%" height="15" fill="rgb(210,164,37)" fg:x="63209" fg:w="26"/><text x="89.2442%" y="479.50"></text></g><g><title>bson::de::deserialize_bson_kvp (18 samples, 0.03%)</title><rect x="89.0308%" y="517" width="0.0253%" height="15" fill="rgb(226,191,16)" fg:x="63235" fg:w="18"/><text x="89.2808%" y="527.50"></text></g><g><title>bson::de::read_cstring (142 samples, 0.20%)</title><rect x="89.0561%" y="517" width="0.1999%" height="15" fill="rgb(214,40,45)" fg:x="63253" fg:w="142"/><text x="89.3061%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (142 samples, 0.20%)</title><rect x="89.0561%" y="501" width="0.1999%" height="15" fill="rgb(244,29,26)" fg:x="63253" fg:w="142"/><text x="89.3061%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (142 samples, 0.20%)</title><rect x="89.0561%" y="485" width="0.1999%" height="15" fill="rgb(216,16,5)" fg:x="63253" fg:w="142"/><text x="89.3061%" y="495.50"></text></g><g><title>__GI___libc_realloc (142 samples, 0.20%)</title><rect x="89.0561%" y="469" width="0.1999%" height="15" fill="rgb(249,76,35)" fg:x="63253" fg:w="142"/><text x="89.3061%" y="479.50"></text></g><g><title>_int_realloc (142 samples, 0.20%)</title><rect x="89.0561%" y="453" width="0.1999%" height="15" fill="rgb(207,11,44)" fg:x="63253" fg:w="142"/><text x="89.3061%" y="463.50"></text></g><g><title>_int_free (142 samples, 0.20%)</title><rect x="89.0561%" y="437" width="0.1999%" height="15" fill="rgb(228,190,49)" fg:x="63253" fg:w="142"/><text x="89.3061%" y="447.50"></text></g><g><title>malloc_consolidate (53 samples, 0.07%)</title><rect x="89.1814%" y="421" width="0.0746%" height="15" fill="rgb(214,173,12)" fg:x="63342" fg:w="53"/><text x="89.4314%" y="431.50"></text></g><g><title>_int_free (78 samples, 0.11%)</title><rect x="89.2560%" y="421" width="0.1098%" height="15" fill="rgb(218,26,35)" fg:x="63395" fg:w="78"/><text x="89.5060%" y="431.50"></text></g><g><title>bson::document::Document::from_reader (492 samples, 0.69%)</title><rect x="88.8534%" y="725" width="0.6927%" height="15" fill="rgb(220,200,19)" fg:x="63109" fg:w="492"/><text x="89.1034%" y="735.50"></text></g><g><title>bson::de::ensure_read_exactly (488 samples, 0.69%)</title><rect x="88.8590%" y="709" width="0.6871%" height="15" fill="rgb(239,95,49)" fg:x="63113" fg:w="488"/><text x="89.1090%" y="719.50"></text></g><g><title>bson::de::deserialize_bson_kvp (488 samples, 0.69%)</title><rect x="88.8590%" y="693" width="0.6871%" height="15" fill="rgb(235,85,53)" fg:x="63113" fg:w="488"/><text x="89.1090%" y="703.50"></text></g><g><title>bson::document::Document::from_reader (366 samples, 0.52%)</title><rect x="89.0308%" y="677" width="0.5153%" height="15" fill="rgb(233,133,31)" fg:x="63235" fg:w="366"/><text x="89.2808%" y="687.50"></text></g><g><title>bson::de::ensure_read_exactly (366 samples, 0.52%)</title><rect x="89.0308%" y="661" width="0.5153%" height="15" fill="rgb(218,25,20)" fg:x="63235" fg:w="366"/><text x="89.2808%" y="671.50"></text></g><g><title>bson::de::deserialize_bson_kvp (366 samples, 0.52%)</title><rect x="89.0308%" y="645" width="0.5153%" height="15" fill="rgb(252,210,38)" fg:x="63235" fg:w="366"/><text x="89.2808%" y="655.50"></text></g><g><title>bson::de::deserialize_bson_kvp (366 samples, 0.52%)</title><rect x="89.0308%" y="629" width="0.5153%" height="15" fill="rgb(242,134,21)" fg:x="63235" fg:w="366"/><text x="89.2808%" y="639.50"></text></g><g><title>bson::document::Document::from_reader (366 samples, 0.52%)</title><rect x="89.0308%" y="613" width="0.5153%" height="15" fill="rgb(213,28,48)" fg:x="63235" fg:w="366"/><text x="89.2808%" y="623.50"></text></g><g><title>bson::de::ensure_read_exactly (366 samples, 0.52%)</title><rect x="89.0308%" y="597" width="0.5153%" height="15" fill="rgb(250,196,2)" fg:x="63235" fg:w="366"/><text x="89.2808%" y="607.50"></text></g><g><title>bson::de::deserialize_bson_kvp (366 samples, 0.52%)</title><rect x="89.0308%" y="581" width="0.5153%" height="15" fill="rgb(227,5,17)" fg:x="63235" fg:w="366"/><text x="89.2808%" y="591.50"></text></g><g><title>bson::document::Document::from_reader (366 samples, 0.52%)</title><rect x="89.0308%" y="565" width="0.5153%" height="15" fill="rgb(221,226,24)" fg:x="63235" fg:w="366"/><text x="89.2808%" y="575.50"></text></g><g><title>bson::de::ensure_read_exactly (366 samples, 0.52%)</title><rect x="89.0308%" y="549" width="0.5153%" height="15" fill="rgb(211,5,48)" fg:x="63235" fg:w="366"/><text x="89.2808%" y="559.50"></text></g><g><title>bson::de::deserialize_bson_kvp (366 samples, 0.52%)</title><rect x="89.0308%" y="533" width="0.5153%" height="15" fill="rgb(219,150,6)" fg:x="63235" fg:w="366"/><text x="89.2808%" y="543.50"></text></g><g><title>bson::de::read_string (206 samples, 0.29%)</title><rect x="89.2560%" y="517" width="0.2900%" height="15" fill="rgb(251,46,16)" fg:x="63395" fg:w="206"/><text x="89.5060%" y="527.50"></text></g><g><title>std::io::Read::read_to_string (206 samples, 0.29%)</title><rect x="89.2560%" y="501" width="0.2900%" height="15" fill="rgb(220,204,40)" fg:x="63395" fg:w="206"/><text x="89.5060%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (206 samples, 0.29%)</title><rect x="89.2560%" y="485" width="0.2900%" height="15" fill="rgb(211,85,2)" fg:x="63395" fg:w="206"/><text x="89.5060%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (206 samples, 0.29%)</title><rect x="89.2560%" y="469" width="0.2900%" height="15" fill="rgb(229,17,7)" fg:x="63395" fg:w="206"/><text x="89.5060%" y="479.50"></text></g><g><title>__GI___libc_realloc (206 samples, 0.29%)</title><rect x="89.2560%" y="453" width="0.2900%" height="15" fill="rgb(239,72,28)" fg:x="63395" fg:w="206"/><text x="89.5060%" y="463.50"></text></g><g><title>_int_realloc (206 samples, 0.29%)</title><rect x="89.2560%" y="437" width="0.2900%" height="15" fill="rgb(230,47,54)" fg:x="63395" fg:w="206"/><text x="89.5060%" y="447.50"></text></g><g><title>_int_malloc (128 samples, 0.18%)</title><rect x="89.3659%" y="421" width="0.1802%" height="15" fill="rgb(214,50,8)" fg:x="63473" fg:w="128"/><text x="89.6159%" y="431.50"></text></g><g><title>core::str::converts::from_utf8 (17 samples, 0.02%)</title><rect x="89.5742%" y="725" width="0.0239%" height="15" fill="rgb(216,198,43)" fg:x="63621" fg:w="17"/><text x="89.8242%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (116 samples, 0.16%)</title><rect x="89.5982%" y="725" width="0.1633%" height="15" fill="rgb(234,20,35)" fg:x="63638" fg:w="116"/><text x="89.8482%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (28 samples, 0.04%)</title><rect x="89.7615%" y="725" width="0.0394%" height="15" fill="rgb(254,45,19)" fg:x="63754" fg:w="28"/><text x="90.0115%" y="735.50"></text></g><g><title>hashbrown::map::make_hash (124 samples, 0.17%)</title><rect x="89.8009%" y="725" width="0.1746%" height="15" fill="rgb(219,14,44)" fg:x="63782" fg:w="124"/><text x="90.0509%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (346 samples, 0.49%)</title><rect x="89.9755%" y="725" width="0.4871%" height="15" fill="rgb(217,220,26)" fg:x="63906" fg:w="346"/><text x="90.2255%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (119 samples, 0.17%)</title><rect x="90.4626%" y="725" width="0.1675%" height="15" fill="rgb(213,158,28)" fg:x="64252" fg:w="119"/><text x="90.7126%" y="735.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (23 samples, 0.03%)</title><rect x="90.6302%" y="725" width="0.0324%" height="15" fill="rgb(252,51,52)" fg:x="64371" fg:w="23"/><text x="90.8802%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (31 samples, 0.04%)</title><rect x="90.6626%" y="725" width="0.0436%" height="15" fill="rgb(246,89,16)" fg:x="64394" fg:w="31"/><text x="90.9126%" y="735.50"></text></g><g><title>&lt;bson::de::serde::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (19 samples, 0.03%)</title><rect x="90.7935%" y="709" width="0.0268%" height="15" fill="rgb(216,158,49)" fg:x="64487" fg:w="19"/><text x="91.0435%" y="719.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (82 samples, 0.12%)</title><rect x="90.7062%" y="725" width="0.1155%" height="15" fill="rgb(236,107,19)" fg:x="64425" fg:w="82"/><text x="90.9562%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.03%)</title><rect x="90.8667%" y="485" width="0.0253%" height="15" fill="rgb(228,185,30)" fg:x="64539" fg:w="18"/><text x="91.1167%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (16 samples, 0.02%)</title><rect x="90.8695%" y="469" width="0.0225%" height="15" fill="rgb(246,134,8)" fg:x="64541" fg:w="16"/><text x="91.1195%" y="479.50"></text></g><g><title>bson::de::read_cstring (35 samples, 0.05%)</title><rect x="90.8442%" y="501" width="0.0493%" height="15" fill="rgb(214,143,50)" fg:x="64523" fg:w="35"/><text x="91.0942%" y="511.50"></text></g><g><title>bson::de::deserialize_bson_kvp (56 samples, 0.08%)</title><rect x="90.8414%" y="517" width="0.0788%" height="15" fill="rgb(228,75,8)" fg:x="64521" fg:w="56"/><text x="91.0914%" y="527.50"></text></g><g><title>bson::de::read_string (19 samples, 0.03%)</title><rect x="90.8935%" y="501" width="0.0268%" height="15" fill="rgb(207,175,4)" fg:x="64558" fg:w="19"/><text x="91.1435%" y="511.50"></text></g><g><title>std::io::Read::read_to_string (12 samples, 0.02%)</title><rect x="90.9033%" y="485" width="0.0169%" height="15" fill="rgb(205,108,24)" fg:x="64565" fg:w="12"/><text x="91.1533%" y="495.50"></text></g><g><title>_int_malloc (14 samples, 0.02%)</title><rect x="90.9301%" y="485" width="0.0197%" height="15" fill="rgb(244,120,49)" fg:x="64584" fg:w="14"/><text x="91.1801%" y="495.50"></text></g><g><title>__GI___libc_malloc (19 samples, 0.03%)</title><rect x="90.9245%" y="501" width="0.0268%" height="15" fill="rgb(223,47,38)" fg:x="64580" fg:w="19"/><text x="91.1745%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (20 samples, 0.03%)</title><rect x="90.9512%" y="501" width="0.0282%" height="15" fill="rgb(229,179,11)" fg:x="64599" fg:w="20"/><text x="91.2012%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (13 samples, 0.02%)</title><rect x="90.9611%" y="485" width="0.0183%" height="15" fill="rgb(231,122,1)" fg:x="64606" fg:w="13"/><text x="91.2111%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (11 samples, 0.02%)</title><rect x="90.9639%" y="469" width="0.0155%" height="15" fill="rgb(245,119,9)" fg:x="64608" fg:w="11"/><text x="91.2139%" y="479.50"></text></g><g><title>mongodb::cmap::conn::Connection::send_command::{{closure}} (111 samples, 0.16%)</title><rect x="90.8315%" y="725" width="0.1563%" height="15" fill="rgb(241,163,25)" fg:x="64514" fg:w="111"/><text x="91.0815%" y="735.50"></text></g><g><title>bson::document::Document::from_reader (111 samples, 0.16%)</title><rect x="90.8315%" y="709" width="0.1563%" height="15" fill="rgb(217,214,3)" fg:x="64514" fg:w="111"/><text x="91.0815%" y="719.50"></text></g><g><title>bson::de::ensure_read_exactly (111 samples, 0.16%)</title><rect x="90.8315%" y="693" width="0.1563%" height="15" fill="rgb(240,86,28)" fg:x="64514" fg:w="111"/><text x="91.0815%" y="703.50"></text></g><g><title>bson::de::deserialize_bson_kvp (111 samples, 0.16%)</title><rect x="90.8315%" y="677" width="0.1563%" height="15" fill="rgb(215,47,9)" fg:x="64514" fg:w="111"/><text x="91.0815%" y="687.50"></text></g><g><title>bson::document::Document::from_reader (111 samples, 0.16%)</title><rect x="90.8315%" y="661" width="0.1563%" height="15" fill="rgb(252,25,45)" fg:x="64514" fg:w="111"/><text x="91.0815%" y="671.50"></text></g><g><title>bson::de::ensure_read_exactly (111 samples, 0.16%)</title><rect x="90.8315%" y="645" width="0.1563%" height="15" fill="rgb(251,164,9)" fg:x="64514" fg:w="111"/><text x="91.0815%" y="655.50"></text></g><g><title>bson::de::deserialize_bson_kvp (111 samples, 0.16%)</title><rect x="90.8315%" y="629" width="0.1563%" height="15" fill="rgb(233,194,0)" fg:x="64514" fg:w="111"/><text x="91.0815%" y="639.50"></text></g><g><title>bson::de::deserialize_bson_kvp (111 samples, 0.16%)</title><rect x="90.8315%" y="613" width="0.1563%" height="15" fill="rgb(249,111,24)" fg:x="64514" fg:w="111"/><text x="91.0815%" y="623.50"></text></g><g><title>bson::document::Document::from_reader (111 samples, 0.16%)</title><rect x="90.8315%" y="597" width="0.1563%" height="15" fill="rgb(250,223,3)" fg:x="64514" fg:w="111"/><text x="91.0815%" y="607.50"></text></g><g><title>bson::de::ensure_read_exactly (111 samples, 0.16%)</title><rect x="90.8315%" y="581" width="0.1563%" height="15" fill="rgb(236,178,37)" fg:x="64514" fg:w="111"/><text x="91.0815%" y="591.50"></text></g><g><title>bson::de::deserialize_bson_kvp (111 samples, 0.16%)</title><rect x="90.8315%" y="565" width="0.1563%" height="15" fill="rgb(241,158,50)" fg:x="64514" fg:w="111"/><text x="91.0815%" y="575.50"></text></g><g><title>bson::document::Document::from_reader (111 samples, 0.16%)</title><rect x="90.8315%" y="549" width="0.1563%" height="15" fill="rgb(213,121,41)" fg:x="64514" fg:w="111"/><text x="91.0815%" y="559.50"></text></g><g><title>bson::de::ensure_read_exactly (111 samples, 0.16%)</title><rect x="90.8315%" y="533" width="0.1563%" height="15" fill="rgb(240,92,3)" fg:x="64514" fg:w="111"/><text x="91.0815%" y="543.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (48 samples, 0.07%)</title><rect x="90.9202%" y="517" width="0.0676%" height="15" fill="rgb(205,123,3)" fg:x="64577" fg:w="48"/><text x="91.1702%" y="527.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 0.03%)</title><rect x="92.2141%" y="565" width="0.0338%" height="15" fill="rgb(205,97,47)" fg:x="65496" fg:w="24"/><text x="92.4641%" y="575.50"></text></g><g><title>_int_free (12 samples, 0.02%)</title><rect x="92.2310%" y="549" width="0.0169%" height="15" fill="rgb(247,152,14)" fg:x="65508" fg:w="12"/><text x="92.4810%" y="559.50"></text></g><g><title>__memmove_avx_unaligned_erms (9 samples, 0.01%)</title><rect x="92.2507%" y="565" width="0.0127%" height="15" fill="rgb(248,195,53)" fg:x="65522" fg:w="9"/><text x="92.5007%" y="575.50"></text></g><g><title>bson::de::serde::Deserializer::new (46 samples, 0.06%)</title><rect x="92.2761%" y="565" width="0.0648%" height="15" fill="rgb(226,201,16)" fg:x="65540" fg:w="46"/><text x="92.5261%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::ok_or (78 samples, 0.11%)</title><rect x="92.3408%" y="565" width="0.1098%" height="15" fill="rgb(205,98,0)" fg:x="65586" fg:w="78"/><text x="92.5908%" y="575.50"></text></g><g><title>__GI___libc_malloc (19 samples, 0.03%)</title><rect x="92.4605%" y="549" width="0.0268%" height="15" fill="rgb(214,191,48)" fg:x="65671" fg:w="19"/><text x="92.7105%" y="559.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (29 samples, 0.04%)</title><rect x="92.4507%" y="565" width="0.0408%" height="15" fill="rgb(237,112,39)" fg:x="65664" fg:w="29"/><text x="92.7007%" y="575.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (103 samples, 0.15%)</title><rect x="92.4915%" y="565" width="0.1450%" height="15" fill="rgb(247,203,27)" fg:x="65693" fg:w="103"/><text x="92.7415%" y="575.50"></text></g><g><title>mongodb::cmap::conn::command::CommandResponse::body (1,172 samples, 1.65%)</title><rect x="90.9878%" y="725" width="1.6501%" height="15" fill="rgb(235,124,28)" fg:x="64625" fg:w="1172"/><text x="91.2378%" y="735.50"></text></g><g><title>mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::GetMoreResponseBody&gt;::deserialize (1,172 samples, 1.65%)</title><rect x="90.9878%" y="709" width="1.6501%" height="15" fill="rgb(208,207,46)" fg:x="64625" fg:w="1172"/><text x="91.2378%" y="719.50"></text></g><g><title>&lt;mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::GetMoreResponseBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1,172 samples, 1.65%)</title><rect x="90.9878%" y="693" width="1.6501%" height="15" fill="rgb(234,176,4)" fg:x="64625" fg:w="1172"/><text x="91.2378%" y="703.50"></text></g><g><title>mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::NextBatchBody&gt;::deserialize (1,172 samples, 1.65%)</title><rect x="90.9878%" y="677" width="1.6501%" height="15" fill="rgb(230,133,28)" fg:x="64625" fg:w="1172"/><text x="91.2378%" y="687.50"></text></g><g><title>&lt;mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::NextBatchBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1,172 samples, 1.65%)</title><rect x="90.9878%" y="661" width="1.6501%" height="15" fill="rgb(211,137,40)" fg:x="64625" fg:w="1172"/><text x="91.2378%" y="671.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::vec_deque::VecDeque&lt;T&gt;&gt;::deserialize (1,172 samples, 1.65%)</title><rect x="90.9878%" y="645" width="1.6501%" height="15" fill="rgb(254,35,13)" fg:x="64625" fg:w="1172"/><text x="91.2378%" y="655.50"></text></g><g><title>bson::de::serde::&lt;impl serde::de::Deserialize for bson::document::Document&gt;::deserialize (1,172 samples, 1.65%)</title><rect x="90.9878%" y="629" width="1.6501%" height="15" fill="rgb(225,49,51)" fg:x="64625" fg:w="1172"/><text x="91.2378%" y="639.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (1,172 samples, 1.65%)</title><rect x="90.9878%" y="613" width="1.6501%" height="15" fill="rgb(251,10,15)" fg:x="64625" fg:w="1172"/><text x="91.2378%" y="623.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (1,172 samples, 1.65%)</title><rect x="90.9878%" y="597" width="1.6501%" height="15" fill="rgb(228,207,15)" fg:x="64625" fg:w="1172"/><text x="91.2378%" y="607.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (1,172 samples, 1.65%)</title><rect x="90.9878%" y="581" width="1.6501%" height="15" fill="rgb(241,99,19)" fg:x="64625" fg:w="1172"/><text x="91.2378%" y="591.50"></text></g><g><title>mongodb::operation::_::&lt;impl serde::de::Deserialize for mongodb::operation::CursorBody&gt;::deserialize (29 samples, 0.04%)</title><rect x="92.6393%" y="725" width="0.0408%" height="15" fill="rgb(207,104,49)" fg:x="65798" fg:w="29"/><text x="92.8893%" y="735.50"></text></g><g><title>&lt;mongodb::operation::_::&lt;impl serde::de::Deserialize for mongodb::operation::CursorBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (29 samples, 0.04%)</title><rect x="92.6393%" y="709" width="0.0408%" height="15" fill="rgb(234,99,18)" fg:x="65798" fg:w="29"/><text x="92.8893%" y="719.50"></text></g><g><title>mongodb::operation::_::&lt;impl serde::de::Deserialize for mongodb::operation::CursorInfo&gt;::deserialize (29 samples, 0.04%)</title><rect x="92.6393%" y="693" width="0.0408%" height="15" fill="rgb(213,191,49)" fg:x="65798" fg:w="29"/><text x="92.8893%" y="703.50"></text></g><g><title>&lt;mongodb::operation::_::&lt;impl serde::de::Deserialize for mongodb::operation::CursorInfo&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (29 samples, 0.04%)</title><rect x="92.6393%" y="677" width="0.0408%" height="15" fill="rgb(210,226,19)" fg:x="65798" fg:w="29"/><text x="92.8893%" y="687.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::vec_deque::VecDeque&lt;T&gt;&gt;::deserialize (29 samples, 0.04%)</title><rect x="92.6393%" y="661" width="0.0408%" height="15" fill="rgb(229,97,18)" fg:x="65798" fg:w="29"/><text x="92.8893%" y="671.50"></text></g><g><title>bson::de::serde::&lt;impl serde::de::Deserialize for bson::document::Document&gt;::deserialize (29 samples, 0.04%)</title><rect x="92.6393%" y="645" width="0.0408%" height="15" fill="rgb(211,167,15)" fg:x="65798" fg:w="29"/><text x="92.8893%" y="655.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (29 samples, 0.04%)</title><rect x="92.6393%" y="629" width="0.0408%" height="15" fill="rgb(210,169,34)" fg:x="65798" fg:w="29"/><text x="92.8893%" y="639.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (29 samples, 0.04%)</title><rect x="92.6393%" y="613" width="0.0408%" height="15" fill="rgb(241,121,31)" fg:x="65798" fg:w="29"/><text x="92.8893%" y="623.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (29 samples, 0.04%)</title><rect x="92.6393%" y="597" width="0.0408%" height="15" fill="rgb(232,40,11)" fg:x="65798" fg:w="29"/><text x="92.8893%" y="607.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (13 samples, 0.02%)</title><rect x="92.6618%" y="581" width="0.0183%" height="15" fill="rgb(205,86,26)" fg:x="65814" fg:w="13"/><text x="92.9118%" y="591.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (335 samples, 0.47%)</title><rect x="92.6801%" y="581" width="0.4717%" height="15" fill="rgb(231,126,28)" fg:x="65827" fg:w="335"/><text x="92.9301%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;bson::bson::Bson&gt; (33 samples, 0.05%)</title><rect x="93.1053%" y="565" width="0.0465%" height="15" fill="rgb(219,221,18)" fg:x="66129" fg:w="33"/><text x="93.3553%" y="575.50"></text></g><g><title>__GI___libc_free (51 samples, 0.07%)</title><rect x="94.0768%" y="549" width="0.0718%" height="15" fill="rgb(211,40,0)" fg:x="66819" fg:w="51"/><text x="94.3268%" y="559.50"></text></g><g><title>__memmove_avx_unaligned_erms (248 samples, 0.35%)</title><rect x="94.1486%" y="549" width="0.3492%" height="15" fill="rgb(239,85,43)" fg:x="66870" fg:w="248"/><text x="94.3986%" y="559.50"></text></g><g><title>__rdl_dealloc (8 samples, 0.01%)</title><rect x="94.4978%" y="549" width="0.0113%" height="15" fill="rgb(231,55,21)" fg:x="67118" fg:w="8"/><text x="94.7478%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (8 samples, 0.01%)</title><rect x="94.4978%" y="533" width="0.0113%" height="15" fill="rgb(225,184,43)" fg:x="67118" fg:w="8"/><text x="94.7478%" y="543.50"></text></g><g><title>__rust_dealloc (18 samples, 0.03%)</title><rect x="94.5091%" y="549" width="0.0253%" height="15" fill="rgb(251,158,41)" fg:x="67126" fg:w="18"/><text x="94.7591%" y="559.50"></text></g><g><title>&lt;bson::document::DocumentIntoIterator as core::iter::traits::iterator::Iterator&gt;::next (996 samples, 1.40%)</title><rect x="93.7460%" y="565" width="1.4023%" height="15" fill="rgb(234,159,37)" fg:x="66584" fg:w="996"/><text x="93.9960%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::remove (435 samples, 0.61%)</title><rect x="94.5358%" y="549" width="0.6125%" height="15" fill="rgb(216,204,22)" fg:x="67145" fg:w="435"/><text x="94.7858%" y="559.50"></text></g><g><title>&lt;bson::de::serde::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1,511 samples, 2.13%)</title><rect x="93.1518%" y="581" width="2.1274%" height="15" fill="rgb(214,17,3)" fg:x="66162" fg:w="1511"/><text x="93.4018%" y="591.50">&lt;..</text></g><g><title>bson::de::serde::Deserializer::new (93 samples, 0.13%)</title><rect x="95.1483%" y="565" width="0.1309%" height="15" fill="rgb(212,111,17)" fg:x="67580" fg:w="93"/><text x="95.3983%" y="575.50"></text></g><g><title>bson::bson::Bson::from_extended_document (10 samples, 0.01%)</title><rect x="95.2792%" y="581" width="0.0141%" height="15" fill="rgb(221,157,24)" fg:x="67673" fg:w="10"/><text x="95.5292%" y="591.50"></text></g><g><title>malloc_consolidate (49 samples, 0.07%)</title><rect x="95.3355%" y="533" width="0.0690%" height="15" fill="rgb(252,16,13)" fg:x="67713" fg:w="49"/><text x="95.5855%" y="543.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (80 samples, 0.11%)</title><rect x="95.2933%" y="581" width="0.1126%" height="15" fill="rgb(221,62,2)" fg:x="67683" fg:w="80"/><text x="95.5433%" y="591.50"></text></g><g><title>__GI___libc_malloc (80 samples, 0.11%)</title><rect x="95.2933%" y="565" width="0.1126%" height="15" fill="rgb(247,87,22)" fg:x="67683" fg:w="80"/><text x="95.5433%" y="575.50"></text></g><g><title>_int_malloc (80 samples, 0.11%)</title><rect x="95.2933%" y="549" width="0.1126%" height="15" fill="rgb(215,73,9)" fg:x="67683" fg:w="80"/><text x="95.5433%" y="559.50"></text></g><g><title>checked_request2size (37 samples, 0.05%)</title><rect x="96.0564%" y="549" width="0.0521%" height="15" fill="rgb(207,175,33)" fg:x="68225" fg:w="37"/><text x="96.3064%" y="559.50"></text></g><g><title>__GI___libc_malloc (123 samples, 0.17%)</title><rect x="95.9747%" y="565" width="0.1732%" height="15" fill="rgb(243,129,54)" fg:x="68167" fg:w="123"/><text x="96.2247%" y="575.50"></text></g><g><title>tcache_get (28 samples, 0.04%)</title><rect x="96.1085%" y="549" width="0.0394%" height="15" fill="rgb(227,119,45)" fg:x="68262" fg:w="28"/><text x="96.3585%" y="559.50"></text></g><g><title>__memmove_avx_unaligned_erms (105 samples, 0.15%)</title><rect x="96.1493%" y="565" width="0.1478%" height="15" fill="rgb(205,109,36)" fg:x="68291" fg:w="105"/><text x="96.3993%" y="575.50"></text></g><g><title>__rdl_alloc (22 samples, 0.03%)</title><rect x="96.2971%" y="565" width="0.0310%" height="15" fill="rgb(205,6,39)" fg:x="68396" fg:w="22"/><text x="96.5471%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (22 samples, 0.03%)</title><rect x="96.2971%" y="549" width="0.0310%" height="15" fill="rgb(221,32,16)" fg:x="68396" fg:w="22"/><text x="96.5471%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (286 samples, 0.40%)</title><rect x="96.8617%" y="549" width="0.4027%" height="15" fill="rgb(228,144,50)" fg:x="68797" fg:w="286"/><text x="97.1117%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (848 samples, 1.19%)</title><rect x="96.3366%" y="565" width="1.1939%" height="15" fill="rgb(229,201,53)" fg:x="68424" fg:w="848"/><text x="96.5866%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (185 samples, 0.26%)</title><rect x="97.2700%" y="549" width="0.2605%" height="15" fill="rgb(249,153,27)" fg:x="69087" fg:w="185"/><text x="97.5200%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (281 samples, 0.40%)</title><rect x="97.9641%" y="549" width="0.3956%" height="15" fill="rgb(227,106,25)" fg:x="69580" fg:w="281"/><text x="98.2141%" y="559.50"></text></g><g><title>mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::GetMoreResponseBody&gt;::deserialize (4,035 samples, 5.68%)</title><rect x="92.6801%" y="725" width="5.6810%" height="15" fill="rgb(230,65,29)" fg:x="65827" fg:w="4035"/><text x="92.9301%" y="735.50">mongodb..</text></g><g><title>&lt;mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::GetMoreResponseBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (4,035 samples, 5.68%)</title><rect x="92.6801%" y="709" width="5.6810%" height="15" fill="rgb(221,57,46)" fg:x="65827" fg:w="4035"/><text x="92.9301%" y="719.50">&lt;mongod..</text></g><g><title>mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::NextBatchBody&gt;::deserialize (4,035 samples, 5.68%)</title><rect x="92.6801%" y="693" width="5.6810%" height="15" fill="rgb(229,161,17)" fg:x="65827" fg:w="4035"/><text x="92.9301%" y="703.50">mongodb..</text></g><g><title>&lt;mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::NextBatchBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (4,035 samples, 5.68%)</title><rect x="92.6801%" y="677" width="5.6810%" height="15" fill="rgb(222,213,11)" fg:x="65827" fg:w="4035"/><text x="92.9301%" y="687.50">&lt;mongod..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::vec_deque::VecDeque&lt;T&gt;&gt;::deserialize (4,035 samples, 5.68%)</title><rect x="92.6801%" y="661" width="5.6810%" height="15" fill="rgb(235,35,13)" fg:x="65827" fg:w="4035"/><text x="92.9301%" y="671.50">serde::..</text></g><g><title>bson::de::serde::&lt;impl serde::de::Deserialize for bson::document::Document&gt;::deserialize (4,035 samples, 5.68%)</title><rect x="92.6801%" y="645" width="5.6810%" height="15" fill="rgb(233,158,34)" fg:x="65827" fg:w="4035"/><text x="92.9301%" y="655.50">bson::d..</text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (4,035 samples, 5.68%)</title><rect x="92.6801%" y="629" width="5.6810%" height="15" fill="rgb(215,151,48)" fg:x="65827" fg:w="4035"/><text x="92.9301%" y="639.50">&lt;bson::..</text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (4,035 samples, 5.68%)</title><rect x="92.6801%" y="613" width="5.6810%" height="15" fill="rgb(229,84,14)" fg:x="65827" fg:w="4035"/><text x="92.9301%" y="623.50">&lt;bson::..</text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (4,035 samples, 5.68%)</title><rect x="92.6801%" y="597" width="5.6810%" height="15" fill="rgb(229,68,14)" fg:x="65827" fg:w="4035"/><text x="92.9301%" y="607.50">&lt;bson::..</text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (2,099 samples, 2.96%)</title><rect x="95.4059%" y="581" width="2.9553%" height="15" fill="rgb(243,106,26)" fg:x="67763" fg:w="2099"/><text x="95.6559%" y="591.50">lin..</text></g><g><title>hashbrown::map::make_hash (590 samples, 0.83%)</title><rect x="97.5305%" y="565" width="0.8307%" height="15" fill="rgb(206,45,38)" fg:x="69272" fg:w="590"/><text x="97.7805%" y="575.50"></text></g><g><title>mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::NextBatchBody&gt;::deserialize (21 samples, 0.03%)</title><rect x="98.3612%" y="725" width="0.0296%" height="15" fill="rgb(226,6,15)" fg:x="69862" fg:w="21"/><text x="98.6112%" y="735.50"></text></g><g><title>&lt;mongodb::operation::get_more::_::&lt;impl serde::de::Deserialize for mongodb::operation::get_more::NextBatchBody&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (21 samples, 0.03%)</title><rect x="98.3612%" y="709" width="0.0296%" height="15" fill="rgb(232,22,54)" fg:x="69862" fg:w="21"/><text x="98.6112%" y="719.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::vec_deque::VecDeque&lt;T&gt;&gt;::deserialize (21 samples, 0.03%)</title><rect x="98.3612%" y="693" width="0.0296%" height="15" fill="rgb(229,222,32)" fg:x="69862" fg:w="21"/><text x="98.6112%" y="703.50"></text></g><g><title>bson::de::serde::&lt;impl serde::de::Deserialize for bson::document::Document&gt;::deserialize (21 samples, 0.03%)</title><rect x="98.3612%" y="677" width="0.0296%" height="15" fill="rgb(228,62,29)" fg:x="69862" fg:w="21"/><text x="98.6112%" y="687.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (21 samples, 0.03%)</title><rect x="98.3612%" y="661" width="0.0296%" height="15" fill="rgb(251,103,34)" fg:x="69862" fg:w="21"/><text x="98.6112%" y="671.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (21 samples, 0.03%)</title><rect x="98.3612%" y="645" width="0.0296%" height="15" fill="rgb(233,12,30)" fg:x="69862" fg:w="21"/><text x="98.6112%" y="655.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (21 samples, 0.03%)</title><rect x="98.3612%" y="629" width="0.0296%" height="15" fill="rgb(238,52,0)" fg:x="69862" fg:w="21"/><text x="98.6112%" y="639.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (21 samples, 0.03%)</title><rect x="98.3612%" y="613" width="0.0296%" height="15" fill="rgb(223,98,5)" fg:x="69862" fg:w="21"/><text x="98.6112%" y="623.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (21 samples, 0.03%)</title><rect x="98.3612%" y="597" width="0.0296%" height="15" fill="rgb(228,75,37)" fg:x="69862" fg:w="21"/><text x="98.6112%" y="607.50"></text></g><g><title>&lt;bson::de::serde::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (67 samples, 0.09%)</title><rect x="98.5766%" y="597" width="0.0943%" height="15" fill="rgb(205,115,49)" fg:x="70015" fg:w="67"/><text x="98.8266%" y="607.50"></text></g><g><title>bson::de::serde::Deserializer::new (8 samples, 0.01%)</title><rect x="98.6596%" y="581" width="0.0113%" height="15" fill="rgb(250,154,43)" fg:x="70074" fg:w="8"/><text x="98.9096%" y="591.50"></text></g><g><title>&lt;linked_hash_map::LinkedHashMap&lt;K,V,S&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 0.02%)</title><rect x="98.6751%" y="597" width="0.0211%" height="15" fill="rgb(226,43,29)" fg:x="70085" fg:w="15"/><text x="98.9251%" y="607.50"></text></g><g><title>__memmove_avx_unaligned_erms (15 samples, 0.02%)</title><rect x="98.6991%" y="597" width="0.0211%" height="15" fill="rgb(249,228,39)" fg:x="70102" fg:w="15"/><text x="98.9491%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (12 samples, 0.02%)</title><rect x="98.7427%" y="597" width="0.0169%" height="15" fill="rgb(216,79,43)" fg:x="70133" fg:w="12"/><text x="98.9927%" y="607.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.02%)</title><rect x="98.8399%" y="581" width="0.0239%" height="15" fill="rgb(228,95,12)" fg:x="70202" fg:w="17"/><text x="99.0899%" y="591.50"></text></g><g><title>__memmove_avx_unaligned_erms (11 samples, 0.02%)</title><rect x="98.8638%" y="581" width="0.0155%" height="15" fill="rgb(249,221,15)" fg:x="70219" fg:w="11"/><text x="99.1138%" y="591.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::collections::vec_deque::VecDeque&lt;T&gt;&gt;::deserialize (415 samples, 0.58%)</title><rect x="98.3907%" y="725" width="0.5843%" height="15" fill="rgb(233,34,13)" fg:x="69883" fg:w="415"/><text x="98.6407%" y="735.50"></text></g><g><title>bson::de::serde::&lt;impl serde::de::Deserialize for bson::document::Document&gt;::deserialize (415 samples, 0.58%)</title><rect x="98.3907%" y="709" width="0.5843%" height="15" fill="rgb(214,103,39)" fg:x="69883" fg:w="415"/><text x="98.6407%" y="719.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (415 samples, 0.58%)</title><rect x="98.3907%" y="693" width="0.5843%" height="15" fill="rgb(251,126,39)" fg:x="69883" fg:w="415"/><text x="98.6407%" y="703.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (415 samples, 0.58%)</title><rect x="98.3907%" y="677" width="0.5843%" height="15" fill="rgb(214,216,36)" fg:x="69883" fg:w="415"/><text x="98.6407%" y="687.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (415 samples, 0.58%)</title><rect x="98.3907%" y="661" width="0.5843%" height="15" fill="rgb(220,221,8)" fg:x="69883" fg:w="415"/><text x="98.6407%" y="671.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (415 samples, 0.58%)</title><rect x="98.3907%" y="645" width="0.5843%" height="15" fill="rgb(240,216,3)" fg:x="69883" fg:w="415"/><text x="98.6407%" y="655.50"></text></g><g><title>&lt;bson::de::serde::Deserializer as serde::de::Deserializer&gt;::deserialize_any (415 samples, 0.58%)</title><rect x="98.3907%" y="629" width="0.5843%" height="15" fill="rgb(232,218,17)" fg:x="69883" fg:w="415"/><text x="98.6407%" y="639.50"></text></g><g><title>&lt;bson::de::serde::BsonVisitor as serde::de::Visitor&gt;::visit_map (415 samples, 0.58%)</title><rect x="98.3907%" y="613" width="0.5843%" height="15" fill="rgb(229,163,45)" fg:x="69883" fg:w="415"/><text x="98.6407%" y="623.50"></text></g><g><title>linked_hash_map::LinkedHashMap&lt;K,V,S&gt;::insert (153 samples, 0.22%)</title><rect x="98.7596%" y="597" width="0.2154%" height="15" fill="rgb(231,110,42)" fg:x="70145" fg:w="153"/><text x="99.0096%" y="607.50"></text></g><g><title>hashbrown::map::make_hash (64 samples, 0.09%)</title><rect x="98.8849%" y="581" width="0.0901%" height="15" fill="rgb(208,170,48)" fg:x="70234" fg:w="64"/><text x="99.1349%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (32 samples, 0.05%)</title><rect x="98.9300%" y="565" width="0.0451%" height="15" fill="rgb(239,116,25)" fg:x="70266" fg:w="32"/><text x="99.1800%" y="575.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (50 samples, 0.07%)</title><rect x="98.9750%" y="725" width="0.0704%" height="15" fill="rgb(219,200,50)" fg:x="70298" fg:w="50"/><text x="99.2250%" y="735.50"></text></g><g><title>std::io::Read::read_to_string (14 samples, 0.02%)</title><rect x="99.0468%" y="725" width="0.0197%" height="15" fill="rgb(245,200,0)" fg:x="70349" fg:w="14"/><text x="99.2968%" y="735.50"></text></g><g><title>tokio::runtime::enter::Enter::block_on (40 samples, 0.06%)</title><rect x="99.0665%" y="725" width="0.0563%" height="15" fill="rgb(245,119,33)" fg:x="70363" fg:w="40"/><text x="99.3165%" y="735.50"></text></g><g><title>&lt;tokio::park::thread::CachedParkThread as tokio::park::Park&gt;::park (40 samples, 0.06%)</title><rect x="99.0665%" y="709" width="0.0563%" height="15" fill="rgb(231,125,12)" fg:x="70363" fg:w="40"/><text x="99.3165%" y="719.50"></text></g><g><title>tokio::park::thread::Inner::park (40 samples, 0.06%)</title><rect x="99.0665%" y="693" width="0.0563%" height="15" fill="rgb(216,96,41)" fg:x="70363" fg:w="40"/><text x="99.3165%" y="703.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (40 samples, 0.06%)</title><rect x="99.0665%" y="677" width="0.0563%" height="15" fill="rgb(248,43,45)" fg:x="70363" fg:w="40"/><text x="99.3165%" y="687.50"></text></g><g><title>syscall (39 samples, 0.05%)</title><rect x="99.0679%" y="661" width="0.0549%" height="15" fill="rgb(217,222,7)" fg:x="70364" fg:w="39"/><text x="99.3179%" y="671.50"></text></g><g><title>[unknown] (39 samples, 0.05%)</title><rect x="99.0679%" y="645" width="0.0549%" height="15" fill="rgb(233,28,6)" fg:x="70364" fg:w="39"/><text x="99.3179%" y="655.50"></text></g><g><title>[unknown] (39 samples, 0.05%)</title><rect x="99.0679%" y="629" width="0.0549%" height="15" fill="rgb(231,218,15)" fg:x="70364" fg:w="39"/><text x="99.3179%" y="639.50"></text></g><g><title>[unknown] (38 samples, 0.05%)</title><rect x="99.0694%" y="613" width="0.0535%" height="15" fill="rgb(226,171,48)" fg:x="70365" fg:w="38"/><text x="99.3194%" y="623.50"></text></g><g><title>[unknown] (38 samples, 0.05%)</title><rect x="99.0694%" y="597" width="0.0535%" height="15" fill="rgb(235,201,9)" fg:x="70365" fg:w="38"/><text x="99.3194%" y="607.50"></text></g><g><title>[unknown] (38 samples, 0.05%)</title><rect x="99.0694%" y="581" width="0.0535%" height="15" fill="rgb(217,80,15)" fg:x="70365" fg:w="38"/><text x="99.3194%" y="591.50"></text></g><g><title>[unknown] (38 samples, 0.05%)</title><rect x="99.0694%" y="565" width="0.0535%" height="15" fill="rgb(219,152,8)" fg:x="70365" fg:w="38"/><text x="99.3194%" y="575.50"></text></g><g><title>[unknown] (38 samples, 0.05%)</title><rect x="99.0694%" y="549" width="0.0535%" height="15" fill="rgb(243,107,38)" fg:x="70365" fg:w="38"/><text x="99.3194%" y="559.50"></text></g><g><title>[unknown] (38 samples, 0.05%)</title><rect x="99.0694%" y="533" width="0.0535%" height="15" fill="rgb(231,17,5)" fg:x="70365" fg:w="38"/><text x="99.3194%" y="543.50"></text></g><g><title>[unknown] (38 samples, 0.05%)</title><rect x="99.0694%" y="517" width="0.0535%" height="15" fill="rgb(209,25,54)" fg:x="70365" fg:w="38"/><text x="99.3194%" y="527.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="99.0708%" y="501" width="0.0521%" height="15" fill="rgb(219,0,2)" fg:x="70366" fg:w="37"/><text x="99.3208%" y="511.50"></text></g><g><title>[unknown] (36 samples, 0.05%)</title><rect x="99.0722%" y="485" width="0.0507%" height="15" fill="rgb(246,9,5)" fg:x="70367" fg:w="36"/><text x="99.3222%" y="495.50"></text></g><g><title>[unknown] (35 samples, 0.05%)</title><rect x="99.0736%" y="469" width="0.0493%" height="15" fill="rgb(226,159,4)" fg:x="70368" fg:w="35"/><text x="99.3236%" y="479.50"></text></g><g><title>[unknown] (34 samples, 0.05%)</title><rect x="99.0750%" y="453" width="0.0479%" height="15" fill="rgb(219,175,34)" fg:x="70369" fg:w="34"/><text x="99.3250%" y="463.50"></text></g><g><title>[unknown] (34 samples, 0.05%)</title><rect x="99.0750%" y="437" width="0.0479%" height="15" fill="rgb(236,10,46)" fg:x="70369" fg:w="34"/><text x="99.3250%" y="447.50"></text></g><g><title>[unknown] (65,734 samples, 92.55%)</title><rect x="6.6342%" y="741" width="92.5492%" height="15" fill="rgb(240,211,16)" fg:x="4712" fg:w="65734"/><text x="6.8842%" y="751.50">[unknown]</text></g><g><title>unlink_chunk (43 samples, 0.06%)</title><rect x="99.1229%" y="725" width="0.0605%" height="15" fill="rgb(205,3,43)" fg:x="70403" fg:w="43"/><text x="99.3729%" y="735.50"></text></g><g><title>[unknown] (50 samples, 0.07%)</title><rect x="99.1862%" y="725" width="0.0704%" height="15" fill="rgb(245,7,22)" fg:x="70448" fg:w="50"/><text x="99.4362%" y="735.50"></text></g><g><title>[unknown] (50 samples, 0.07%)</title><rect x="99.1862%" y="709" width="0.0704%" height="15" fill="rgb(239,132,32)" fg:x="70448" fg:w="50"/><text x="99.4362%" y="719.50"></text></g><g><title>[unknown] (49 samples, 0.07%)</title><rect x="99.1876%" y="693" width="0.0690%" height="15" fill="rgb(228,202,34)" fg:x="70449" fg:w="49"/><text x="99.4376%" y="703.50"></text></g><g><title>[unknown] (47 samples, 0.07%)</title><rect x="99.1904%" y="677" width="0.0662%" height="15" fill="rgb(254,200,22)" fg:x="70451" fg:w="47"/><text x="99.4404%" y="687.50"></text></g><g><title>[unknown] (47 samples, 0.07%)</title><rect x="99.1904%" y="661" width="0.0662%" height="15" fill="rgb(219,10,39)" fg:x="70451" fg:w="47"/><text x="99.4404%" y="671.50"></text></g><g><title>[unknown] (47 samples, 0.07%)</title><rect x="99.1904%" y="645" width="0.0662%" height="15" fill="rgb(226,210,39)" fg:x="70451" fg:w="47"/><text x="99.4404%" y="655.50"></text></g><g><title>[unknown] (46 samples, 0.06%)</title><rect x="99.1918%" y="629" width="0.0648%" height="15" fill="rgb(208,219,16)" fg:x="70452" fg:w="46"/><text x="99.4418%" y="639.50"></text></g><g><title>[unknown] (46 samples, 0.06%)</title><rect x="99.1918%" y="613" width="0.0648%" height="15" fill="rgb(216,158,51)" fg:x="70452" fg:w="46"/><text x="99.4418%" y="623.50"></text></g><g><title>__GI___clone (53 samples, 0.07%)</title><rect x="99.1834%" y="741" width="0.0746%" height="15" fill="rgb(233,14,44)" fg:x="70446" fg:w="53"/><text x="99.4334%" y="751.50"></text></g><g><title>__GI___libc_realloc (31 samples, 0.04%)</title><rect x="99.2608%" y="741" width="0.0436%" height="15" fill="rgb(237,97,39)" fg:x="70501" fg:w="31"/><text x="99.5108%" y="751.50"></text></g><g><title>__rdl_realloc (14 samples, 0.02%)</title><rect x="99.3087%" y="741" width="0.0197%" height="15" fill="rgb(218,198,43)" fg:x="70535" fg:w="14"/><text x="99.5587%" y="751.50"></text></g><g><title>_int_malloc (48 samples, 0.07%)</title><rect x="99.3284%" y="741" width="0.0676%" height="15" fill="rgb(231,104,20)" fg:x="70549" fg:w="48"/><text x="99.5784%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (12 samples, 0.02%)</title><rect x="99.4044%" y="741" width="0.0169%" height="15" fill="rgb(254,36,13)" fg:x="70603" fg:w="12"/><text x="99.6544%" y="751.50"></text></g><g><title>my-bench (70,668 samples, 99.50%)</title><rect x="0.0563%" y="757" width="99.4960%" height="15" fill="rgb(248,14,50)" fg:x="40" fg:w="70668"/><text x="0.3063%" y="767.50">my-bench</text></g><g><title>malloc_consolidate (92 samples, 0.13%)</title><rect x="99.4227%" y="741" width="0.1295%" height="15" fill="rgb(217,107,29)" fg:x="70616" fg:w="92"/><text x="99.6727%" y="751.50"></text></g><g><title>rustup_init::main (18 samples, 0.03%)</title><rect x="99.5861%" y="725" width="0.0253%" height="15" fill="rgb(251,169,33)" fg:x="70732" fg:w="18"/><text x="99.8361%" y="735.50"></text></g><g><title>rustup::config::Cfg::find_or_install_override_toolchain_or_default (18 samples, 0.03%)</title><rect x="99.5861%" y="709" width="0.0253%" height="15" fill="rgb(217,108,32)" fg:x="70732" fg:w="18"/><text x="99.8361%" y="719.50"></text></g><g><title>rustup::toolchain::DistributableToolchain::list_components (12 samples, 0.02%)</title><rect x="99.5945%" y="693" width="0.0169%" height="15" fill="rgb(219,66,42)" fg:x="70738" fg:w="12"/><text x="99.8445%" y="703.50"></text></g><g><title>rustup::dist::manifestation::Manifestation::load_manifest (12 samples, 0.02%)</title><rect x="99.5945%" y="677" width="0.0169%" height="15" fill="rgb(206,180,7)" fg:x="70738" fg:w="12"/><text x="99.8445%" y="687.50"></text></g><g><title>rustup::dist::manifest::Manifest::parse (12 samples, 0.02%)</title><rect x="99.5945%" y="661" width="0.0169%" height="15" fill="rgb(208,226,31)" fg:x="70738" fg:w="12"/><text x="99.8445%" y="671.50"></text></g><g><title>toml::de::from_str (10 samples, 0.01%)</title><rect x="99.5973%" y="645" width="0.0141%" height="15" fill="rgb(218,26,49)" fg:x="70740" fg:w="10"/><text x="99.8473%" y="655.50"></text></g><g><title>[unknown] (34 samples, 0.05%)</title><rect x="99.5692%" y="741" width="0.0479%" height="15" fill="rgb(233,197,48)" fg:x="70720" fg:w="34"/><text x="99.8192%" y="751.50"></text></g><g><title>_start (8 samples, 0.01%)</title><rect x="99.6184%" y="741" width="0.0113%" height="15" fill="rgb(252,181,51)" fg:x="70755" fg:w="8"/><text x="99.8684%" y="751.50"></text></g><g><title>rustc (50 samples, 0.07%)</title><rect x="99.5607%" y="757" width="0.0704%" height="15" fill="rgb(253,90,19)" fg:x="70714" fg:w="50"/><text x="99.8107%" y="767.50"></text></g><g><title>[unknown] (8 samples, 0.01%)</title><rect x="99.6410%" y="741" width="0.0113%" height="15" fill="rgb(215,171,30)" fg:x="70771" fg:w="8"/><text x="99.8910%" y="751.50"></text></g><g><title>[unknown] (87 samples, 0.12%)</title><rect x="99.7212%" y="437" width="0.1225%" height="15" fill="rgb(214,222,9)" fg:x="70828" fg:w="87"/><text x="99.9712%" y="447.50"></text></g><g><title>[unknown] (84 samples, 0.12%)</title><rect x="99.7255%" y="421" width="0.1183%" height="15" fill="rgb(223,3,22)" fg:x="70831" fg:w="84"/><text x="99.9755%" y="431.50"></text></g><g><title>[unknown] (80 samples, 0.11%)</title><rect x="99.7311%" y="405" width="0.1126%" height="15" fill="rgb(225,196,46)" fg:x="70835" fg:w="80"/><text x="99.9811%" y="415.50"></text></g><g><title>[unknown] (80 samples, 0.11%)</title><rect x="99.7311%" y="389" width="0.1126%" height="15" fill="rgb(209,110,37)" fg:x="70835" fg:w="80"/><text x="99.9811%" y="399.50"></text></g><g><title>[unknown] (80 samples, 0.11%)</title><rect x="99.7311%" y="373" width="0.1126%" height="15" fill="rgb(249,89,12)" fg:x="70835" fg:w="80"/><text x="99.9811%" y="383.50"></text></g><g><title>[unknown] (79 samples, 0.11%)</title><rect x="99.7325%" y="357" width="0.1112%" height="15" fill="rgb(226,27,33)" fg:x="70836" fg:w="79"/><text x="99.9825%" y="367.50"></text></g><g><title>[unknown] (79 samples, 0.11%)</title><rect x="99.7325%" y="341" width="0.1112%" height="15" fill="rgb(213,82,22)" fg:x="70836" fg:w="79"/><text x="99.9825%" y="351.50"></text></g><g><title>[unknown] (74 samples, 0.10%)</title><rect x="99.7395%" y="325" width="0.1042%" height="15" fill="rgb(248,140,0)" fg:x="70841" fg:w="74"/><text x="99.9895%" y="335.50"></text></g><g><title>[unknown] (74 samples, 0.10%)</title><rect x="99.7395%" y="309" width="0.1042%" height="15" fill="rgb(228,106,3)" fg:x="70841" fg:w="74"/><text x="99.9895%" y="319.50"></text></g><g><title>[unknown] (67 samples, 0.09%)</title><rect x="99.7494%" y="293" width="0.0943%" height="15" fill="rgb(209,23,37)" fg:x="70848" fg:w="67"/><text x="99.9994%" y="303.50"></text></g><g><title>[unknown] (61 samples, 0.09%)</title><rect x="99.7578%" y="277" width="0.0859%" height="15" fill="rgb(241,93,50)" fg:x="70854" fg:w="61"/><text x="100.0078%" y="287.50"></text></g><g><title>[unknown] (56 samples, 0.08%)</title><rect x="99.7649%" y="261" width="0.0788%" height="15" fill="rgb(253,46,43)" fg:x="70859" fg:w="56"/><text x="100.0149%" y="271.50"></text></g><g><title>[unknown] (53 samples, 0.07%)</title><rect x="99.7691%" y="245" width="0.0746%" height="15" fill="rgb(226,206,43)" fg:x="70862" fg:w="53"/><text x="100.0191%" y="255.50"></text></g><g><title>[unknown] (48 samples, 0.07%)</title><rect x="99.7761%" y="229" width="0.0676%" height="15" fill="rgb(217,54,7)" fg:x="70867" fg:w="48"/><text x="100.0261%" y="239.50"></text></g><g><title>[unknown] (46 samples, 0.06%)</title><rect x="99.7790%" y="213" width="0.0648%" height="15" fill="rgb(223,5,52)" fg:x="70869" fg:w="46"/><text x="100.0290%" y="223.50"></text></g><g><title>mio::poll::Poll::poll (90 samples, 0.13%)</title><rect x="99.7198%" y="469" width="0.1267%" height="15" fill="rgb(206,52,46)" fg:x="70827" fg:w="90"/><text x="99.9698%" y="479.50"></text></g><g><title>epoll_wait (89 samples, 0.13%)</title><rect x="99.7212%" y="453" width="0.1253%" height="15" fill="rgb(253,136,11)" fg:x="70828" fg:w="89"/><text x="99.9712%" y="463.50"></text></g><g><title>tokio::io::driver::Driver::turn (97 samples, 0.14%)</title><rect x="99.7170%" y="485" width="0.1366%" height="15" fill="rgb(208,106,33)" fg:x="70825" fg:w="97"/><text x="99.9670%" y="495.50"></text></g><g><title>&lt;tokio::park::either::Either&lt;A,B&gt; as tokio::park::Park&gt;::park (100 samples, 0.14%)</title><rect x="99.7156%" y="517" width="0.1408%" height="15" fill="rgb(206,54,4)" fg:x="70824" fg:w="100"/><text x="99.9656%" y="527.50"></text></g><g><title>tokio::time::driver::Driver&lt;P&gt;::park_internal (100 samples, 0.14%)</title><rect x="99.7156%" y="501" width="0.1408%" height="15" fill="rgb(213,3,15)" fg:x="70824" fg:w="100"/><text x="99.9656%" y="511.50"></text></g><g><title>__GI___sched_yield (52 samples, 0.07%)</title><rect x="99.8564%" y="517" width="0.0732%" height="15" fill="rgb(252,211,39)" fg:x="70924" fg:w="52"/><text x="100.1064%" y="527.50"></text></g><g><title>[unknown] (50 samples, 0.07%)</title><rect x="99.8592%" y="501" width="0.0704%" height="15" fill="rgb(223,6,36)" fg:x="70926" fg:w="50"/><text x="100.1092%" y="511.50"></text></g><g><title>[unknown] (41 samples, 0.06%)</title><rect x="99.8719%" y="485" width="0.0577%" height="15" fill="rgb(252,169,45)" fg:x="70935" fg:w="41"/><text x="100.1219%" y="495.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="99.9043%" y="469" width="0.0253%" height="15" fill="rgb(212,48,26)" fg:x="70958" fg:w="18"/><text x="100.1543%" y="479.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="99.9043%" y="453" width="0.0253%" height="15" fill="rgb(251,102,48)" fg:x="70958" fg:w="18"/><text x="100.1543%" y="463.50"></text></g><g><title>[unknown] (18 samples, 0.03%)</title><rect x="99.9043%" y="437" width="0.0253%" height="15" fill="rgb(243,208,16)" fg:x="70958" fg:w="18"/><text x="100.1543%" y="447.50"></text></g><g><title>[unknown] (17 samples, 0.02%)</title><rect x="99.9057%" y="421" width="0.0239%" height="15" fill="rgb(219,96,24)" fg:x="70959" fg:w="17"/><text x="100.1557%" y="431.50"></text></g><g><title>[unknown] (14 samples, 0.02%)</title><rect x="99.9099%" y="405" width="0.0197%" height="15" fill="rgb(219,33,29)" fg:x="70962" fg:w="14"/><text x="100.1599%" y="415.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="99.9155%" y="389" width="0.0141%" height="15" fill="rgb(223,176,5)" fg:x="70966" fg:w="10"/><text x="100.1655%" y="399.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (39 samples, 0.05%)</title><rect x="99.9296%" y="517" width="0.0549%" height="15" fill="rgb(228,140,14)" fg:x="70976" fg:w="39"/><text x="100.1796%" y="527.50"></text></g><g><title>syscall (39 samples, 0.05%)</title><rect x="99.9296%" y="501" width="0.0549%" height="15" fill="rgb(217,179,31)" fg:x="70976" fg:w="39"/><text x="100.1796%" y="511.50"></text></g><g><title>[unknown] (39 samples, 0.05%)</title><rect x="99.9296%" y="485" width="0.0549%" height="15" fill="rgb(230,9,30)" fg:x="70976" fg:w="39"/><text x="100.1796%" y="495.50"></text></g><g><title>[unknown] (39 samples, 0.05%)</title><rect x="99.9296%" y="469" width="0.0549%" height="15" fill="rgb(230,136,20)" fg:x="70976" fg:w="39"/><text x="100.1796%" y="479.50"></text></g><g><title>[unknown] (38 samples, 0.05%)</title><rect x="99.9310%" y="453" width="0.0535%" height="15" fill="rgb(215,210,22)" fg:x="70977" fg:w="38"/><text x="100.1810%" y="463.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="99.9324%" y="437" width="0.0521%" height="15" fill="rgb(218,43,5)" fg:x="70978" fg:w="37"/><text x="100.1824%" y="447.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="99.9324%" y="421" width="0.0521%" height="15" fill="rgb(216,11,5)" fg:x="70978" fg:w="37"/><text x="100.1824%" y="431.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="99.9324%" y="405" width="0.0521%" height="15" fill="rgb(209,82,29)" fg:x="70978" fg:w="37"/><text x="100.1824%" y="415.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="99.9324%" y="389" width="0.0521%" height="15" fill="rgb(244,115,12)" fg:x="70978" fg:w="37"/><text x="100.1824%" y="399.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="99.9324%" y="373" width="0.0521%" height="15" fill="rgb(222,82,18)" fg:x="70978" fg:w="37"/><text x="100.1824%" y="383.50"></text></g><g><title>[unknown] (37 samples, 0.05%)</title><rect x="99.9324%" y="357" width="0.0521%" height="15" fill="rgb(249,227,8)" fg:x="70978" fg:w="37"/><text x="100.1824%" y="367.50"></text></g><g><title>[unknown] (35 samples, 0.05%)</title><rect x="99.9352%" y="341" width="0.0493%" height="15" fill="rgb(253,141,45)" fg:x="70980" fg:w="35"/><text x="100.1852%" y="351.50"></text></g><g><title>[unknown] (34 samples, 0.05%)</title><rect x="99.9366%" y="325" width="0.0479%" height="15" fill="rgb(234,184,4)" fg:x="70981" fg:w="34"/><text x="100.1866%" y="335.50"></text></g><g><title>[unknown] (34 samples, 0.05%)</title><rect x="99.9366%" y="309" width="0.0479%" height="15" fill="rgb(218,194,23)" fg:x="70981" fg:w="34"/><text x="100.1866%" y="319.50"></text></g><g><title>[unknown] (33 samples, 0.05%)</title><rect x="99.9381%" y="293" width="0.0465%" height="15" fill="rgb(235,66,41)" fg:x="70982" fg:w="33"/><text x="100.1881%" y="303.50"></text></g><g><title>[unknown] (33 samples, 0.05%)</title><rect x="99.9381%" y="277" width="0.0465%" height="15" fill="rgb(245,217,1)" fg:x="70982" fg:w="33"/><text x="100.1881%" y="287.50"></text></g><g><title>&lt;tokio::runtime::park::Parker as tokio::park::Park&gt;::park (195 samples, 0.27%)</title><rect x="99.7114%" y="533" width="0.2745%" height="15" fill="rgb(229,91,1)" fg:x="70821" fg:w="195"/><text x="99.9614%" y="543.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::park_timeout (196 samples, 0.28%)</title><rect x="99.7114%" y="549" width="0.2760%" height="15" fill="rgb(207,101,30)" fg:x="70821" fg:w="196"/><text x="99.9614%" y="559.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (227 samples, 0.32%)</title><rect x="99.6691%" y="693" width="0.3196%" height="15" fill="rgb(223,82,49)" fg:x="70791" fg:w="227"/><text x="99.9191%" y="703.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (227 samples, 0.32%)</title><rect x="99.6691%" y="677" width="0.3196%" height="15" fill="rgb(218,167,17)" fg:x="70791" fg:w="227"/><text x="99.9191%" y="687.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (227 samples, 0.32%)</title><rect x="99.6691%" y="661" width="0.3196%" height="15" fill="rgb(208,103,14)" fg:x="70791" fg:w="227"/><text x="99.9191%" y="671.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (224 samples, 0.32%)</title><rect x="99.6734%" y="645" width="0.3154%" height="15" fill="rgb(238,20,8)" fg:x="70794" fg:w="224"/><text x="99.9234%" y="655.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (212 samples, 0.30%)</title><rect x="99.6903%" y="629" width="0.2985%" height="15" fill="rgb(218,80,54)" fg:x="70806" fg:w="212"/><text x="99.9403%" y="639.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (212 samples, 0.30%)</title><rect x="99.6903%" y="613" width="0.2985%" height="15" fill="rgb(240,144,17)" fg:x="70806" fg:w="212"/><text x="99.9403%" y="623.50"></text></g><g><title>tokio::runtime::thread_pool::worker::run (211 samples, 0.30%)</title><rect x="99.6917%" y="597" width="0.2971%" height="15" fill="rgb(245,27,50)" fg:x="70807" fg:w="211"/><text x="99.9417%" y="607.50"></text></g><g><title>tokio::macros::scoped_tls::ScopedKey&lt;T&gt;::set (210 samples, 0.30%)</title><rect x="99.6931%" y="581" width="0.2957%" height="15" fill="rgb(251,51,7)" fg:x="70808" fg:w="210"/><text x="99.9431%" y="591.50"></text></g><g><title>tokio::runtime::thread_pool::worker::Context::run (210 samples, 0.30%)</title><rect x="99.6931%" y="565" width="0.2957%" height="15" fill="rgb(245,217,29)" fg:x="70808" fg:w="210"/><text x="99.9431%" y="575.50"></text></g><g><title>all (71,026 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(221,176,29)" fg:x="0" fg:w="71026"/><text x="0.2500%" y="783.50"></text></g><g><title>tokio-runtime-w (262 samples, 0.37%)</title><rect x="99.6311%" y="757" width="0.3689%" height="15" fill="rgb(212,180,24)" fg:x="70764" fg:w="262"/><text x="99.8811%" y="767.50"></text></g><g><title>__GI___clone (247 samples, 0.35%)</title><rect x="99.6522%" y="741" width="0.3478%" height="15" fill="rgb(254,24,2)" fg:x="70779" fg:w="247"/><text x="99.9022%" y="751.50"></text></g><g><title>start_thread (242 samples, 0.34%)</title><rect x="99.6593%" y="725" width="0.3407%" height="15" fill="rgb(230,100,2)" fg:x="70784" fg:w="242"/><text x="99.9093%" y="735.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (235 samples, 0.33%)</title><rect x="99.6691%" y="709" width="0.3309%" height="15" fill="rgb(219,142,25)" fg:x="70791" fg:w="235"/><text x="99.9191%" y="719.50"></text></g></svg></svg>